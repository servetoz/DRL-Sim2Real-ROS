{"version":3,"file":"studio-1478.js","mappings":"4BAeA,IAAIA,EAEJ,MAAMC,EAAQC,GAAiC,CAC7C,KAAK,YAAYA,CAAG,CACtB,EAEA,KAAK,UAAaC,GAAyC,CACzD,KAAM,CAAE,KAAAC,EAAM,KAAAC,CAAK,EAAIF,EAAM,KAC7B,OAAQC,EAAM,CACZ,IAAK,OACH,GAAI,CACFJ,EAAK,IAAI,UAAUK,EAAK,MAAOA,EAAK,SAAS,EAC7CL,EAAG,WAAa,cAChBA,EAAG,QAAWM,GAAY,CACxBL,EAAK,CACH,KAAM,QACN,MAAQK,EAAwC,K,CACjD,CACH,EACAN,EAAG,OAAUO,GAAW,CACtBN,EAAK,CACH,KAAM,OACN,SAAUD,EAAI,Q,CACf,CACH,EACAA,EAAG,QAAWM,GAAY,CACxBL,EAAK,CAAE,KAAM,QAAS,KAAM,KAAK,MAAM,KAAK,UAAUK,CAAO,GAAK,IAAI,CAAE,CAAC,CAC3E,EACAN,EAAG,UAAaM,GAA0B,CACxCL,EAAK,CACH,KAAM,UACN,KAAMK,EAAQ,I,CACf,CACH,C,OACOE,EAAP,CAIAP,EAAK,CACH,KAAM,QACN,MAAOO,GAAO,CAAE,QAAS,+BAAgC,C,CAC1D,C,CAEH,MACF,IAAK,QACHR,GAAI,MAAM,EACV,MACF,IAAK,OACHA,GAAI,KAAKK,CAAI,EACb,K,CAEN,C","sources":["webpack:///../../packages/studio-base/src/players/FoxgloveWebSocketPlayer/worker.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nexport type ToWorkerMessage =\n  | { type: \"open\"; data: { wsUrl: string; protocols?: string[] | string } }\n  | { type: \"close\"; data: undefined }\n  | { type: \"data\"; data: string | ArrayBuffer | ArrayBufferView };\n\nexport type FromWorkerMessage =\n  | { type: \"open\"; protocol: string }\n  | { type: \"close\"; data: unknown }\n  | { type: \"error\"; error: unknown }\n  | { type: \"message\"; data: unknown };\n\nlet ws: WebSocket | undefined = undefined;\n\nconst send = (msg: FromWorkerMessage): void => {\n  self.postMessage(msg);\n};\n\nself.onmessage = (event: MessageEvent<ToWorkerMessage>) => {\n  const { type, data } = event.data;\n  switch (type) {\n    case \"open\":\n      try {\n        ws = new WebSocket(data.wsUrl, data.protocols);\n        ws.binaryType = \"arraybuffer\";\n        ws.onerror = (wsEvent) => {\n          send({\n            type: \"error\",\n            error: (wsEvent as unknown as { error: Error }).error,\n          });\n        };\n        ws.onopen = (_event) => {\n          send({\n            type: \"open\",\n            protocol: ws!.protocol,\n          });\n        };\n        ws.onclose = (wsEvent) => {\n          send({ type: \"close\", data: JSON.parse(JSON.stringify(wsEvent) ?? \"{}\") });\n        };\n        ws.onmessage = (wsEvent: MessageEvent) => {\n          send({\n            type: \"message\",\n            data: wsEvent.data,\n          });\n        };\n      } catch (err) {\n        // try-catch is needed to catch `Mixed Content` errors in Chrome, where the client\n        // attempts to load `ws://` from `https://`. (Safari would catch these in `ws.onerror`\n        // but with `undefined` as an error.)\n        send({\n          type: \"error\",\n          error: err ?? { message: \"Insecure WebSocket connection\" },\n        });\n      }\n      break;\n    case \"close\":\n      ws?.close();\n      break;\n    case \"data\":\n      ws?.send(data);\n      break;\n  }\n};\n"],"names":["ws","send","msg","event","type","data","wsEvent","_event","err"],"sourceRoot":""}