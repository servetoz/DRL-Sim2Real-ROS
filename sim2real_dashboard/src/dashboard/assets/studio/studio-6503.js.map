{"version":3,"file":"studio-6503.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/CaptureErrorBoundary.tsx","webpack:///../../packages/studio-base/src/panels/Map/types.ts","webpack:///../../packages/studio-base/src/panels/Map/getAccuracy.ts","webpack:///../../packages/studio-base/src/panels/Map/FilteredPointLayer.ts","webpack:///../../packages/studio-base/src/panels/Map/config.ts","webpack:///../../packages/studio-base/src/panels/Map/support.ts","webpack:///../../packages/studio-base/src/panels/Map/MapPanel.tsx","webpack:///../../packages/studio-base/src/panels/Map/initPanel.tsx","webpack:///../../packages/studio-base/src/panels/Map/index.tsx","webpack:///../../packages/studio-base/src/util/plotColors.ts","webpack:///../../packages/studio-base/src/util/toolsColorScheme.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\nimport { Component, PropsWithChildren, ReactNode } from \"react\";\n\ntype Props = {\n  onError: (err: Error) => void;\n};\n\ntype State = {\n  hadError: boolean;\n};\n\n/** An error boundary that calls an onError function when it captures an error */\nexport class CaptureErrorBoundary extends Component<PropsWithChildren<Props>, State> {\n  public override state: State = {\n    hadError: false,\n  };\n\n  public override componentDidCatch(error: Error): void {\n    this.setState({ hadError: true });\n    this.props.onError(error);\n  }\n\n  public override render(): ReactNode {\n    // Avoid rendering children since the children are what caused the error\n    if (this.state.hadError) {\n      return <></>;\n    }\n\n    return this.props.children;\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessageEvent } from \"@foxglove/studio\";\nimport { FoxgloveMessages } from \"@foxglove/studio-base/types/FoxgloveMessages\";\n\nexport type Point = {\n  lat: number;\n  lon: number;\n};\n\nexport type Matrix3x3 = [number, number, number, number, number, number, number, number, number];\n\n// https://docs.ros.org/en/api/sensor_msgs/html/msg/NavSatFix.html\n\nexport enum NavSatFixPositionCovarianceType {\n  COVARIANCE_TYPE_UNKNOWN = 0,\n  COVARIANCE_TYPE_APPROXIMATED = 1,\n  COVARIANCE_TYPE_DIAGONAL_KNOWN = 2,\n  COVARIANCE_TYPE_KNOWN = 3,\n}\n\nexport enum NavSatFixStatus {\n  STATUS_NO_FIX = -1, // unable to fix position\n  STATUS_FIX = 0, // unaugmented fix\n  STATUS_SBAS_FIX = 1, // with satellite-based augmentation\n  STATUS_GBAS_FIX = 2, // with ground-based augmentation\n}\n\n// Bits defining which Global Navigation Satellite System signals were\n// used by the receiver.\nexport enum NavSatFixService {\n  SERVICE_GPS = 1,\n  SERVICE_GLONASS = 2,\n  SERVICE_COMPASS = 4, // includes BeiDou.\n  SERVICE_GALILEO = 8,\n}\n\nexport type NavSatFixMsg = {\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  status?: { status: NavSatFixStatus; service: NavSatFixService };\n  position_covariance?: Matrix3x3;\n  position_covariance_type?: NavSatFixPositionCovarianceType;\n};\n\nexport type MapPanelMessage =\n  | MessageEvent<FoxgloveMessages[\"foxglove.GeoJSON\"]>\n  | MessageEvent<NavSatFixMsg>;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MathNumericType, atan2, eigs, isNumber } from \"mathjs\";\n\nimport {\n  NavSatFixMsg,\n  NavSatFixPositionCovarianceType,\n} from \"@foxglove/studio-base/panels/Map/types\";\n\ntype NumericPair = [MathNumericType, MathNumericType];\n\n/**\n * Calculates the accuracy of a NavSatFix message, based on its type, and returns\n * information suitable for display as a leaflet Ellipse.\n *\n * @param msg NavSatFix\n * @returns radii and tilt (degrees from W)\n */\nexport function getAccuracy(\n  msg: NavSatFixMsg,\n): { radii: [number, number]; tilt: number } | undefined {\n  const covariance = msg.position_covariance;\n  if (!covariance) {\n    return undefined;\n  }\n\n  switch (msg.position_covariance_type) {\n    case undefined:\n      return undefined;\n    case NavSatFixPositionCovarianceType.COVARIANCE_TYPE_UNKNOWN:\n      return undefined;\n    case NavSatFixPositionCovarianceType.COVARIANCE_TYPE_DIAGONAL_KNOWN: {\n      // Tilt is degrees from west\n      const eastVariance = covariance[0];\n      const northVariance = covariance[4];\n      if (!isFinite(eastVariance) || !isFinite(northVariance)) {\n        return undefined;\n      }\n      return { radii: [Math.sqrt(eastVariance), Math.sqrt(northVariance)], tilt: 0 };\n    }\n    case NavSatFixPositionCovarianceType.COVARIANCE_TYPE_APPROXIMATED:\n    case NavSatFixPositionCovarianceType.COVARIANCE_TYPE_KNOWN: {\n      // Discard altitude\n      const K = covariance;\n      const Klatlon = [\n        [K[0], K[1]],\n        [K[3], K[4]],\n      ];\n\n      // Compute the eigenvalues & vectors of the covariance matrix. They will\n      // be sorted in ascending order, so the largest value is eigenvalues[1]\n      // and the corresponding vector is in the rightmost column. Ellipse radii\n      // are based on the eigenvalues, and orientation on the vector.\n      try {\n        const eigen = eigs(Klatlon) as {\n          vectors: [NumericPair, NumericPair];\n          values: NumericPair;\n        };\n\n        // Eigenvectors are returned in columns\n        const eigenvector = [eigen.vectors[0][1], eigen.vectors[1][1]];\n        const eigenvalues = eigen.values;\n\n        if (\n          !isNumber(eigenvector[0]) ||\n          !isNumber(eigenvector[1]) ||\n          !isNumber(eigenvalues[0]) ||\n          !isNumber(eigenvalues[1])\n        ) {\n          return undefined;\n        }\n\n        // Ellipse `tilt` is defined as number of degrees from the negative x axis\n        const theta = (atan2(eigenvector[1], eigenvector[0]) * 180) / Math.PI;\n        const tilt = -1 * theta;\n\n        const primaryRadius = Math.sqrt(eigenvalues[1]);\n        const secondaryRadius = Math.sqrt(eigenvalues[0]);\n\n        if (!isFinite(tilt) || !isFinite(primaryRadius) || !isFinite(secondaryRadius)) {\n          return undefined;\n        }\n\n        return {\n          radii: [primaryRadius, secondaryRadius],\n          tilt,\n        };\n      } catch (err) {\n        return undefined;\n      }\n    }\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\nimport { Map, LatLngBounds, FeatureGroup, CircleMarker, PathOptions, Ellipse } from \"leaflet\";\nimport \"leaflet-ellipse\";\n\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\n\nimport { getAccuracy } from \"./getAccuracy\";\nimport { NavSatFixMsg } from \"./types\";\n\nexport const POINT_MARKER_RADIUS = 3;\n\ntype Args = {\n  map: Map;\n  bounds: LatLngBounds;\n  color: string;\n  hoverColor: string;\n  showAccuracy?: boolean;\n  navSatMessageEvents: readonly MessageEvent<NavSatFixMsg>[];\n  onHover?: (event: MessageEvent<NavSatFixMsg> | undefined) => void;\n  onClick?: (event: MessageEvent<NavSatFixMsg>) => void;\n};\n\nclass PointMarker extends CircleMarker {\n  public messageEvent?: MessageEvent<NavSatFixMsg>;\n}\n\n/**\n * Create a leaflet LayerGroup with filtered points\n */\nfunction FilteredPointLayer(args: Args): FeatureGroup {\n  const { navSatMessageEvents: points, bounds, map } = args;\n  const defaultStyle: PathOptions = {\n    stroke: false,\n    color: args.color,\n    fillOpacity: 1,\n  };\n\n  const markersLayer = new FeatureGroup();\n\n  const localBounds = bounds;\n\n  // track which pixels have been used\n  const sparse2d: (boolean | undefined)[][] = [];\n\n  for (const messageEvent of points) {\n    const lat = messageEvent.message.latitude;\n    const lon = messageEvent.message.longitude;\n\n    // if the point is outside the bounds, we don't include it\n    if (!localBounds.contains([lat, lon])) {\n      continue;\n    }\n\n    // get the integer pixel coordinate of the lat/lon and ignore pixels we already have\n    const pixelPoint = map.latLngToContainerPoint([lat, lon]);\n    const x = Math.trunc(pixelPoint.x);\n    const y = Math.trunc(pixelPoint.y);\n    if (sparse2d[x]?.[y] === true) {\n      continue;\n    }\n\n    (sparse2d[x] = sparse2d[x] ?? [])[y] = true;\n\n    const marker = new PointMarker([lat, lon], { ...defaultStyle, radius: POINT_MARKER_RADIUS });\n    marker.messageEvent = messageEvent;\n    marker.addTo(markersLayer);\n\n    if (args.showAccuracy === true) {\n      const accuracy = getAccuracy(messageEvent.message);\n      if (accuracy != undefined) {\n        const accuracyMarker = new Ellipse([lat, lon], accuracy.radii, accuracy.tilt, {\n          color: args.color,\n          fillOpacity: 0.2,\n          stroke: false,\n        });\n        accuracyMarker.addTo(markersLayer);\n      }\n    }\n  }\n\n  if (args.onHover) {\n    markersLayer.on(\"mouseover\", (event) => {\n      const marker = event.sourceTarget as PointMarker;\n      marker.setStyle({ color: args.hoverColor });\n      marker.bringToFront();\n      args.onHover?.(marker.messageEvent);\n    });\n    markersLayer.on(\"mouseout\", (event) => {\n      const marker = event.sourceTarget as PointMarker;\n      marker.setStyle(defaultStyle);\n      args.onHover?.(undefined);\n    });\n  }\n  if (args.onClick) {\n    markersLayer.on(\"click\", (event) => {\n      const marker = event.sourceTarget as PointMarker;\n      if (marker.messageEvent) {\n        args.onClick?.(marker.messageEvent);\n      }\n    });\n  }\n\n  return markersLayer;\n}\n\nexport default FilteredPointLayer;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { transform } from \"lodash\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { SettingsTreeFields, SettingsTreeNodes, Topic } from \"@foxglove/studio\";\n\n// Persisted panel state\nexport type Config = {\n  center?: { lat: number; lon: number };\n  customTileUrl: string;\n  disabledTopics: string[];\n  followTopic: string;\n  layer: string;\n  topicColors: Record<string, string>;\n  zoomLevel?: number;\n  maxNativeZoom?: number;\n};\n\nexport function validateCustomUrl(url: string): Error | undefined {\n  const placeholders = url.match(/\\{.+?\\}/g) ?? [];\n  const validPlaceholders = [\"{x}\", \"{y}\", \"{z}\"];\n  for (const placeholder of placeholders) {\n    if (!validPlaceholders.includes(placeholder)) {\n      return new Error(`Invalid placeholder ${placeholder}`);\n    }\n  }\n\n  return undefined;\n}\n\nfunction isGeoJSONSchema(schemaName: string) {\n  switch (schemaName) {\n    case \"foxglove_msgs/GeoJSON\":\n    case \"foxglove_msgs/msg/GeoJSON\":\n    case \"foxglove.GeoJSON\":\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function buildSettingsTree(\n  config: Config,\n  eligibleTopics: Omit<Topic, \"datatype\">[],\n): SettingsTreeNodes {\n  const topics: SettingsTreeNodes = transform(\n    eligibleTopics,\n    (result, topic) => {\n      const coloring = config.topicColors[topic.name];\n      result[topic.name] = {\n        label: topic.name,\n        fields: {\n          enabled: {\n            label: \"Enabled\",\n            input: \"boolean\",\n            value: !config.disabledTopics.includes(topic.name),\n          },\n          coloring: {\n            label: \"Coloring\",\n            input: \"select\",\n            value: coloring ? \"Custom\" : \"Automatic\",\n            options: [\n              { label: \"Automatic\", value: \"Automatic\" },\n              { label: \"Custom\", value: \"Custom\" },\n            ],\n          },\n          color: coloring\n            ? {\n                label: \"Color\",\n                input: \"rgb\",\n                value: coloring,\n              }\n            : undefined,\n        },\n      };\n    },\n    {} as SettingsTreeNodes,\n  );\n\n  const eligibleFollowTopicOptions = filterMap(eligibleTopics, (topic) =>\n    config.disabledTopics.includes(topic.name) || isGeoJSONSchema(topic.schemaName)\n      ? undefined\n      : { label: topic.name, value: topic.name },\n  );\n  const followTopicOptions = [{ label: \"Off\", value: \"\" }, ...eligibleFollowTopicOptions];\n  const generalSettings: SettingsTreeFields = {\n    layer: {\n      label: \"Tile layer\",\n      input: \"select\",\n      value: config.layer,\n      options: [\n        { label: \"Map\", value: \"map\" },\n        { label: \"Satellite\", value: \"satellite\" },\n        { label: \"Custom\", value: \"custom\" },\n      ],\n    },\n  };\n\n  // Only show the custom url input when the user selects the custom layer\n  if (config.layer === \"custom\") {\n    let error: string | undefined;\n    if (config.customTileUrl.length > 0) {\n      error = validateCustomUrl(config.customTileUrl)?.message;\n    }\n\n    generalSettings.customTileUrl = {\n      label: \"Custom map tile URL\",\n      input: \"string\",\n      value: config.customTileUrl,\n      error,\n    };\n\n    generalSettings.maxNativeZoom = {\n      label: \"Max tile level\",\n      input: \"select\",\n      value: config.maxNativeZoom,\n      options: [18, 19, 20, 21, 22, 23, 24].map((num) => {\n        return { label: String(num), value: num };\n      }),\n      help: \"Highest zoom supported by the custom map source. See https://leafletjs.com/examples/zoom-levels/ for more information.\",\n    };\n  }\n\n  generalSettings.followTopic = {\n    label: \"Follow topic\",\n    input: \"select\",\n    value: config.followTopic,\n    options: followTopicOptions,\n  };\n\n  const settings: SettingsTreeNodes = {\n    general: {\n      label: \"General\",\n      fields: generalSettings,\n    },\n    topics: {\n      label: \"Topics\",\n      children: topics,\n    },\n  };\n\n  return settings;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { Feature, FeatureCollection, GeoJsonObject } from \"geojson\";\nimport { PathOptions, geoJSON } from \"leaflet\";\n\nimport { MessageEvent } from \"@foxglove/studio\";\nimport { FoxgloveMessages } from \"@foxglove/studio-base/types/FoxgloveMessages\";\n\nimport { MapPanelMessage, NavSatFixMsg, NavSatFixStatus } from \"./types\";\n\nexport type GeoJsonMessage = MessageEvent<FoxgloveMessages[\"foxglove.GeoJSON\"]>;\n\n/**\n * @returns true if the message event status indicates there is a fix\n */\nexport function hasFix(ev: MessageEvent<NavSatFixMsg>): boolean {\n  switch (ev.message.status?.status) {\n    case NavSatFixStatus.STATUS_GBAS_FIX:\n    case NavSatFixStatus.STATUS_SBAS_FIX:\n    case NavSatFixStatus.STATUS_FIX:\n      return true;\n    case NavSatFixStatus.STATUS_NO_FIX:\n    case undefined:\n    default:\n      return false;\n  }\n}\n\nexport function isGeoJSONMessage(msgEvent: MessageEvent): msgEvent is GeoJsonMessage {\n  const datatype = msgEvent.schemaName;\n  return (\n    datatype === \"foxglove_msgs/GeoJSON\" ||\n    datatype === \"foxglove_msgs/msg/GeoJSON\" ||\n    datatype === \"foxglove.GeoJSON\"\n  );\n}\n\n/**\n * Verify that the message is either a GeoJSON message or a NavSatFix message with a\n * position fix and finite latitude and longitude so we can actually display it.\n */\nexport function isValidMapMessage(msgEvent: MessageEvent): msgEvent is MapPanelMessage {\n  if (isGeoJSONMessage(msgEvent)) {\n    return true;\n  }\n\n  const message = msgEvent.message as Partial<NavSatFixMsg>;\n  return (\n    message.latitude != undefined &&\n    isFinite(message.latitude) &&\n    message.longitude != undefined &&\n    isFinite(message.longitude) &&\n    message.status?.status !== NavSatFixStatus.STATUS_NO_FIX\n  );\n}\n\nexport function isSupportedSchema(schemaName: string): boolean {\n  switch (schemaName) {\n    case \"sensor_msgs/NavSatFix\":\n    case \"sensor_msgs/msg/NavSatFix\":\n    case \"ros.sensor_msgs.NavSatFix\":\n    case \"foxglove_msgs/LocationFix\":\n    case \"foxglove_msgs/msg/LocationFix\":\n    case \"foxglove.LocationFix\":\n    case \"foxglove_msgs/GeoJSON\":\n    case \"foxglove_msgs/msg/GeoJSON\":\n    case \"foxglove.GeoJSON\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Parse a geoJSON string into individual GeoJsonObjects, extracting the nonstandard\n * `style` property, if it exists.\n */\nexport function parseGeoJSON(json: string): Array<{ object: GeoJsonObject; style: PathOptions }> {\n  try {\n    const parsed = JSON.parse(json) as Parameters<typeof geoJSON>[0];\n    const geoJsons = parsed ? (Array.isArray(parsed) ? parsed : [parsed]) : [];\n    return geoJsons.flatMap((geoJson) => {\n      switch (geoJson.type) {\n        case \"Feature\": {\n          const style: PathOptions = (geoJson as Feature).properties?.style ?? {};\n          return { object: geoJson, style };\n        }\n        case \"FeatureCollection\":\n          return ((geoJson as Partial<FeatureCollection>).features ?? []).map((feature) => {\n            const style: PathOptions = feature.properties?.style ?? {};\n            return { object: feature, style };\n          });\n        default:\n          return { object: geoJson, style: {} };\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { Feature } from \"geojson\";\nimport { produce } from \"immer\";\nimport {\n  CircleMarker,\n  FeatureGroup,\n  geoJSON,\n  LatLngBounds,\n  Layer,\n  LayerGroup,\n  Map as LeafMap,\n  TileLayer,\n} from \"leaflet\";\nimport { difference, groupBy, isEqual, minBy, partition, union } from \"lodash\";\nimport memoizeWeak from \"memoize-weak\";\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { toSec } from \"@foxglove/rostime\";\nimport {\n  MessageEvent,\n  PanelExtensionContext,\n  SettingsTreeAction,\n  Subscription,\n  Topic,\n} from \"@foxglove/studio\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport FilteredPointLayer, {\n  POINT_MARKER_RADIUS,\n} from \"@foxglove/studio-base/panels/Map/FilteredPointLayer\";\nimport { darkColor, lightColor, lineColors } from \"@foxglove/studio-base/util/plotColors\";\n\nimport { buildSettingsTree, Config, validateCustomUrl } from \"./config\";\nimport {\n  GeoJsonMessage,\n  hasFix,\n  isGeoJSONMessage,\n  isSupportedSchema,\n  isValidMapMessage,\n  parseGeoJSON,\n} from \"./support\";\nimport { MapPanelMessage, Point } from \"./types\";\n\ntype MapPanelProps = {\n  context: PanelExtensionContext;\n};\n\nconst memoizedFilterMessages = memoizeWeak((msgs: readonly MessageEvent[]) =>\n  msgs.filter(isValidMapMessage),\n);\n\nfunction MapPanel(props: MapPanelProps): JSX.Element {\n  const { context } = props;\n\n  const mapContainerRef = useRef<HTMLDivElement>(ReactNull);\n\n  const [config, setConfig] = useState<Config>(() => {\n    const initialConfig = props.context.initialState as Partial<Config>;\n    return {\n      center: initialConfig.center,\n      customTileUrl: initialConfig.customTileUrl ?? \"\",\n      disabledTopics: initialConfig.disabledTopics ?? [],\n      followTopic: initialConfig.followTopic ?? \"\",\n      layer: initialConfig.layer ?? \"map\",\n      topicColors: initialConfig.topicColors ?? {},\n      zoomLevel: initialConfig.zoomLevel,\n      maxNativeZoom: initialConfig.maxNativeZoom ?? 18,\n    };\n  });\n\n  const [tileLayer] = useState(\n    new TileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      maxNativeZoom: 18,\n      maxZoom: 24,\n    }),\n  );\n\n  const [satelliteLayer] = useState(\n    new TileLayer(\n      \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n      {\n        attribution:\n          \"&copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\",\n        maxNativeZoom: 18,\n        maxZoom: 24,\n      },\n    ),\n  );\n\n  const [customLayer] = useState(\n    new TileLayer(\"https://example.com/{z}/{y}/{x}\", {\n      attribution: \"\",\n      maxNativeZoom: 18,\n      maxZoom: 24,\n    }),\n  );\n\n  // Panel state management to update our set of messages\n  // We use state to trigger a render on the panel\n  const [allMapMessages, setAllMapMessages] = useState<MapPanelMessage[]>([]);\n  const [currentMapMessages, setCurrentMapMessages] = useState<MapPanelMessage[]>([]);\n\n  const [allGeoMessages, allNavMessages] = useMemo(\n    () => partition(allMapMessages, isGeoJSONMessage),\n    [allMapMessages],\n  );\n\n  const [currentGeoMessages, currentNavMessages] = useMemo(\n    () => partition(currentMapMessages, isGeoJSONMessage),\n    [currentMapMessages],\n  );\n\n  // Panel state management to track the list of available topics\n  const [topics, setTopics] = useState<readonly Topic[]>([]);\n\n  // Panel state management to track the current preview time\n  const [previewTime, setPreviewTime] = useState<number | undefined>();\n\n  const [currentMap, setCurrentMap] = useState<LeafMap | undefined>(undefined);\n\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const {\n    width: panelWidth,\n    height: panelHeight,\n    ref: sizeRef,\n  } = useResizeDetector({\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  useEffect(() => {\n    // We depend on changes in the resized panel dimensions to tell the Leaflet map to\n    // recalculate its size. We do this inside a separate useEffect instead of directly\n    // in the map's change callbacks to avoid a react error from calling setState\n    // during a render.\n    void { panelWidth, panelHeight };\n    currentMap?.invalidateSize();\n  }, [panelWidth, panelHeight, currentMap]);\n\n  // panel extensions must notify when they've completed rendering\n  // onRender will setRenderDone to a done callback which we can invoke after we've rendered\n  const [renderDone, setRenderDone] = useState<() => void>(() => () => {});\n\n  const eligibleTopics = useMemo(() => {\n    return filterMap(topics, (topic) => {\n      if (isSupportedSchema(topic.schemaName)) {\n        return topic;\n      }\n\n      if (topic.convertibleTo) {\n        for (const schemaName of topic.convertibleTo) {\n          if (isSupportedSchema(schemaName)) {\n            return { name: topic.name, schemaName };\n          }\n        }\n      }\n      return undefined;\n    });\n  }, [topics]);\n\n  const settingsActionHandler = useCallback((action: SettingsTreeAction) => {\n    if (action.action !== \"update\") {\n      return;\n    }\n\n    const { path, input, value } = action.payload;\n\n    if (path[0] === \"topics\" && input === \"boolean\") {\n      const topic = path[1];\n      if (topic) {\n        setConfig(\n          produce((draft) => {\n            draft.disabledTopics =\n              value === true\n                ? difference(draft.disabledTopics, [topic])\n                : union(draft.disabledTopics, [topic]);\n          }),\n        );\n      }\n    }\n\n    if (path[0] === \"topics\" && path[2] === \"coloring\") {\n      const topic = path[1];\n      if (topic) {\n        setConfig(\n          produce((draft) => {\n            if (value === \"Custom\") {\n              draft.topicColors[topic] = lineColors[0]!;\n            } else {\n              delete draft.topicColors[topic];\n            }\n          }),\n        );\n      }\n    }\n\n    if (path[0] === \"topics\" && path[2] === \"color\" && input === \"rgb\" && value != undefined) {\n      const topic = path[1];\n      if (topic) {\n        setConfig(\n          produce((draft) => {\n            draft.topicColors[topic] = value;\n          }),\n        );\n      }\n    }\n\n    if (path[1] === \"layer\" && input === \"select\") {\n      setConfig((oldConfig) => {\n        return { ...oldConfig, layer: String(value) };\n      });\n    }\n\n    if (path[1] === \"customTileUrl\" && input === \"string\") {\n      setConfig((oldConfig) => {\n        return { ...oldConfig, customTileUrl: String(value) };\n      });\n    }\n\n    if (path[1] === \"maxNativeZoom\" && input === \"select\") {\n      setConfig((oldConfig) => {\n        const zoom = parseInt(String(value));\n        return { ...oldConfig, maxNativeZoom: isFinite(zoom) ? zoom : oldConfig.maxNativeZoom };\n      });\n    }\n\n    if (path[1] === \"followTopic\" && input === \"select\") {\n      setConfig((oldConfig) => {\n        return { ...oldConfig, followTopic: String(value) };\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (config.layer === \"map\") {\n      currentMap?.addLayer(tileLayer);\n      currentMap?.removeLayer(satelliteLayer);\n      currentMap?.removeLayer(customLayer);\n    } else if (config.layer === \"satellite\") {\n      currentMap?.addLayer(satelliteLayer);\n      currentMap?.removeLayer(tileLayer);\n      currentMap?.removeLayer(customLayer);\n    } else if (config.layer === \"custom\") {\n      currentMap?.addLayer(customLayer);\n      currentMap?.removeLayer(tileLayer);\n      currentMap?.removeLayer(satelliteLayer);\n    }\n  }, [config.layer, currentMap, customLayer, satelliteLayer, tileLayer]);\n\n  useEffect(() => {\n    if (config.layer === \"custom\") {\n      // validate URL to avoid leaflet map placeholder variable error\n      // Ignore urls with an error - the settings tree will inform the user that their valid is invalid\n      if (validateCustomUrl(config.customTileUrl)) {\n        return;\n      }\n\n      customLayer.setUrl(config.customTileUrl);\n    }\n  }, [config.layer, config.customTileUrl, customLayer]);\n\n  useEffect(() => {\n    if (config.layer === \"custom\") {\n      customLayer.options.maxNativeZoom = config.maxNativeZoom;\n    }\n  }, [config.layer, config.maxNativeZoom, customLayer]);\n\n  // Subscribe to eligible and enabled topics\n  useEffect(() => {\n    const subscriptions: Subscription[] = [];\n    for (const topic of eligibleTopics) {\n      if (config.disabledTopics.includes(topic.name)) {\n        continue;\n      }\n\n      subscriptions.push({\n        topic: topic.name,\n        convertTo: topic.schemaName,\n        preload: true,\n      });\n    }\n\n    context.subscribe(subscriptions);\n\n    const tree = buildSettingsTree(config, eligibleTopics);\n    context.updatePanelSettingsEditor({\n      actionHandler: settingsActionHandler,\n      nodes: tree,\n    });\n\n    return () => {\n      context.unsubscribeAll();\n    };\n  }, [config, context, eligibleTopics, settingsActionHandler]);\n\n  type TopicGroups = {\n    baseColor: string;\n    topicGroup: LayerGroup;\n    currentFrame: FeatureGroup;\n    allFrames: FeatureGroup;\n  };\n\n  // topic layers is a map of topic -> two feature groups\n  // A feature group for all messages markers, and a feature group for current frame markers\n  const topicLayers = useMemo(() => {\n    const topicLayerMap = new Map<string, TopicGroups>();\n    let i = 0;\n    for (const topic of eligibleTopics) {\n      const allFrames = new FeatureGroup();\n      const currentFrame = new FeatureGroup();\n      const topicGroup = new LayerGroup([allFrames, currentFrame]);\n      topicLayerMap.set(topic.name, {\n        topicGroup,\n        allFrames,\n        currentFrame,\n        baseColor: config.topicColors[topic.name] ?? lineColors[i]!,\n      });\n      i = (i + 1) % lineColors.length;\n    }\n    return topicLayerMap;\n  }, [config.topicColors, eligibleTopics]);\n\n  useLayoutEffect(() => {\n    if (!currentMap) {\n      return;\n    }\n\n    const topicLayerEntries = [...topicLayers.entries()];\n    for (const [topic, featureGroups] of topicLayerEntries) {\n      // if the topic does not appear in the disabled topics list, add to map so it displays\n      if (!config.disabledTopics.includes(topic)) {\n        currentMap.addLayer(featureGroups.topicGroup);\n      }\n    }\n\n    return () => {\n      for (const [_topic, featureGroups] of topicLayerEntries) {\n        currentMap.removeLayer(featureGroups.topicGroup);\n      }\n    };\n  }, [config.disabledTopics, currentMap, topicLayers]);\n\n  // During the initial mount we setup our context render handler\n  useLayoutEffect(() => {\n    if (!mapContainerRef.current) {\n      return;\n    }\n\n    const map = new LeafMap(mapContainerRef.current);\n\n    // Remove default prefix from the attribution control\n    map.attributionControl.setPrefix(false);\n\n    // the map must be initialized with some view before other features work\n    map.setView(\n      config.center ? [config.center.lat, config.center.lon] : [0, 0],\n      config.zoomLevel ?? 10,\n    );\n\n    setCurrentMap(map);\n\n    // tell the context we care about updates on these fields\n    context.watch(\"topics\");\n    context.watch(\"currentFrame\");\n    context.watch(\"allFrames\");\n    context.watch(\"previewTime\");\n\n    // The render event handler updates the state for our messages an triggers a component render\n    //\n    // The panel must call the _done_ function passed to render indicating the render completed.\n    // The panel will not receive render calls until it calls done.\n    context.onRender = (renderState, done) => {\n      setRenderDone(() => done);\n      setPreviewTime(renderState.previewTime);\n\n      if (renderState.topics) {\n        // Changing the topic list clears all map layers so we try to preserve reference identity\n        // if the contents of the topic list haven't changed.\n        setTopics((oldTopics) => {\n          return isEqual(oldTopics, renderState.topics) ? oldTopics : renderState.topics ?? [];\n        });\n      }\n\n      if (renderState.allFrames) {\n        // use memoization to avoid re-filtering allFrames when it has not changed\n        setAllMapMessages(memoizedFilterMessages(renderState.allFrames));\n      }\n\n      // Only update the current frame if we have new messages.\n      if (renderState.currentFrame && renderState.currentFrame.length > 0) {\n        setCurrentMapMessages(renderState.currentFrame.filter(isValidMapMessage));\n      }\n    };\n\n    return () => {\n      map.remove();\n      context.onRender = undefined;\n    };\n  }, [config.center, config.zoomLevel, context]);\n\n  const onHover = useCallback(\n    (messageEvent?: MessageEvent) => {\n      context.setPreviewTime(\n        messageEvent == undefined ? undefined : toSec(messageEvent.receiveTime),\n      );\n    },\n    [context],\n  );\n\n  const onClick = useCallback(\n    (messageEvent: MessageEvent) => {\n      context.seekPlayback?.(messageEvent.receiveTime);\n    },\n    [context],\n  );\n\n  /// --- the remaining code is unrelated to the extension api ----- ///\n\n  const [center, setCenter] = useState<Point | undefined>(config.center);\n  const [filterBounds, setFilterBounds] = useState<LatLngBounds | undefined>();\n\n  const addGeoFeatureEventHandlers = useCallback(\n    (feature: Feature, message: MessageEvent, layer: Layer) => {\n      const featureName = feature.properties?.name;\n      if (typeof featureName === \"string\" && featureName.length > 0) {\n        layer.bindTooltip(featureName);\n      }\n      layer.on(\"mouseover\", () => {\n        onHover(message);\n        layer.openTooltip();\n      });\n      layer.on(\"mouseout\", () => {\n        onHover(undefined);\n        layer.closeTooltip();\n      });\n      layer.on(\"click\", () => {\n        onClick(message);\n      });\n    },\n    [onClick, onHover],\n  );\n\n  const addGeoJsonMessage = useCallback(\n    (message: GeoJsonMessage, group: FeatureGroup) => {\n      const parsed = parseGeoJSON(message.message.geojson);\n      for (const { object, style } of parsed) {\n        geoJSON(object, {\n          onEachFeature: (feature: Feature, layer) =>\n            addGeoFeatureEventHandlers(feature, message, layer),\n          style: config.topicColors[message.topic]\n            ? { color: config.topicColors[message.topic], ...style }\n            : style,\n        }).addTo(group);\n      }\n    },\n    [addGeoFeatureEventHandlers, config.topicColors],\n  );\n\n  // calculate center point from blocks if we don't have a center point\n  useEffect(() => {\n    setCenter((old) => {\n      if (!config.followTopic) {\n        // When not following a topic center the map from the first message at startup\n        if (old) {\n          return old;\n        }\n      }\n\n      for (const messages of [currentNavMessages, allNavMessages]) {\n        for (const message of messages) {\n          // When re-centering to follow topic, only use the messages of the matching topic\n          if (config.followTopic && old) {\n            if (message.topic !== config.followTopic) {\n              continue;\n            }\n          }\n          return {\n            lat: message.message.latitude,\n            lon: message.message.longitude,\n          };\n        }\n      }\n\n      return old;\n    });\n  }, [allNavMessages, currentNavMessages, config]);\n\n  useEffect(() => {\n    if (!currentMap) {\n      return;\n    }\n\n    for (const [topic, topicLayer] of topicLayers) {\n      topicLayer.allFrames.clearLayers();\n\n      const navMessages = allNavMessages.filter((message) => message.topic === topic);\n      const pointLayer = FilteredPointLayer({\n        map: currentMap,\n        navSatMessageEvents: navMessages,\n        bounds: filterBounds ?? currentMap.getBounds(),\n        color: lightColor(topicLayer.baseColor),\n        hoverColor: darkColor(topicLayer.baseColor),\n        onHover,\n        onClick,\n      });\n\n      topicLayer.allFrames.addLayer(pointLayer);\n\n      // Push this layer to the back so it renders under the current messages.\n      pointLayer.bringToBack();\n\n      allGeoMessages\n        .filter((message) => message.topic === topic)\n        .forEach((message) => addGeoJsonMessage(message, topicLayer.allFrames));\n    }\n  }, [\n    addGeoJsonMessage,\n    allGeoMessages,\n    allNavMessages,\n    currentMap,\n    filterBounds,\n    onClick,\n    onHover,\n    topicLayers,\n  ]);\n\n  // create a filtered marker layer for the current nav messages\n  // this effect is added after the allNavMessages so the layer appears above\n  useEffect(() => {\n    if (!currentMap) {\n      return;\n    }\n\n    const navByTopic = groupBy(currentNavMessages, (msg) => msg.topic);\n    for (const [topic, messages] of Object.entries(navByTopic)) {\n      const topicLayer = topicLayers.get(topic);\n      if (!topicLayer) {\n        continue;\n      }\n\n      topicLayer.currentFrame.clearLayers();\n      const [fixEvents, noFixEvents] = partition(messages, hasFix);\n\n      const pointLayerNoFix = FilteredPointLayer({\n        map: currentMap,\n        navSatMessageEvents: noFixEvents,\n        bounds: filterBounds ?? currentMap.getBounds(),\n        color: darkColor(topicLayer.baseColor),\n        hoverColor: darkColor(topicLayer.baseColor),\n        showAccuracy: true,\n      });\n\n      const pointLayerFix = FilteredPointLayer({\n        map: currentMap,\n        navSatMessageEvents: fixEvents,\n        bounds: filterBounds ?? currentMap.getBounds(),\n        color: topicLayer.baseColor,\n        hoverColor: darkColor(topicLayer.baseColor),\n        showAccuracy: true,\n      });\n\n      topicLayer.currentFrame.addLayer(pointLayerNoFix);\n      topicLayer.currentFrame.addLayer(pointLayerFix);\n    }\n\n    const geoByTopic = groupBy(currentGeoMessages, (msg) => msg.topic);\n    for (const [topic, messages] of Object.entries(geoByTopic)) {\n      const topicLayer = topicLayers.get(topic);\n      if (topicLayer) {\n        topicLayer.currentFrame.clearLayers();\n        for (const message of messages) {\n          addGeoJsonMessage(message, topicLayer.currentFrame);\n        }\n      }\n    }\n  }, [\n    addGeoJsonMessage,\n    currentGeoMessages,\n    currentMap,\n    currentNavMessages,\n    filterBounds,\n    topicLayers,\n  ]);\n\n  // create a marker for the closest gps message to our current preview time\n  useEffect(() => {\n    if (!currentMap || previewTime == undefined) {\n      return;\n    }\n\n    // Find the point occuring most recently before or at preview time but not after\n    // preview time.\n    const prevNavMessages = allNavMessages.filter(\n      (message) => toSec(message.receiveTime) <= previewTime,\n    );\n    const event = minBy(prevNavMessages, (message) => previewTime - toSec(message.receiveTime));\n    if (!event) {\n      return;\n    }\n\n    const topicLayer = topicLayers.get(event.topic);\n\n    const marker = new CircleMarker([event.message.latitude, event.message.longitude], {\n      radius: POINT_MARKER_RADIUS,\n      color: topicLayer ? darkColor(topicLayer.baseColor) : undefined,\n      stroke: false,\n      fillOpacity: 1,\n      interactive: false,\n    });\n\n    marker.addTo(currentMap);\n    return () => {\n      marker.remove();\n    };\n  }, [allNavMessages, currentMap, previewTime, topicLayers]);\n\n  // persist panel config on zoom changes\n  useEffect(() => {\n    if (!currentMap) {\n      return;\n    }\n\n    const moveChange = () => {\n      context.saveState({\n        center: { lat: currentMap.getCenter().lat, lon: currentMap.getCenter().lng },\n      });\n    };\n\n    const zoomChange = () => {\n      context.saveState({ zoomLevel: currentMap.getZoom() });\n    };\n\n    currentMap.on(\"move\", moveChange);\n    currentMap.on(\"zoom\", zoomChange);\n    return () => {\n      currentMap.off(\"move\", moveChange);\n      currentMap.off(\"zoom\", zoomChange);\n    };\n  }, [context, currentMap]);\n\n  useEffect(() => {\n    context.saveState(config);\n  }, [context, config]);\n\n  // we don't want to invoke filtering on every user map move so we rate limit to 100ms\n  const moveHandler = useDebouncedCallback(\n    (map: LeafMap) => {\n      setFilterBounds(map.getBounds());\n    },\n    100,\n    // maxWait equal to debounce timeout makes the debounce act like a throttle\n    // Without a maxWait - invocations of the debounced invalidate reset the countdown\n    // resulting in no invalidation when scales are constantly changing (playback)\n    { leading: false, maxWait: 100 },\n  );\n\n  // setup handler for map move events to re-filter points\n  // this also handles zoom changes\n  useEffect(() => {\n    if (!currentMap) {\n      return;\n    }\n\n    const handler = () => moveHandler(currentMap);\n    currentMap.on(\"move\", handler);\n    return () => {\n      currentMap.off(\"move\", handler);\n    };\n  }, [currentMap, moveHandler]);\n\n  // Update the map view to focus on the centerpoint when it changes\n  // Zoom is reset only once\n  const didResetZoomRef = useRef(false);\n  useEffect(() => {\n    if (!center) {\n      return;\n    }\n\n    // If center updates when following a topic we don't want to keep resetting the zoom.\n    const zoom = didResetZoomRef.current ? currentMap?.getZoom() : config.zoomLevel ?? 10;\n    currentMap?.setView([center.lat, center.lon], zoom);\n    didResetZoomRef.current = true;\n  }, [center, config.zoomLevel, currentMap]);\n\n  // Indicate render is complete - the effect runs after the dom is updated\n  useEffect(() => {\n    renderDone();\n  }, [renderDone]);\n\n  return (\n    <Stack ref={sizeRef} fullHeight fullWidth position=\"relative\">\n      {!center && (\n        <Stack\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          position=\"absolute\"\n          style={{ top: 0, right: 0, bottom: 0, left: 0 }}\n        >\n          Waiting for first GPS point...\n        </Stack>\n      )}\n      <Stack\n        position=\"absolute\"\n        ref={mapContainerRef}\n        style={{\n          inset: 0,\n          cursor: \"auto\",\n          visibility: center ? \"visible\" : \"hidden\",\n        }}\n      />\n    </Stack>\n  );\n}\n\nexport default MapPanel;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport L from \"leaflet\";\nimport LeafletRetinaIconUrl from \"leaflet/dist/images/marker-icon-2x.png\";\nimport LeafletIconUrl from \"leaflet/dist/images/marker-icon.png\";\nimport LeafletShadowIconUrl from \"leaflet/dist/images/marker-shadow.png\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { useCrash } from \"@foxglove/hooks\";\nimport { PanelExtensionContext } from \"@foxglove/studio\";\nimport { CaptureErrorBoundary } from \"@foxglove/studio-base/components/CaptureErrorBoundary\";\n\nimport MapPanel from \"./MapPanel\";\n\nimport \"leaflet/dist/leaflet.css\";\n\n// Webpack and leaflet don't work well out of the box without manually\n// overriding the default icon and its asset paths.\nL.Marker.prototype.options.icon = L.icon({\n  iconUrl: LeafletIconUrl,\n  iconRetinaUrl: LeafletRetinaIconUrl,\n  shadowUrl: LeafletShadowIconUrl,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  tooltipAnchor: [16, -28],\n  shadowSize: [41, 41],\n});\n\nexport function initPanel(\n  crash: ReturnType<typeof useCrash>,\n  context: PanelExtensionContext,\n): () => void {\n  ReactDOM.render(\n    <StrictMode>\n      <CaptureErrorBoundary onError={crash}>\n        <MapPanel context={context} />\n      </CaptureErrorBoundary>\n    </StrictMode>,\n    context.panelElement,\n  );\n  return () => {\n    ReactDOM.unmountComponentAtNode(context.panelElement);\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { useMemo } from \"react\";\n\nimport { useCrash } from \"@foxglove/hooks\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport { PanelExtensionAdapter } from \"@foxglove/studio-base/components/PanelExtensionAdapter\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { initPanel } from \"./initPanel\";\n\ntype Props = {\n  config: unknown;\n  saveConfig: SaveConfig<unknown>;\n};\n\nfunction MapPanelAdapter(props: Props) {\n  const crash = useCrash();\n  const boundInitPanel = useMemo(() => initPanel.bind(undefined, crash), [crash]);\n\n  return (\n    <PanelExtensionAdapter\n      config={props.config}\n      saveConfig={props.saveConfig}\n      initPanel={boundInitPanel}\n      highestSupportedConfigVersion={1}\n    />\n  );\n}\n\nMapPanelAdapter.panelType = \"map\";\nMapPanelAdapter.defaultConfig = {};\n\nexport default Panel(MapPanelAdapter);\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { memoize, range, uniq } from \"lodash\";\nimport tinycolor from \"tinycolor2\";\n\nimport { toolsColorScheme } from \"@foxglove/studio-base/util/toolsColorScheme\";\n\n// Inspired by the \"light\" scheme from https://personal.sron.nl/~pault/#sec:qualitative\n// but using our standard tools colors.\nexport const lineColors = [\n  toolsColorScheme.blue.medium,\n  toolsColorScheme.orange.medium,\n  toolsColorScheme.yellow.medium,\n  toolsColorScheme.green.medium,\n  toolsColorScheme.cyan.medium,\n  toolsColorScheme.purple.medium,\n  toolsColorScheme.paleGreen.medium,\n];\n\nconst colorExpansion = lineColors.map((color) => [\n  color,\n  ...tinycolor(color)\n    .tetrad()\n    .map((acolor) => acolor.toHexString()),\n]);\n\nexport const expandedLineColors = uniq(\n  range(0, colorExpansion[0]!.length)\n    .map((i) => colorExpansion.map((colors) => colors[i]!))\n    .flat(),\n);\n\nexport const lightColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).brighten(15).toString(),\n);\n\nexport const darkColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).darken(30).toString(),\n);\n\nexport function getLineColor(color: string | undefined, index: number): string {\n  return color ?? lineColors[index % lineColors.length]!;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport tinycolor from \"tinycolor2\";\n\nexport const toolsColorScheme = {\n  base: {\n    dark: \"#1F1E27\",\n    medium: \"#8B8B8D\",\n    light: \"#F7F7F3\",\n  },\n  red: {\n    dark: \"#F24366\",\n    medium: \"#ff7c96\",\n    light: \"#FFAABB\",\n  },\n  blue: {\n    dark: \"#1b83ec\",\n    medium: \"#4e98e2\",\n    light: \"#77AADD\",\n  },\n  paleGreen: {\n    dark: \"#B4CC00\",\n    medium: \"#cad660\",\n    light: \"#CDD67E\",\n  },\n  orange: {\n    dark: \"#ea531f\",\n    medium: \"#f5774d\",\n    light: \"#faa487\",\n  },\n  cyan: {\n    dark: \"#22b5ff\",\n    medium: \"#61cbff\",\n    light: \"#99DDFF\",\n  },\n  green: {\n    dark: \"#05d27d\",\n    medium: \"#5cd6a9\",\n    light: \"#8de0c9\",\n  },\n  purple: {\n    dark: \"#6E51EE\",\n    medium: \"#a395e2\",\n    light: \"#c7c0e7\",\n  },\n  yellow: {\n    dark: \"#EDCC28\",\n    medium: \"#f7df71\",\n    light: \"#f1e4aa\",\n  },\n};\n\nexport const grey = tinycolor(`hsv(0, 0%, 75%)`).toHexString();\n"],"names":["CaptureErrorBoundary","error","NavSatFixPositionCovarianceType","NavSatFixStatus","NavSatFixService","getAccuracy","msg","covariance","eastVariance","northVariance","K","Klatlon","eigen","eigenvector","eigenvalues","is","tilt","primaryRadius","secondaryRadius","POINT_MARKER_RADIUS","PointMarker","FilteredPointLayer","args","points","bounds","map","defaultStyle","markersLayer","localBounds","sparse2d","messageEvent","lat","lon","pixelPoint","x","y","marker","accuracy","event","validateCustomUrl","url","placeholders","validPlaceholders","placeholder","isGeoJSONSchema","schemaName","buildSettingsTree","config","eligibleTopics","topics","result","topic","coloring","eligibleFollowTopicOptions","filterMap","followTopicOptions","generalSettings","num","hasFix","ev","isGeoJSONMessage","msgEvent","datatype","isValidMapMessage","message","isSupportedSchema","parseGeoJSON","json","parsed","geoJson","style","feature","memoizedFilterMessages","msgs","MapPanel","props","context","mapContainerRef","setConfig","initialConfig","tileLayer","satelliteLayer","customLayer","allMapMessages","setAllMapMessages","currentMapMessages","setCurrentMapMessages","allGeoMessages","allNavMessages","currentGeoMessages","currentNavMessages","setTopics","previewTime","setPreviewTime","currentMap","setCurrentMap","panelWidth","panelHeight","sizeRef","renderDone","setRenderDone","settingsActionHandler","action","path","input","value","draft","oldConfig","zoom","subscriptions","tree","topicLayers","topicLayerMap","i","allFrames","currentFrame","topicGroup","topicLayerEntries","featureGroups","_topic","renderState","done","oldTopics","onHover","onClick","center","setCenter","filterBounds","setFilterBounds","addGeoFeatureEventHandlers","layer","featureName","addGeoJsonMessage","group","object","old","messages","topicLayer","navMessages","pointLayer","navByTopic","fixEvents","noFixEvents","pointLayerNoFix","pointLayerFix","geoByTopic","prevNavMessages","moveChange","zoomChange","moveHandler","handler","didResetZoomRef","Stack","initPanel","crash","MapPanelAdapter","boundInitPanel","PanelExtensionAdapter","Panel","lineColors","colorExpansion","color","acolor","expandedLineColors","colors","lightColor","darkColor","getLineColor","index","toolsColorScheme","grey"],"sourceRoot":""}