{"version":3,"file":"studio-531.js","mappings":"2VASA,MAAMA,EAAM,KAAO,UAAU,CAAU,EAKxB,SAASC,EACtBC,EACAC,EAAe,CAEf,KAAM,CAAE,gBAAAC,CAAgB,KAAI,MAAY,EACxC,SAAO,eACL,SAAUC,IAAe,CACvB,GAAI,CACF,OAAO,MAAMH,EAAS,GAAGG,CAAI,C,OACtBC,EAAP,CACAN,EAAI,MAAMM,CAAK,EACfF,EAAiBE,EAAgB,SAAS,EAAG,CAAE,QAAS,OAAQ,CAAC,C,CAErE,EAEA,CAACF,EAAiB,GAAGD,CAAI,CAAC,CAE9B,C,qCCDe,SAASI,EAAa,CACnC,MAAAC,EACA,WAAAC,EACA,UAAAC,EACA,KAAAC,CAAI,EACE,CACN,KAAM,CAACC,CAAE,KAAI,YAAS,OAAM,KAAO,CAAC,EAC9BC,KAAa,MAAoBC,GACrCA,EAAQ,YAAY,aAAa,SAAS,IAAmB,SAAS,CAAC,EAEnEC,KAAU,MAAoBD,GAAYA,EAAQ,OAAO,EACzDE,KAAgB,MAAoBF,GAAYA,EAAQ,aAAa,EAC3E,sBAAU,IAAM,CACd,GAAID,GAAcL,GAASC,EACzB,OAAAO,EAAcJ,EAAI,CAAC,CAAE,MAAAJ,EAAO,WAAAC,EAAY,QAAS,CAAE,UAAAC,CAAU,CAAE,CAAC,CAAC,EAC1D,IAAMM,EAAcJ,EAAI,CAAC,CAAC,CAIrC,EAAG,CAACA,EAAIJ,EAAOC,EAAYC,EAAWC,EAAMK,EAAeH,CAAU,CAAC,KAE/D,eACJI,GAAQ,CACHJ,GACFE,EAAQ,CAAE,MAAAP,EAAO,IAAAS,CAAI,CAAC,CAE1B,EACA,CAACF,EAASP,EAAOK,CAAU,CAAC,CAEhC,C,qCC3CO,MAAMK,EAA+C,CAC1D,KAAM,GACN,KAAM,EACN,MAAO,EACP,MAAO,EACP,OAAQ,EACR,MAAO,EACP,OAAQ,EACR,MAAO,EACP,OAAQ,EACR,QAAS,EACT,QAAS,EACT,OAAQ,GACR,KAAM,CAAE,IAAK,EAAG,KAAM,CAAE,EACxB,SAAU,CAAE,IAAK,EAAG,KAAM,CAAE,C,EAGf,SAASC,EACtBT,EACAU,EAAgB,CAEhB,MAAMC,EAAUH,EAAoBE,CAAQ,EAC5C,GAAIC,GAAW,KACb,OAAOA,EAET,MAAMC,EAASZ,EAAU,IAAIU,CAAQ,GAAG,YACxC,GAAI,CAACE,EACH,OAEF,MAAMC,EAA+B,CAAC,EACtC,UAAWC,KAASF,EAAQ,CAC1B,GAAIE,EAAM,YAAc,GACtB,SAEF,MAAMC,EAASN,EAAmBT,EAAWc,EAAM,IAAI,EACnDA,EAAM,SAAW,GACfA,EAAM,aAAe,KACvBD,EAAIC,EAAM,IAAI,EAAI,IAAI,MAAMA,EAAM,WAAW,EAAE,KAAKC,CAAM,EAE1DF,EAAIC,EAAM,IAAI,EAAI,CAACC,CAAM,EAG3BF,EAAIC,EAAM,IAAI,EAAIC,C,CAGtB,OAAOF,CACT,C,eC1CO,MAAMG,EAA+B,CAC1C,WAAY,UACZ,cAAe,GACf,aAAc,GACd,MAAO,I,EAGT,SAASC,EAAcC,EAAuBR,EAAmB,CAC/D,GAAI,CAACA,EACH,MAAO,iCAET,GAAI,CAACQ,EAAY,SAASR,CAAQ,EAChC,MAAO,uBAGX,CAEA,SAASS,EAAWC,EAAoB,CACtC,GAAI,CAACA,EACH,MAAO,uBAGX,CAEO,MAAMC,EAAoB,CAC/BC,EACAJ,EACAK,KACuB,CACvB,QAAS,CACP,OAAQ,CACN,UAAW,CACT,MAAO,QACP,MAAO,eACP,MAAOJ,EAAWG,EAAO,SAAS,EAClC,MAAOA,EAAO,WAAa,GAC3B,MAAOC,EAAO,IAAKC,GAAMA,EAAE,IAAI,C,EAEjC,SAAU,CACR,MAAO,iBACP,MAAO,eACP,MAAOP,EAAcC,EAAaI,EAAO,QAAQ,EACjD,MAAOJ,EACP,MAAOI,EAAO,UAAY,E,EAE5B,aAAc,CACZ,MAAO,eACP,MAAO,UACP,MAAOA,EAAO,Y,IAIpB,OAAQ,CACN,MAAO,SACP,OAAQ,CACN,WAAY,CAAE,MAAO,QAAS,MAAO,SAAU,MAAOA,EAAO,UAAW,EACxE,cAAe,CAAE,MAAO,UAAW,MAAO,SAAU,MAAOA,EAAO,aAAc,EAChF,YAAa,CAAE,MAAO,QAAS,MAAO,MAAO,MAAOA,EAAO,WAAY,C,KAKvEG,EAAmB,CACvBzB,EACAU,IACuB,CACvB,GAAIA,GAAY,KACd,OAEF,MAAMgB,EAAgBjB,EAAmBT,EAAWU,CAAQ,EAC5D,OAAOgB,GAAiB,KAAY,KAAK,UAAUA,EAAe,OAAW,CAAC,EAAI,IACpF,EAEO,SAASC,EACdL,EACAM,EACAL,EACAvB,EAAkC,CAElC,MAAM6B,KAA0B,MAA2B,EACrD,CAAC,CAAEC,CAAoB,KAAI,MAAqB,EAChDZ,KAAc,WAAQ,IAAM,MAAM,KAAKlB,EAAU,KAAK,CAAC,EAAE,KAAK,EAAG,CAACA,CAAS,CAAC,EAE5E+B,KAAgB,eACnBC,GAA+B,CAC9B,GAAIA,EAAO,SAAW,SACpB,OAEF,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,MAAAC,CAAM,EAAIH,EAAO,QAEtCJ,KACE,MAAwBQ,GAAU,CAChC,GAAID,IAAU,gBACZ,MAAI,WAAQF,EAAM,CAAC,UAAW,WAAW,CAAC,EAAG,CAC3C,MAAMI,EAAkBd,EAAO,KAAMC,IAAMA,GAAE,OAASU,CAAK,GAAG,WACxDR,EAAgBD,EAAiBzB,EAAWqC,CAAe,EACjEP,EAAqBI,EAAQ,WAAWA,IAAU,SAAS,EAE3DE,EAAM,UAAYF,EAEdG,IACFD,EAAM,SAAWC,GAEfX,IACFU,EAAM,MAAQV,E,YAEP,WAAQO,EAAM,CAAC,UAAW,UAAU,CAAC,EAAG,CACjD,MAAMP,EAAgBD,EAAiBzB,EAAWkC,CAAK,EAEvDE,EAAM,SAAWF,EAEbR,IACFU,EAAM,MAAQV,E,SAIlB,OAAIU,EAAOH,EAAK,MAAM,CAAC,EAAGC,CAAK,CAEnC,CAAC,CAAC,CAEN,EACA,CAAClC,EAAW4B,EAAYE,EAAsBP,CAAM,CAAC,KAGvD,aAAU,IAAM,CACdM,EAAwB,CACtB,cAAAE,EACA,MAAOV,EAAkBC,EAAQJ,EAAaK,CAAM,C,CACrD,CACH,EAAG,CAACQ,EAAeT,EAAQJ,EAAaK,EAAQM,CAAuB,CAAC,CAC1E,C,cClHA,MAAMS,KAAY,MAAU,EAA6B,CAACC,EAAO,CAAE,YAAAC,CAAY,IAAM,CACnF,MAAMC,EAAuBD,EACzBD,EAAM,QAAQ,aAAa,CACzB,MAAO,CAAE,KAAMC,CAAY,C,CAC5B,EACD,OAEJ,MAAO,CACL,OAAQ,CACN,gBAAiBC,GAAsB,KACvC,MAAOA,GAAsB,aAE7B,UAAW,CACT,gBAAiBA,GAAsB,I,GAG3C,SAAU,CACR,OAAQ,OAER,CAAC,IAAIC,EAAA,EAAiB,MAAM,EAAG,CAC7B,MAAO,OACP,OAAQ,OACR,UAAW,OACX,gBAAiBH,EAAM,QAAQ,WAAW,MAC1C,SAAU,SACV,QAASA,EAAM,QAAQ,EAAG,EAAG,EAE7B,CAAC,IAAIG,EAAA,EAAiB,OAAO,EAAG,CAC9B,OAAQ,kBACR,WAAY,IACZ,WAAY,IAAM,UAClB,SAAU,kBACV,OAAQ,M,IAKlB,CAAC,EAED,SAASC,EAAWT,EAAa,CAC/B,IAAIU,EACAhD,EACJ,GAAI,CACF,MAAMiD,EAAqB,KAAK,MAAMX,CAAK,EACvC,MAAM,QAAQW,CAAS,EACzBjD,EAAQ,kDACCiD,GAAa,KACtBjD,EAAQ,8CACC,OAAOiD,GAAc,SAC9BjD,EAAQ,gDAA2C,OAAOiD,UAE1DD,EAAeC,C,OAEVC,EAAP,CACAlD,EAAQsC,EAAM,SAAW,EAAIY,EAAE,QAAU,qC,CAE3C,MAAO,CAAE,MAAAlD,EAAO,aAAAgD,CAAa,CAC/B,CAEA,SAASG,GAAQC,EAAc,CAC7B,KAAM,CAAE,WAAApB,EAAY,OAAAN,CAAO,EAAI0B,EACzB,CAAE,OAAAzB,EAAQ,UAAAvB,EAAW,aAAAiD,CAAa,KAAI,MAAkB,EACxD,CAAE,QAAAC,CAAQ,EAAIZ,EAAU,CAAE,YAAahB,EAAO,WAAY,CAAC,EAC3D,CAAC6B,CAAkB,KAAI,MAAY7B,EAAO,WAAa,GAAI,GAAG,EAE9DjB,EAAUR,EAAa,CAC3B,KAAM,UACN,MAAOsD,EACP,WAAY7B,EAAO,SACnB,UAAAtB,C,CACD,EAEK,CAAE,MAAAJ,EAAO,aAAAgD,CAAa,KAAI,WAAQ,IAAMD,EAAWrB,EAAO,OAAS,EAAE,EAAG,CAACA,EAAO,KAAK,CAAC,EAE5FK,EAAwBL,EAAQM,EAAYL,EAAQvB,CAAS,EAE7D,MAAMoD,EAAmB7D,EAAqB,IAAM,CAClD,GAAI+B,EAAO,WAAa,MAAasB,GAAgB,KACnDvC,EAAQuC,CAAuC,MAE/C,OAAM,IAAI,MAAM,0CAA0C,CAE9D,EAAG,CAACtB,EAAO,UAAWsB,EAAcvC,CAAO,CAAC,EAEtCF,EAAa,QACjB8C,EAAa,SAAS,IAAmB,SAAS,GAChD3B,EAAO,OACPA,EAAO,WACPA,EAAO,UACPsB,GAAgB,IAAS,EAGvBS,KAAgB,WAAQ,IAAM,CAClC,GAAI,CAACJ,EAAa,SAAS,IAAmB,SAAS,EACrD,MAAO,oDAET,GAAI,CAAC3B,EAAO,WAAa,CAACA,EAAO,SAC/B,MAAO,4DAGX,EAAG,CAAC2B,EAAc3B,EAAO,SAAUA,EAAO,SAAS,CAAC,EAEpD,SACE,QAACgC,EAAA,EAAK,CAAC,WAAU,gBACf,OAACC,EAAA,EAAY,OACb,QAACD,EAAA,EAAK,CAAC,KAAK,OAAO,IAAK,EAAG,QAAS,IAAK,SAAS,WAAU,UACzDhC,EAAO,iBACN,OAACgC,EAAA,EAAK,CAAC,SAAS,IAAG,YACjB,OAACE,EAAA,EAAS,CACR,QAAQ,WACR,UAAWN,EAAQ,SACnB,UAAS,GACT,KAAK,QACL,YAAY,gCACZ,MAAO5B,EAAO,MACd,SAAWmC,GAAU7B,EAAW,CAAE,MAAO6B,EAAM,OAAO,KAAM,CAAC,EAC7D,MAAO7D,GAAS,IAAS,EACzB,MAGN,QAAC0D,EAAA,EAAK,CACJ,UAAWhC,EAAO,aAAe,MAAQ,iBACzC,eAAgBA,EAAO,aAAe,WAAa,SACnD,WAAW,SACX,SAAS,SACT,SAAU,EACV,IAAK,IAAG,WAEN1B,GAASyD,OACT,OAACK,EAAA,EAAU,CAAC,QAAQ,UAAU,OAAM,GAAC,MAAO9D,EAAQ,QAAU,OAAS,SACpEA,GAASyD,CAAa,MAG3B,OAACM,EAAA,EAAO,CACN,UAAWrC,EAAO,aAAe,OAAS,OAC1C,MAAOA,EAAO,cAAa,YAE3B,2BACE,OAACsC,EAAA,EAAM,CACL,UAAWV,EAAQ,OACnB,QAAQ,YACR,SAAU,CAAC/C,EACX,QAASiD,EAAgB,SAExB9B,EAAO,UAAU,EACX,EACJ,EACC,GACJ,GACF,GAGd,CAEA,YAAeuC,EAAA,GACb,OAAO,OAAOC,EAAM,KAAKf,EAAO,EAAG,CACjC,UAAW,UACX,cAAa,C,CACd,CAAC,C","sources":["webpack:///../../packages/studio-base/src/hooks/useCallbackWithToast.ts","webpack:///../../packages/studio-base/src/hooks/usePublisher.tsx","webpack:///../../packages/studio-base/src/panels/Publish/buildSampleMessage.ts","webpack:///../../packages/studio-base/src/panels/Publish/settings.ts","webpack:///../../packages/studio-base/src/panels/Publish/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\n\nimport Logger from \"@foxglove/log\";\n\nconst log = Logger.getLogger(__filename);\n\n/**\n * A version of React.useCallback() displaying any errors thrown from the function as toast notifications.\n */\nexport default function useCallbackWithToast<Args extends unknown[]>(\n  callback: (...args: Args) => Promise<void> | void,\n  deps: unknown[],\n): (...args: Args) => Promise<void> {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(\n    async (...args: Args) => {\n      try {\n        return await callback(...args);\n      } catch (error) {\n        log.error(error);\n        enqueueSnackbar((error as Error).toString(), { variant: \"error\" });\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [enqueueSnackbar, ...deps],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Immutable } from \"@foxglove/studio\";\nimport { useMessagePipeline } from \"@foxglove/studio-base/components/MessagePipeline\";\nimport { PlayerCapabilities } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\n\ntype Props = Immutable<{\n  topic: string;\n  schemaName?: string;\n  datatypes: RosDatatypes;\n  name: string;\n}>;\n\n// Registers a publisher with the player and returns a publish() function to publish data. This uses\n// no-op functions if the player does not have the `advertise` capability\nexport default function usePublisher({\n  topic,\n  schemaName,\n  datatypes,\n  name,\n}: Props): (msg: Record<string, unknown>) => void {\n  const [id] = useState(() => uuidv4());\n  const canPublish = useMessagePipeline((context) =>\n    context.playerState.capabilities.includes(PlayerCapabilities.advertise),\n  );\n  const publish = useMessagePipeline((context) => context.publish);\n  const setPublishers = useMessagePipeline((context) => context.setPublishers);\n  useEffect(() => {\n    if (canPublish && topic && schemaName) {\n      setPublishers(id, [{ topic, schemaName, options: { datatypes } }]);\n      return () => setPublishers(id, []);\n    } else {\n      return undefined;\n    }\n  }, [id, topic, schemaName, datatypes, name, setPublishers, canPublish]);\n\n  return useCallback(\n    (msg) => {\n      if (canPublish) {\n        publish({ topic, msg });\n      }\n    },\n    [publish, topic, canPublish],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Immutable } from \"@foxglove/studio\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\n\nexport const builtinSampleValues: Record<string, unknown> = {\n  bool: false,\n  int8: 0,\n  uint8: 0,\n  int16: 0,\n  uint16: 0,\n  int32: 0,\n  uint32: 0,\n  int64: 0,\n  uint64: 0,\n  float32: 0,\n  float64: 0,\n  string: \"\",\n  time: { sec: 0, nsec: 0 },\n  duration: { sec: 0, nsec: 0 },\n};\n\nexport default function buildSampleMessage(\n  datatypes: Immutable<RosDatatypes>,\n  datatype: string,\n): unknown | undefined {\n  const builtin = builtinSampleValues[datatype];\n  if (builtin != undefined) {\n    return builtin;\n  }\n  const fields = datatypes.get(datatype)?.definitions;\n  if (!fields) {\n    return undefined;\n  }\n  const obj: Record<string, unknown> = {};\n  for (const field of fields) {\n    if (field.isConstant ?? false) {\n      continue;\n    }\n    const sample = buildSampleMessage(datatypes, field.type);\n    if (field.isArray ?? false) {\n      if (field.arrayLength != undefined) {\n        obj[field.name] = new Array(field.arrayLength).fill(sample);\n      } else {\n        obj[field.name] = [sample];\n      }\n    } else {\n      obj[field.name] = sample;\n    }\n  }\n  return obj;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { produce } from \"immer\";\nimport { isEqual, set } from \"lodash\";\nimport { useCallback, useEffect, useMemo } from \"react\";\n\nimport { Immutable, SettingsTreeAction, SettingsTreeNodes } from \"@foxglove/studio\";\nimport buildSampleMessage from \"@foxglove/studio-base/panels/Publish/buildSampleMessage\";\nimport { Topic } from \"@foxglove/studio-base/players/types\";\nimport {\n  useDefaultPanelTitle,\n  usePanelSettingsTreeUpdate,\n} from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { PublishConfig } from \"./types\";\n\nexport const defaultConfig: PublishConfig = {\n  buttonText: \"Publish\",\n  buttonTooltip: \"\",\n  advancedView: true,\n  value: \"{}\",\n};\n\nfunction datatypeError(schemaNames: string[], datatype?: string) {\n  if (!datatype) {\n    return \"Message schema cannot be empty\";\n  }\n  if (!schemaNames.includes(datatype)) {\n    return \"Schema name not found\";\n  }\n  return undefined;\n}\n\nfunction topicError(topicName?: string) {\n  if (!topicName) {\n    return \"Topic cannot be empty\";\n  }\n  return undefined;\n}\n\nexport const buildSettingsTree = (\n  config: PublishConfig,\n  schemaNames: string[],\n  topics: readonly Topic[],\n): SettingsTreeNodes => ({\n  general: {\n    fields: {\n      topicName: {\n        label: \"Topic\",\n        input: \"autocomplete\",\n        error: topicError(config.topicName),\n        value: config.topicName ?? \"\",\n        items: topics.map((t) => t.name),\n      },\n      datatype: {\n        label: \"Message schema\",\n        input: \"autocomplete\",\n        error: datatypeError(schemaNames, config.datatype),\n        items: schemaNames,\n        value: config.datatype ?? \"\",\n      },\n      advancedView: {\n        label: \"Editing mode\",\n        input: \"boolean\",\n        value: config.advancedView,\n      },\n    },\n  },\n  button: {\n    label: \"Button\",\n    fields: {\n      buttonText: { label: \"Title\", input: \"string\", value: config.buttonText },\n      buttonTooltip: { label: \"Tooltip\", input: \"string\", value: config.buttonTooltip },\n      buttonColor: { label: \"Color\", input: \"rgb\", value: config.buttonColor },\n    },\n  },\n});\n\nconst getSampleMessage = (\n  datatypes: Immutable<RosDatatypes>,\n  datatype?: string,\n): string | undefined => {\n  if (datatype == undefined) {\n    return undefined;\n  }\n  const sampleMessage = buildSampleMessage(datatypes, datatype);\n  return sampleMessage != undefined ? JSON.stringify(sampleMessage, undefined, 2) : \"{}\";\n};\n\nexport function usePublishPanelSettings(\n  config: PublishConfig,\n  saveConfig: SaveConfig<PublishConfig>,\n  topics: readonly Topic[],\n  datatypes: Immutable<RosDatatypes>,\n): void {\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n  const [, setDefaultPanelTitle] = useDefaultPanelTitle();\n  const schemaNames = useMemo(() => Array.from(datatypes.keys()).sort(), [datatypes]);\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action !== \"update\") {\n        return;\n      }\n      const { path, value, input } = action.payload;\n\n      saveConfig(\n        produce<PublishConfig>((draft) => {\n          if (input === \"autocomplete\") {\n            if (isEqual(path, [\"general\", \"topicName\"])) {\n              const topicSchemaName = topics.find((t) => t.name === value)?.schemaName;\n              const sampleMessage = getSampleMessage(datatypes, topicSchemaName);\n              setDefaultPanelTitle(value ? `Publish ${value}` : \"Publish\");\n\n              draft.topicName = value;\n\n              if (topicSchemaName) {\n                draft.datatype = topicSchemaName;\n              }\n              if (sampleMessage) {\n                draft.value = sampleMessage;\n              }\n            } else if (isEqual(path, [\"general\", \"datatype\"])) {\n              const sampleMessage = getSampleMessage(datatypes, value);\n\n              draft.datatype = value;\n\n              if (sampleMessage) {\n                draft.value = sampleMessage;\n              }\n            }\n          } else {\n            set(draft, path.slice(1), value);\n          }\n        }),\n      );\n    },\n    [datatypes, saveConfig, setDefaultPanelTitle, topics],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      nodes: buildSettingsTree(config, schemaNames, topics),\n    });\n  }, [actionHandler, config, schemaNames, topics, updatePanelSettingsTree]);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Button, inputBaseClasses, TextField, Tooltip, Typography } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\nimport { useDebounce } from \"use-debounce\";\n\nimport { useDataSourceInfo } from \"@foxglove/studio-base/PanelAPI\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport useCallbackWithToast from \"@foxglove/studio-base/hooks/useCallbackWithToast\";\nimport usePublisher from \"@foxglove/studio-base/hooks/usePublisher\";\nimport { PlayerCapabilities } from \"@foxglove/studio-base/players/types\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport { defaultConfig, usePublishPanelSettings } from \"./settings\";\nimport { PublishConfig } from \"./types\";\n\ntype Props = {\n  config: PublishConfig;\n  saveConfig: SaveConfig<PublishConfig>;\n};\n\nconst useStyles = makeStyles<{ buttonColor?: string }>()((theme, { buttonColor }) => {\n  const augmentedButtonColor = buttonColor\n    ? theme.palette.augmentColor({\n        color: { main: buttonColor },\n      })\n    : undefined;\n\n  return {\n    button: {\n      backgroundColor: augmentedButtonColor?.main,\n      color: augmentedButtonColor?.contrastText,\n\n      \"&:hover\": {\n        backgroundColor: augmentedButtonColor?.dark,\n      },\n    },\n    textarea: {\n      height: \"100%\",\n\n      [`.${inputBaseClasses.root}`]: {\n        width: \"100%\",\n        height: \"100%\",\n        textAlign: \"left\",\n        backgroundColor: theme.palette.background.paper,\n        overflow: \"hidden\",\n        padding: theme.spacing(1, 0.5),\n\n        [`.${inputBaseClasses.input}`]: {\n          height: \"100% !important\",\n          lineHeight: 1.4,\n          fontFamily: fonts.MONOSPACE,\n          overflow: \"auto !important\",\n          resize: \"none\",\n        },\n      },\n    },\n  };\n});\n\nfunction parseInput(value: string): { error?: string; parsedObject?: unknown } {\n  let parsedObject;\n  let error = undefined;\n  try {\n    const parsedAny: unknown = JSON.parse(value);\n    if (Array.isArray(parsedAny)) {\n      error = \"Message content must be an object, not an array\";\n    } else if (parsedAny == null /* eslint-disable-line no-restricted-syntax */) {\n      error = \"Message content must be an object, not null\";\n    } else if (typeof parsedAny !== \"object\") {\n      error = `Message content must be an object, not ‘${typeof parsedAny}’`;\n    } else {\n      parsedObject = parsedAny;\n    }\n  } catch (e) {\n    error = value.length !== 0 ? e.message : \"Enter valid message content as JSON\";\n  }\n  return { error, parsedObject };\n}\n\nfunction Publish(props: Props) {\n  const { saveConfig, config } = props;\n  const { topics, datatypes, capabilities } = useDataSourceInfo();\n  const { classes } = useStyles({ buttonColor: config.buttonColor });\n  const [debouncedTopicName] = useDebounce(config.topicName ?? \"\", 500);\n\n  const publish = usePublisher({\n    name: \"Publish\",\n    topic: debouncedTopicName,\n    schemaName: config.datatype,\n    datatypes,\n  });\n\n  const { error, parsedObject } = useMemo(() => parseInput(config.value ?? \"\"), [config.value]);\n\n  usePublishPanelSettings(config, saveConfig, topics, datatypes);\n\n  const onPublishClicked = useCallbackWithToast(() => {\n    if (config.topicName != undefined && parsedObject != undefined) {\n      publish(parsedObject as Record<string, unknown>);\n    } else {\n      throw new Error(`called _publish() when input was invalid`);\n    }\n  }, [config.topicName, parsedObject, publish]);\n\n  const canPublish = Boolean(\n    capabilities.includes(PlayerCapabilities.advertise) &&\n      config.value &&\n      config.topicName &&\n      config.datatype &&\n      parsedObject != undefined,\n  );\n\n  const statusMessage = useMemo(() => {\n    if (!capabilities.includes(PlayerCapabilities.advertise)) {\n      return \"Connect to a data source that supports publishing\";\n    }\n    if (!config.topicName || !config.datatype) {\n      return \"Configure a topic and message schema in the panel settings\";\n    }\n    return undefined;\n  }, [capabilities, config.datatype, config.topicName]);\n\n  return (\n    <Stack fullHeight>\n      <PanelToolbar />\n      <Stack flex=\"auto\" gap={1} padding={1.5} position=\"relative\">\n        {config.advancedView && (\n          <Stack flexGrow=\"1\">\n            <TextField\n              variant=\"outlined\"\n              className={classes.textarea}\n              multiline\n              size=\"small\"\n              placeholder=\"Enter message content as JSON\"\n              value={config.value}\n              onChange={(event) => saveConfig({ value: event.target.value })}\n              error={error != undefined}\n            />\n          </Stack>\n        )}\n        <Stack\n          direction={config.advancedView ? \"row\" : \"column-reverse\"}\n          justifyContent={config.advancedView ? \"flex-end\" : \"center\"}\n          alignItems=\"center\"\n          overflow=\"hidden\"\n          flexGrow={0}\n          gap={1.5}\n        >\n          {(error || statusMessage) && (\n            <Typography variant=\"caption\" noWrap color={error ? \"error\" : undefined}>\n              {error ?? statusMessage}\n            </Typography>\n          )}\n          <Tooltip\n            placement={config.advancedView ? \"left\" : undefined}\n            title={config.buttonTooltip}\n          >\n            <span>\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                disabled={!canPublish}\n                onClick={onPublishClicked}\n              >\n                {config.buttonText}\n              </Button>\n            </span>\n          </Tooltip>\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport default Panel(\n  Object.assign(React.memo(Publish), {\n    panelType: \"Publish\",\n    defaultConfig,\n  }),\n);\n"],"names":["log","useCallbackWithToast","callback","deps","enqueueSnackbar","args","error","usePublisher","topic","schemaName","datatypes","name","id","canPublish","context","publish","setPublishers","msg","builtinSampleValues","buildSampleMessage","datatype","builtin","fields","obj","field","sample","defaultConfig","datatypeError","schemaNames","topicError","topicName","buildSettingsTree","config","topics","t","getSampleMessage","sampleMessage","usePublishPanelSettings","saveConfig","updatePanelSettingsTree","setDefaultPanelTitle","actionHandler","action","path","value","input","draft","topicSchemaName","useStyles","theme","buttonColor","augmentedButtonColor","inputBaseClasses","parseInput","parsedObject","parsedAny","e","Publish","props","capabilities","classes","debouncedTopicName","onPublishClicked","statusMessage","Stack","PanelToolbar","TextField","event","Typography","Tooltip","Button","Panel","React"],"sourceRoot":""}