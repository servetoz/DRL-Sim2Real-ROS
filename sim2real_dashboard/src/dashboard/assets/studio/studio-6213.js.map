{"version":3,"file":"studio-6213.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/AutoSizingCanvas/index.tsx","webpack:///../../packages/studio-base/src/components/Sparkline.tsx","webpack:///../../packages/studio-base/src/panels/PlaybackPerformance/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useLayoutEffect, useState } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\ntype Draw = (context: CanvasRenderingContext2D, width: number, height: number) => void;\n\ntype AutoSizingCanvasProps = {\n  draw: Draw;\n  overrideDevicePixelRatioForTest?: number;\n};\n\nconst AutoSizingCanvas = ({\n  draw,\n  overrideDevicePixelRatioForTest,\n}: AutoSizingCanvasProps): JSX.Element => {\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const {\n    width,\n    height,\n    ref: canvasRef,\n  } = useResizeDetector<HTMLCanvasElement>({\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  const [pixelRatio, setPixelRatio] = useState(window.devicePixelRatio);\n  useLayoutEffect(() => {\n    const listener = () => setPixelRatio(window.devicePixelRatio);\n    const query = window.matchMedia(`(resolution: ${pixelRatio}dppx)`);\n    query.addEventListener(\"change\", listener, { once: true });\n    return () => {\n      query.removeEventListener(\"change\", listener);\n    };\n  }, [pixelRatio]);\n\n  const ratio = overrideDevicePixelRatioForTest ?? pixelRatio;\n\n  const actualWidth = ratio * (width ?? 0);\n  const actualHeight = ratio * (height ?? 0);\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || width == undefined || height == undefined) {\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return;\n    }\n    ctx.setTransform(ratio, 0, 0, ratio, 0, 0);\n    draw(ctx, width, height);\n  });\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={actualWidth}\n      height={actualHeight}\n      style={{ width: \"100%\", height: \"100%\" }}\n    />\n  );\n};\n\nexport default AutoSizingCanvas;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useCallback } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport AutoSizingCanvas from \"@foxglove/studio-base/components/AutoSizingCanvas\";\n\nexport type SparklinePoint = { value: number; timestamp: number };\n\ntype SparklineProps = {\n  points: SparklinePoint[];\n  width: number;\n  height: number;\n  timeRange: number;\n  maximum?: number;\n  nowStamp?: number; // Mostly for testing.\n};\n\nconst useStyles = makeStyles()((theme) => ({\n  root: {\n    flex: \"none\",\n    backgroundColor: theme.palette.grey[300],\n  },\n}));\n\nfunction draw(\n  points: SparklinePoint[],\n  maximum: number,\n  timeRange: number,\n  nowStamp: number,\n  context: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  color: string,\n) {\n  const maxValue = Math.max(maximum, ...points.map(({ value }) => value));\n  context.clearRect(0, 0, width, height);\n  context.beginPath();\n  context.strokeStyle = color;\n  let first = true;\n  for (const { value, timestamp } of points) {\n    const x = ((timeRange + timestamp - nowStamp) / timeRange) * width;\n    const y = (1 - value / maxValue) * height;\n    if (first) {\n      context.moveTo(x, y);\n      first = false;\n    } else {\n      context.lineTo(x, y);\n    }\n  }\n  context.stroke();\n}\n\nexport function Sparkline(props: SparklineProps): JSX.Element {\n  const { classes, theme } = useStyles();\n  const drawCallback = useCallback(\n    (context: CanvasRenderingContext2D, width: number, height: number) => {\n      draw(\n        props.points,\n        props.maximum ?? 0,\n        props.timeRange,\n        props.nowStamp ?? Date.now(),\n        context,\n        width,\n        height,\n        theme.palette.text.primary,\n      );\n    },\n    [props.maximum, props.nowStamp, props.points, props.timeRange, theme.palette],\n  );\n  return (\n    <div className={classes.root} style={{ height: props.height, width: props.width }}>\n      <AutoSizingCanvas draw={drawCallback} />\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Typography } from \"@mui/material\";\nimport { last, sumBy } from \"lodash\";\nimport { ReactElement } from \"react\";\n\nimport { subtract as subtractTimes, toSec } from \"@foxglove/rostime\";\nimport { Immutable } from \"@foxglove/studio\";\nimport { useMessagePipeline } from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport { Sparkline, SparklinePoint } from \"@foxglove/studio-base/components/Sparkline\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { PlayerStateActiveData } from \"@foxglove/studio-base/players/types\";\n\nconst TIME_RANGE = 5000;\n\ntype PlaybackPerformanceItemProps = {\n  points: SparklinePoint[];\n  maximum: number;\n  decimalPlaces: number;\n  label: React.ReactNode;\n};\n\nfunction PlaybackPerformanceItem(props: PlaybackPerformanceItemProps): ReactElement {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n      <Sparkline\n        points={props.points}\n        maximum={props.maximum}\n        width={100}\n        height={30}\n        timeRange={TIME_RANGE}\n      />\n      <Stack>\n        <Typography variant=\"body2\">\n          {(last(props.points) ?? { value: 0 }).value.toFixed(props.decimalPlaces)}\n          {props.label}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {(sumBy(props.points, \"value\") / props.points.length).toFixed(props.decimalPlaces)} avg\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport type UnconnectedPlaybackPerformanceProps = Immutable<{\n  timestamp: number;\n  activeData?: PlayerStateActiveData;\n}>;\n\n// Exported for stories\nexport function UnconnectedPlaybackPerformance({\n  timestamp,\n  activeData,\n}: UnconnectedPlaybackPerformanceProps): JSX.Element {\n  const playbackInfo =\n    React.useRef<Immutable<{ timestamp: number; activeData: PlayerStateActiveData } | undefined>>();\n  const lastPlaybackInfo = playbackInfo.current;\n  if (activeData && (!playbackInfo.current || playbackInfo.current.activeData !== activeData)) {\n    playbackInfo.current = { timestamp, activeData };\n  }\n\n  const perfPoints = React.useRef<{\n    speed: SparklinePoint[];\n    framerate: SparklinePoint[];\n    bagTimeMs: SparklinePoint[];\n    megabitsPerSecond: SparklinePoint[];\n  }>({\n    speed: [],\n    framerate: [],\n    bagTimeMs: [],\n    megabitsPerSecond: [],\n  });\n\n  if (\n    activeData &&\n    playbackInfo.current &&\n    lastPlaybackInfo &&\n    lastPlaybackInfo.activeData !== activeData\n  ) {\n    const renderTimeMs = timestamp - lastPlaybackInfo.timestamp;\n    if (\n      lastPlaybackInfo.activeData.isPlaying &&\n      activeData.isPlaying &&\n      lastPlaybackInfo.activeData.lastSeekTime === activeData.lastSeekTime &&\n      lastPlaybackInfo.activeData.currentTime !== activeData.currentTime\n    ) {\n      const elapsedPlayerTime =\n        toSec(subtractTimes(activeData.currentTime, lastPlaybackInfo.activeData.currentTime)) *\n        1000;\n      perfPoints.current.speed.push({ value: elapsedPlayerTime / renderTimeMs, timestamp });\n      perfPoints.current.framerate.push({ value: 1000 / renderTimeMs, timestamp });\n      perfPoints.current.bagTimeMs.push({ value: elapsedPlayerTime, timestamp });\n    }\n    const newBytesReceived =\n      activeData.totalBytesReceived - lastPlaybackInfo.activeData.totalBytesReceived;\n    const newMegabitsReceived = (8 * newBytesReceived) / 1e6;\n    const megabitsPerSecond = newMegabitsReceived / (renderTimeMs / 1000);\n    perfPoints.current.megabitsPerSecond.push({ value: megabitsPerSecond, timestamp });\n    for (const points of Object.values(perfPoints.current)) {\n      while (points[0] && points[0].timestamp < timestamp - TIME_RANGE) {\n        points.shift();\n      }\n    }\n  }\n\n  return (\n    <Stack flex=\"auto\">\n      <PanelToolbar />\n      <Stack flex=\"auto\" justifyContent=\"center\" gap={2} padding={1}>\n        <PlaybackPerformanceItem\n          points={perfPoints.current.speed}\n          maximum={1.6}\n          decimalPlaces={2}\n          label={<>&times; realtime</>}\n        />\n        <PlaybackPerformanceItem\n          points={perfPoints.current.framerate}\n          maximum={30}\n          decimalPlaces={1}\n          label=\"fps\"\n        />\n        <PlaybackPerformanceItem\n          points={perfPoints.current.bagTimeMs}\n          maximum={300}\n          decimalPlaces={0}\n          label=\"ms bag frame\"\n        />\n        <PlaybackPerformanceItem\n          points={perfPoints.current.megabitsPerSecond}\n          maximum={100}\n          decimalPlaces={1}\n          label=\"Mbps\"\n        />\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction PlaybackPerformance() {\n  const timestamp = Date.now();\n  const activeData = useMessagePipeline(\n    React.useCallback(({ playerState }) => playerState.activeData, []),\n  );\n  return <UnconnectedPlaybackPerformance timestamp={timestamp} activeData={activeData} />;\n}\n\nPlaybackPerformance.panelType = \"PlaybackPerformance\";\nPlaybackPerformance.defaultConfig = {};\n\nexport default Panel(PlaybackPerformance);\n"],"names":["draw","overrideDevicePixelRatioForTest","width","height","canvasRef","pixelRatio","setPixelRatio","listener","query","ratio","actualWidth","actualHeight","canvas","ctx","useStyles","theme","points","maximum","timeRange","nowStamp","context","color","maxValue","value","first","timestamp","x","y","Sparkline","props","classes","drawCallback","TIME_RANGE","PlaybackPerformanceItem","Stack","Typography","UnconnectedPlaybackPerformance","activeData","playbackInfo","React","lastPlaybackInfo","perfPoints","renderTimeMs","elapsedPlayerTime","megabitsPerSecond","PanelToolbar","PlaybackPerformance","playerState","Panel"],"sourceRoot":""}