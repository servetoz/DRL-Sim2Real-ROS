{"version":3,"file":"studio-3218.js","mappings":"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","sources":["webpack:///../../packages/studio-web/src/services/IdbLayoutStorage.ts","webpack:///../../packages/studio-web/src/services/LocalStorageAppConfiguration.ts","webpack:///../../packages/studio-web/src/Root.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport * as IDB from \"idb/with-async-ittr\";\n\nimport Log from \"@foxglove/log\";\nimport { Layout, LayoutID, ILayoutStorage, migrateLayout } from \"@foxglove/studio-base\";\n\nconst log = Log.getLogger(__filename);\n\nconst DATABASE_NAME = \"foxglove-layouts\";\nconst OBJECT_STORE_NAME = \"layouts\";\n\ninterface LayoutsDB extends IDB.DBSchema {\n  layouts: {\n    key: [namespace: string, id: LayoutID];\n    value: {\n      namespace: string;\n      layout: Layout;\n    };\n    indexes: {\n      namespace: string;\n    };\n  };\n}\n\n/**\n * Stores layouts in IndexedDB. All layouts are stored in one object store, with the primary key\n * being the tuple of [namespace, id].\n */\nexport class IdbLayoutStorage implements ILayoutStorage {\n  #db = IDB.openDB<LayoutsDB>(DATABASE_NAME, 1, {\n    upgrade(db) {\n      const store = db.createObjectStore(OBJECT_STORE_NAME, {\n        keyPath: [\"namespace\", \"layout.id\"],\n      });\n      store.createIndex(\"namespace\", \"namespace\");\n    },\n  });\n\n  public async list(namespace: string): Promise<readonly Layout[]> {\n    const results: Layout[] = [];\n    const records = await (\n      await this.#db\n    ).getAllFromIndex(OBJECT_STORE_NAME, \"namespace\", namespace);\n    for (const record of records) {\n      try {\n        results.push(migrateLayout(record.layout));\n      } catch (err) {\n        log.error(err);\n      }\n    }\n    return results;\n  }\n\n  public async get(namespace: string, id: LayoutID): Promise<Layout | undefined> {\n    const record = await (await this.#db).get(OBJECT_STORE_NAME, [namespace, id]);\n    return record == undefined ? undefined : migrateLayout(record.layout);\n  }\n\n  public async put(namespace: string, layout: Layout): Promise<Layout> {\n    await (await this.#db).put(OBJECT_STORE_NAME, { namespace, layout });\n    return layout;\n  }\n\n  public async delete(namespace: string, id: LayoutID): Promise<void> {\n    await (await this.#db).delete(OBJECT_STORE_NAME, [namespace, id]);\n  }\n\n  public async importLayouts({\n    fromNamespace,\n    toNamespace,\n  }: {\n    fromNamespace: string;\n    toNamespace: string;\n  }): Promise<void> {\n    const tx = (await this.#db).transaction(\"layouts\", \"readwrite\");\n    const store = tx.objectStore(\"layouts\");\n\n    try {\n      for await (const cursor of store.index(\"namespace\").iterate(fromNamespace)) {\n        await store.put({ namespace: toNamespace, layout: cursor.value.layout });\n        await cursor.delete();\n      }\n      await tx.done;\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  public async migrateUnnamespacedLayouts(namespace: string): Promise<void> {\n    await this.#migrateFromLocalStorage();\n\n    // At the time IdbLayoutStorage was created, all layouts were already namespaced, so there are\n    // no un-namespaced layouts to migrate.\n    void namespace;\n  }\n\n  /**\n   * Prior implementation (LocalStorageLayoutStorage) stored layouts in localStorage under a key\n   * prefix. This approach was abandoned due to small capacity constraints on localStorage.\n   * https://github.com/foxglove/studio/issues/3100\n   */\n  async #migrateFromLocalStorage() {\n    const legacyLocalStorageKeyPrefix = \"studio.layouts\";\n    const keysToMigrate: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith(`${legacyLocalStorageKeyPrefix}.`) === true) {\n        keysToMigrate.push(key);\n      }\n    }\n\n    for (const key of keysToMigrate) {\n      const layoutJson = localStorage.getItem(key);\n      if (layoutJson == undefined) {\n        continue;\n      }\n      try {\n        const layout = migrateLayout(JSON.parse(layoutJson));\n        const [_prefix1, _prefix2, namespace, id] = key.split(\".\");\n        if (namespace == undefined || id == undefined || id !== layout.id) {\n          log.error(`Failed to migrate ${key} from localStorage`);\n          continue;\n        }\n        // use a separate transaction per item so we can be sure it is safe to delete from localStorage\n        await (await this.#db).put(\"layouts\", { namespace, layout });\n        localStorage.removeItem(key);\n      } catch (err) {\n        log.error(err);\n      }\n    }\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { IAppConfiguration, ChangeHandler, AppConfigurationValue } from \"@foxglove/studio-base\";\n\nexport default class LocalStorageAppConfiguration implements IAppConfiguration {\n  static #KEY_PREFIX = \"studio.app-configuration.\";\n\n  /** Default values for app configuration items which have never been set by a user */\n  #defaults?: { [key: string]: AppConfigurationValue };\n\n  #changeListeners = new Map<string, Set<ChangeHandler>>();\n\n  public constructor({ defaults }: { defaults?: { [key: string]: AppConfigurationValue } }) {\n    this.#defaults = defaults;\n  }\n\n  public get(key: string): AppConfigurationValue {\n    const value = localStorage.getItem(LocalStorageAppConfiguration.#KEY_PREFIX + key);\n    try {\n      return value == undefined ? this.#defaults?.[key] : JSON.parse(value);\n    } catch {\n      return undefined;\n    }\n  }\n  public async set(key: string, value: AppConfigurationValue): Promise<void> {\n    if (value == undefined) {\n      localStorage.removeItem(LocalStorageAppConfiguration.#KEY_PREFIX + key);\n    } else {\n      localStorage.setItem(\n        LocalStorageAppConfiguration.#KEY_PREFIX + key,\n        JSON.stringify(value) ?? \"\",\n      );\n    }\n    const listeners = this.#changeListeners.get(key);\n    if (listeners) {\n      // Copy the list of listeners to protect against mutation during iteration\n      [...listeners].forEach((listener) => listener(value));\n    }\n  }\n\n  public addChangeListener(key: string, cb: ChangeHandler): void {\n    let listeners = this.#changeListeners.get(key);\n    if (!listeners) {\n      listeners = new Set();\n      this.#changeListeners.set(key, listeners);\n    }\n    listeners.add(cb);\n  }\n\n  public removeChangeListener(key: string, cb: ChangeHandler): void {\n    const listeners = this.#changeListeners.get(key);\n    if (listeners) {\n      listeners.delete(cb);\n    }\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { useMemo, useState } from \"react\";\n\nimport {\n  IDataSourceFactory,\n  Ros1LocalBagDataSourceFactory,\n  Ros2LocalBagDataSourceFactory,\n  RosbridgeDataSourceFactory,\n  RemoteDataSourceFactory,\n  FoxgloveWebSocketDataSourceFactory,\n  UlogLocalDataSourceFactory,\n  McapLocalDataSourceFactory,\n  SampleNuscenesDataSourceFactory,\n  IdbExtensionLoader,\n  App,\n  AppSetting,\n} from \"@foxglove/studio-base\";\n\nimport { IdbLayoutStorage } from \"./services/IdbLayoutStorage\";\nimport LocalStorageAppConfiguration from \"./services/LocalStorageAppConfiguration\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\n\nexport function Root(props: {\n  extraProviders: JSX.Element[] | undefined;\n  dataSources: IDataSourceFactory[] | undefined;\n}): JSX.Element {\n  const appConfiguration = useMemo(\n    () =>\n      new LocalStorageAppConfiguration({\n        defaults: {\n          [AppSetting.SHOW_DEBUG_PANELS]: isDevelopment,\n        },\n      }),\n    [],\n  );\n  const layoutStorage = useMemo(() => new IdbLayoutStorage(), []);\n  const [extensionLoaders] = useState(() => [\n    new IdbExtensionLoader(\"org\"),\n    new IdbExtensionLoader(\"local\"),\n  ]);\n\n  const dataSources = useMemo(() => {\n    const sources = [\n      new Ros1LocalBagDataSourceFactory(),\n      new Ros2LocalBagDataSourceFactory(),\n      new FoxgloveWebSocketDataSourceFactory(),\n      new RosbridgeDataSourceFactory(),\n      new UlogLocalDataSourceFactory(),\n      new SampleNuscenesDataSourceFactory(),\n      new McapLocalDataSourceFactory(),\n      new RemoteDataSourceFactory(),\n    ];\n\n    return props.dataSources ?? sources;\n  }, [props.dataSources]);\n\n\n\n  return (\n    <>\n      <App\n        enableLaunchPreferenceScreen\n        deepLinks={[window.location.href]}\n        dataSources={dataSources}\n        appConfiguration={appConfiguration}\n        layoutStorage={layoutStorage}\n        extensionLoaders={extensionLoaders}\n        enableGlobalCss\n        extraProviders={props.extraProviders}\n      />\n    </>\n  );\n\n}\n"],"names":["log","DATABASE_NAME","OBJECT_STORE_NAME","IdbLayoutStorage","#db","db","namespace","results","records","record","err","id","layout","fromNamespace","toNamespace","tx","store","cursor","error","#migrateFromLocalStorage","legacyLocalStorageKeyPrefix","keysToMigrate","i","key","layoutJson","_prefix1","_prefix2","LocalStorageAppConfiguration","#KEY_PREFIX","#defaults","#changeListeners","defaults","value","listeners","listener","cb","isDevelopment","Root","props","appConfiguration","layoutStorage","extensionLoaders","dataSources","sources"],"sourceRoot":""}