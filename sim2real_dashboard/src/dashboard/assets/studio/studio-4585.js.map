{"version":3,"file":"studio-4585.js","mappings":"yPAcA,SAASA,EAAkBC,EAA4B,CACrD,MAAO,CACL,QAAS,CACP,MAAO,UACP,OAAQ,CACN,IAAK,CACH,MAAO,MACP,MAAO,SACP,YAAa,MACb,MAAOA,EAAO,YAAY,G,EAE5B,IAAK,CACH,MAAO,MACP,MAAO,SACP,YAAa,MACb,MAAOA,EAAO,YAAY,G,EAE5B,KAAM,CACJ,MAAO,OACP,MAAO,SACP,YAAa,OACb,MAAOA,EAAO,YAAY,I,EAE5B,mBAAoB,CAClB,MAAO,gBACP,MAAO,SACP,MAAOA,EAAO,kB,IAKxB,CAEO,SAASC,EACdD,EACAE,EAA4C,CAE5C,MAAMC,KAA0B,MAA2B,EAErDC,KAAgB,eACnBC,GAA+B,CAC1BA,EAAO,SAAW,UAItBH,KACE,MAA+BI,GAAU,CACvC,MAAMC,EAAOF,EAAO,QAAQ,KAAK,MAAM,CAAC,EACpC,CAAC,MAAO,KAAK,EAAE,SAASE,EAAK,CAAC,GAAK,EAAE,KACvC,OAAID,EAAO,CAAC,cAAe,GAAGC,CAAI,EAAGF,EAAO,QAAQ,KAAK,EAChDE,EAAK,CAAC,IAAM,QAAUF,EAAO,QAAQ,QAAU,SACxDC,EAAM,YAAY,KAAOD,EAAO,QAAQ,SAExC,OAAIC,EAAOC,EAAMF,EAAO,QAAQ,KAAK,CAEzC,CAAC,CAAC,CAEN,EACA,CAACH,CAAU,CAAC,KAGd,aAAU,IAAM,CACdC,EAAwB,CACtB,cAAAC,EACA,MAAOL,EAAkBC,CAAM,C,CAChC,CACH,EAAG,CAACI,EAAeJ,EAAQG,CAAuB,CAAC,CACrD,CCnDA,SAASK,EAAoBC,EAAY,CACvC,KAAM,CAAE,OAAAT,EAAQ,WAAAE,CAAW,EAAIO,EACzB,CAAE,YAAAC,EAAa,mBAAAC,CAAmB,EAAIX,EACtC,CAAE,gBAAAY,EAAiB,mBAAAC,CAAmB,KAAIC,EAAA,GAAmB,EAC7D,CAAE,IAAAC,EAAM,EAAG,IAAAC,EAAM,GAAI,KAAAC,EAAO,CAAE,EAAIP,EAClCQ,EAAsBN,EAAgBD,CAAkB,EACxDQ,KAAQC,EAAA,GAAS,EAEvBnB,EAA0BD,EAAQE,CAAU,EAE5C,MAAMmB,KAAiB,eACrB,CAACC,EAAeC,IAA6B,CACvCA,IAAUL,GACZL,EAAmB,CAAE,CAACF,CAAkB,EAAGY,CAAM,CAAC,CAEtD,EACA,CAACZ,EAAoBO,EAAqBL,CAAkB,CAAC,EAGzDW,EAAQ,CACZ,CAAE,MAAOT,EAAK,MAAO,OAAOA,CAAG,CAAE,EACjC,CAAE,MAAOC,EAAK,MAAO,OAAOA,CAAG,CAAE,C,EAGnC,SACE,QAACS,EAAA,EAAK,CAAC,WAAU,gBACf,OAACC,EAAA,EAAY,OACb,QAACD,EAAA,EAAK,CACJ,KAAK,OACL,WAAW,SACX,eAAe,SACf,WAAU,GACV,IAAK,EACL,SAAU,EACV,SAAU,EAAC,aAEX,OAACE,EAAA,GAAM,CACL,IAAKZ,EACL,IAAKC,EACL,KAAMC,EACN,MAAOO,EACP,MAAO,OAAON,GAAwB,SAAWA,EAAsB,EACvE,SAAUG,CAAc,MAE1B,OAACO,EAAA,EAAU,CAAC,QAAQ,KAAK,MAAO,CAAE,UAAWT,EAAM,QAAQ,IAAI,CAAE,EAAC,SAC/D,OAAOD,GAAwB,SAAWA,EAAsB,CAAC,EACvD,GACP,GAGd,CAEA,MAAMW,EAAsC,CAC1C,YAAa,CACX,IAAK,EACL,IAAK,GACL,KAAM,C,EAER,mBAAoB,gB,EAGtB,KAAeC,EAAA,GACb,OAAO,OAAOtB,EAAqB,CACjC,UAAW,4BACX,cAAAqB,C,CACD,CAAC,C","sources":["webpack:///../../packages/studio-base/src/panels/VariableSlider/settings.ts","webpack:///../../packages/studio-base/src/panels/VariableSlider/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { produce } from \"immer\";\nimport { set } from \"lodash\";\nimport { useCallback, useEffect } from \"react\";\n\nimport { SettingsTreeAction, SettingsTreeNodes } from \"@foxglove/studio\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { VariableSliderConfig } from \"./types\";\n\nfunction buildSettingsTree(config: VariableSliderConfig): SettingsTreeNodes {\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        min: {\n          label: \"Min\",\n          input: \"number\",\n          placeholder: \"min\",\n          value: config.sliderProps.min,\n        },\n        max: {\n          label: \"Max\",\n          input: \"number\",\n          placeholder: \"max\",\n          value: config.sliderProps.max,\n        },\n        step: {\n          label: \"Step\",\n          input: \"number\",\n          placeholder: \"step\",\n          value: config.sliderProps.step,\n        },\n        globalVariableName: {\n          label: \"Variable name\",\n          input: \"string\",\n          value: config.globalVariableName,\n        },\n      },\n    },\n  };\n}\n\nexport function useVariableSliderSettings(\n  config: VariableSliderConfig,\n  saveConfig: SaveConfig<VariableSliderConfig>,\n): void {\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action !== \"update\") {\n        return;\n      }\n\n      saveConfig(\n        produce<VariableSliderConfig>((draft) => {\n          const path = action.payload.path.slice(1);\n          if ([\"min\", \"max\"].includes(path[0] ?? \"\")) {\n            set(draft, [\"sliderProps\", ...path], action.payload.value);\n          } else if (path[0] === \"step\" && action.payload.input === \"number\") {\n            draft.sliderProps.step = action.payload.value;\n          } else {\n            set(draft, path, action.payload.value);\n          }\n        }),\n      );\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      nodes: buildSettingsTree(config),\n    });\n  }, [actionHandler, config, updatePanelSettingsTree]);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Slider, Typography, useTheme } from \"@mui/material\";\nimport { useCallback } from \"react\";\n\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport useGlobalVariables from \"@foxglove/studio-base/hooks/useGlobalVariables\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { useVariableSliderSettings } from \"./settings\";\nimport { VariableSliderConfig } from \"./types\";\n\ntype Props = {\n  config: VariableSliderConfig;\n  saveConfig: SaveConfig<VariableSliderConfig>;\n};\n\nfunction VariableSliderPanel(props: Props): JSX.Element {\n  const { config, saveConfig } = props;\n  const { sliderProps, globalVariableName } = config;\n  const { globalVariables, setGlobalVariables } = useGlobalVariables();\n  const { min = 0, max = 10, step = 1 } = sliderProps;\n  const globalVariableValue = globalVariables[globalVariableName];\n  const theme = useTheme();\n\n  useVariableSliderSettings(config, saveConfig);\n\n  const sliderOnChange = useCallback(\n    (_event: Event, value: number | number[]) => {\n      if (value !== globalVariableValue) {\n        setGlobalVariables({ [globalVariableName]: value });\n      }\n    },\n    [globalVariableName, globalVariableValue, setGlobalVariables],\n  );\n\n  const marks = [\n    { value: min, label: String(min) },\n    { value: max, label: String(max) },\n  ];\n\n  return (\n    <Stack fullHeight>\n      <PanelToolbar />\n      <Stack\n        flex=\"auto\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        fullHeight\n        gap={2}\n        paddingY={2}\n        paddingX={3}\n      >\n        <Slider\n          min={min}\n          max={max}\n          step={step}\n          marks={marks}\n          value={typeof globalVariableValue === \"number\" ? globalVariableValue : 0}\n          onChange={sliderOnChange}\n        />\n        <Typography variant=\"h5\" style={{ marginTop: theme.spacing(-2.5) }}>\n          {typeof globalVariableValue === \"number\" ? globalVariableValue : 0}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n}\n\nconst defaultConfig: VariableSliderConfig = {\n  sliderProps: {\n    min: 0,\n    max: 10,\n    step: 1,\n  },\n  globalVariableName: \"globalVariable\",\n};\n\nexport default Panel(\n  Object.assign(VariableSliderPanel, {\n    panelType: \"GlobalVariableSliderPanel\",\n    defaultConfig,\n  }),\n);\n"],"names":["buildSettingsTree","config","useVariableSliderSettings","saveConfig","updatePanelSettingsTree","actionHandler","action","draft","path","VariableSliderPanel","props","sliderProps","globalVariableName","globalVariables","setGlobalVariables","useGlobalVariables","min","max","step","globalVariableValue","theme","useTheme","sliderOnChange","_event","value","marks","Stack","PanelToolbar","Slider","Typography","defaultConfig","Panel"],"sourceRoot":""}