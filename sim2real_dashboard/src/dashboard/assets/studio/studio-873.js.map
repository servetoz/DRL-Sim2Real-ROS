{"version":3,"file":"studio-873.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/MessagePathSyntax/filterMatches.ts","webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useCachedGetMessagePathDataItems.ts","webpack:///../../packages/studio-base/src/components/PanelContextMenu.tsx","webpack:///../../packages/studio-base/src/util/RpcWorkerUtils.ts","webpack:///../../packages/studio-base/src/components/Chart/worker/ChartJSManager.ts","webpack:///../../packages/studio-base/src/components/Chart/worker/ChartJsMux.ts","webpack:///../../packages/studio-base/src/util/RpcMainThreadUtils.ts","webpack:///../../packages/studio-base/src/util/WebWorkerManager.ts","webpack:///../../packages/studio-base/src/components/Chart/index.tsx","webpack:///../../packages/studio-base/src/components/TimeBasedChart/downsample.ts","webpack:///../../packages/studio-base/src/components/TimeBasedChart/Downsampler.ts","webpack:///../../packages/studio-base/src/components/TimeBasedChart/TimeBasedChartTooltipContent.tsx","webpack:///../../packages/studio-base/src/components/TimeBasedChart/index.tsx","webpack:///../../packages/studio-base/src/panels/Plot/plotData.ts","webpack:///../../packages/studio-base/src/panels/Plot/transformPlotRange.ts","webpack:///../../packages/studio-base/src/types/Bounds.ts","webpack:///../../packages/studio-base/src/panels/Plot/internalTypes.ts","webpack:///../../packages/studio-base/src/panels/Plot/datasets.tsx","webpack:///../../packages/studio-base/src/panels/Plot/useFlattenedBlocksByTopic.ts","webpack:///../../packages/studio-base/src/panels/Plot/usePlotPanelDatasets.ts","webpack:///../../packages/studio-base/src/panels/Plot/PlotChart.tsx","webpack:///../../packages/studio-base/src/panels/Plot/types.ts","webpack:///../../packages/studio-base/src/panels/Plot/PlotLegendRow.tsx","webpack:///../../packages/studio-base/src/panels/Plot/PlotLegend.tsx","webpack:///../../packages/studio-base/src/panels/Plot/csv.ts","webpack:///../../packages/studio-base/src/panels/Plot/settings.ts","webpack:///../../packages/studio-base/src/panels/Plot/index.tsx","webpack:///../../packages/studio-base/src/util/plotColors.ts","webpack:///../../packages/studio-base/src/util/toolsColorScheme.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessagePathFilter } from \"./constants\";\n\nexport function filterMatches(filter: MessagePathFilter, value: unknown): boolean {\n  if (typeof filter.value === \"object\") {\n    throw new Error(\"filterMatches only works on paths where global variables have been filled in\");\n  }\n  if (filter.value == undefined) {\n    return false;\n  }\n\n  let currentValue = value;\n  for (const name of filter.path) {\n    if (typeof currentValue !== \"object\" || currentValue == undefined) {\n      return false;\n    }\n    currentValue = (currentValue as Record<string, unknown>)[name];\n    if (currentValue == undefined) {\n      return false;\n    }\n  }\n\n  // Test equality using `==` so we can be forgiving for comparing booleans with integers,\n  // comparing numbers with strings, bigints with numbers, and so on.\n  // eslint-disable-next-line @foxglove/strict-equality\n  return currentValue != undefined && currentValue == filter.value;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { isEqual } from \"lodash\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\nimport { useShallowMemo, useChangeDetector, useDeepMemo } from \"@foxglove/hooks\";\nimport { Immutable } from \"@foxglove/studio\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport useGlobalVariables, {\n  GlobalVariables,\n} from \"@foxglove/studio-base/hooks/useGlobalVariables\";\nimport { MessageEvent, Topic } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\nimport {\n  enumValuesByDatatypeAndField,\n  extractTypeFromStudioEnumAnnotation,\n  getTopicsByTopicName,\n} from \"@foxglove/studio-base/util/selectors\";\n\nimport { MessagePathStructureItem, MessagePathStructureItemMessage, RosPath } from \"./constants\";\nimport { filterMatches } from \"./filterMatches\";\nimport { TypicalFilterNames } from \"./isTypicalFilterName\";\nimport { messagePathStructures } from \"./messagePathsForDatatype\";\nimport parseRosPath, { quoteTopicNameIfNeeded } from \"./parseRosPath\";\n\ntype ValueInMapRecord<T> = T extends Map<unknown, infer I> ? I : never;\n\nexport type MessagePathDataItem = {\n  value: unknown; // The actual value.\n  path: string; // The path to get to this value. Tries to use \"nice ids\" like `[:]{some_id==123}` wherever possible.\n  constantName?: string; // The name of the constant that the value matches up with, if any.\n};\n\n// Given a set of message paths, this returns a function that you can call to resolve a single path\n// and message to an array of `MessagePathDataItem` objects. The array+objects will be the same by\n// reference, as long as topics/datatypes/global variables haven't changed in the meantime.\nexport function useCachedGetMessagePathDataItems(\n  paths: readonly string[],\n): (path: string, message: MessageEvent) => MessagePathDataItem[] | undefined {\n  const { topics: providerTopics, datatypes } = PanelAPI.useDataSourceInfo();\n  const { globalVariables } = useGlobalVariables();\n  const memoizedPaths = useShallowMemo(paths);\n\n  // We first fill in global variables in the paths, so we can later see which paths have really\n  // changed when the global variables have changed.\n  const unmemoizedFilledInPaths: {\n    [key: string]: RosPath;\n  } = useMemo(() => {\n    const filledInPaths: Record<string, RosPath> = {};\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        filledInPaths[path] = fillInGlobalVariablesInPath(rosPath, globalVariables);\n      }\n    }\n    return filledInPaths;\n  }, [globalVariables, memoizedPaths]);\n  const memoizedFilledInPaths = useDeepMemo<{\n    [key: string]: RosPath;\n  }>(unmemoizedFilledInPaths);\n\n  // Filter down topics and datatypes to only the ones we need to process the requested paths, so\n  // our result can be dependent on the relevant topics only. Without this, adding topics/datatypes\n  // dynamically would result in panels clearing out when their message reducers change as a result\n  // of the change in topics/datatypes identity from the player.\n  const unmemoizedRelevantTopics = useMemo(() => {\n    const topicsByName = getTopicsByTopicName(providerTopics);\n    const seenNames = new Set<string>();\n    const result: Topic[] = [];\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        if (seenNames.has(rosPath.topicName)) {\n          continue;\n        }\n        seenNames.add(rosPath.topicName);\n        const topic = topicsByName[rosPath.topicName];\n        if (topic) {\n          result.push(topic);\n        }\n      }\n    }\n    return result;\n  }, [providerTopics, memoizedPaths]);\n  const relevantTopics = useDeepMemo(unmemoizedRelevantTopics);\n\n  const unmemoizedRelevantDatatypes = useMemo(() => {\n    const relevantDatatypes = new Map<string, Immutable<ValueInMapRecord<RosDatatypes>>>();\n    function addRelevantDatatype(datatypeName: string, seen: string[]) {\n      if (seen.includes(datatypeName)) {\n        return;\n      }\n\n      const type = datatypes.get(datatypeName);\n      if (type) {\n        relevantDatatypes.set(datatypeName, type);\n        for (const field of type.definitions) {\n          if (\n            field.isComplex === true ||\n            extractTypeFromStudioEnumAnnotation(field.name) != undefined\n          ) {\n            addRelevantDatatype(field.type, [...seen, datatypeName]);\n          }\n        }\n      }\n    }\n    for (const { schemaName } of relevantTopics.values()) {\n      if (schemaName != undefined) {\n        addRelevantDatatype(schemaName, []);\n      }\n    }\n    return relevantDatatypes;\n  }, [datatypes, relevantTopics]);\n  const relevantDatatypes = useDeepMemo(unmemoizedRelevantDatatypes);\n\n  // Cache MessagePathDataItem arrays by Message. We need to clear out this cache whenever\n  // the topics or datatypes change, since that's what getMessagePathDataItems\n  // depends on, outside of the message+path.\n  const cachesByPath = useRef<{\n    [key: string]: {\n      filledInPath: RosPath;\n      weakMap: WeakMap<MessageEvent, MessagePathDataItem[] | undefined>;\n    };\n  }>({});\n  if (useChangeDetector([relevantTopics, relevantDatatypes], { initiallyTrue: true })) {\n    cachesByPath.current = {};\n  }\n  // When the filled in paths changed, then that means that either the path string changed, or a\n  // relevant global variable changed. Delete the caches for where the `filledInPath` doesn't match\n  // any more.\n  if (useChangeDetector([memoizedFilledInPaths], { initiallyTrue: false })) {\n    for (const [path, current] of Object.entries(cachesByPath.current)) {\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath || !isEqual(current.filledInPath, filledInPath)) {\n        delete cachesByPath.current[path];\n      }\n    }\n  }\n\n  return useCallback(\n    (path: string, message: MessageEvent): MessagePathDataItem[] | undefined => {\n      if (!memoizedPaths.includes(path)) {\n        throw new Error(`path (${path}) was not in the list of cached paths`);\n      }\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath) {\n        return;\n      }\n      const currentPath = (cachesByPath.current[path] = cachesByPath.current[path] ?? {\n        filledInPath,\n        weakMap: new WeakMap(),\n      });\n      const { weakMap } = currentPath;\n      if (!weakMap.has(message)) {\n        const messagePathDataItems = getMessagePathDataItems(\n          message,\n          filledInPath,\n          relevantTopics,\n          relevantDatatypes,\n        );\n        weakMap.set(message, messagePathDataItems);\n        return messagePathDataItems;\n      }\n      const messagePathDataItems = weakMap.get(message);\n      return messagePathDataItems;\n    },\n    [relevantDatatypes, memoizedFilledInPaths, memoizedPaths, relevantTopics],\n  );\n}\n\nexport function fillInGlobalVariablesInPath(\n  rosPath: RosPath,\n  globalVariables: GlobalVariables,\n): RosPath {\n  return {\n    ...rosPath,\n    messagePath: rosPath.messagePath.map((messagePathPart) => {\n      if (messagePathPart.type === \"slice\") {\n        const start =\n          typeof messagePathPart.start === \"object\"\n            ? Number(globalVariables[messagePathPart.start.variableName])\n            : messagePathPart.start;\n        const end =\n          typeof messagePathPart.end === \"object\"\n            ? Number(globalVariables[messagePathPart.end.variableName])\n            : messagePathPart.end;\n\n        return {\n          ...messagePathPart,\n          start: isNaN(start) ? 0 : start,\n          end: isNaN(end) ? Infinity : end,\n        };\n      } else if (messagePathPart.type === \"filter\" && typeof messagePathPart.value === \"object\") {\n        let value;\n        const variable = globalVariables[messagePathPart.value.variableName];\n        if (typeof variable === \"number\" || typeof variable === \"string\") {\n          value = variable;\n        }\n        return { ...messagePathPart, value };\n      }\n\n      return messagePathPart;\n    }),\n  };\n}\n\n// Get a new item that has `queriedData` set to the values and paths as queried by `rosPath`.\n// Exported just for tests.\nexport function getMessagePathDataItems(\n  message: MessageEvent,\n  filledInPath: RosPath,\n  providerTopics: readonly Topic[],\n  datatypes: Immutable<RosDatatypes>,\n): MessagePathDataItem[] | undefined {\n  const structures = messagePathStructures(datatypes);\n  const topic = getTopicsByTopicName(providerTopics)[filledInPath.topicName];\n\n  // We don't care about messages that don't match the topic we're looking for.\n  if (!topic || message.topic !== filledInPath.topicName) {\n    return;\n  }\n\n  // Apply top-level filters first. If a message matches all top-level filters, then this function\n  // will *always* return a history item, so this is our only chance to return nothing.\n  for (const item of filledInPath.messagePath) {\n    if (item.type === \"filter\") {\n      if (!filterMatches(item, message.message)) {\n        return [];\n      }\n    } else {\n      break;\n    }\n  }\n\n  const queriedData: MessagePathDataItem[] = [];\n  // Traverse the message (via `value`) and the `messagePath` at the same time. Also keep track\n  // of a `path` string that we should show in the tooltip of the point.\n  function traverse(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value: any,\n    pathIndex: number,\n    path: string,\n    structureItem: MessagePathStructureItem | undefined,\n  ) {\n    if (value == undefined || structureItem == undefined) {\n      return;\n    }\n    const pathItem = filledInPath.messagePath[pathIndex];\n    const nextPathItem = filledInPath.messagePath[pathIndex + 1];\n    if (!pathItem) {\n      // If we're at the end of the `messagePath`, we're done! Just store the point.\n      let constantName: string | undefined;\n      const prevPathItem = filledInPath.messagePath[pathIndex - 1];\n      if (prevPathItem && prevPathItem.type === \"name\") {\n        const fieldName = prevPathItem.name;\n        const enumMap = enumValuesByDatatypeAndField(datatypes)[structureItem.datatype];\n        constantName = enumMap?.[fieldName]?.[value];\n      }\n      queriedData.push({ value, path, constantName });\n    } else if (pathItem.type === \"name\" && structureItem.structureType === \"message\") {\n      // If the `pathItem` is a name, we're traversing down using that name.\n      const next = structureItem.nextByName[pathItem.name];\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, next);\n    } else if (pathItem.type === \"slice\" && structureItem.structureType === \"array\") {\n      const { start, end } = pathItem;\n      if (typeof start === \"object\" || typeof end === \"object\") {\n        throw new Error(\n          \"getMessagePathDataItems only works on paths where global variables have been filled in\",\n        );\n      }\n      const startIdx: number = start;\n      const endIdx: number = end;\n      if (typeof startIdx !== \"number\" || typeof endIdx !== \"number\") {\n        return;\n      }\n\n      // If the `pathItem` is a slice, iterate over all the relevant elements in the array.\n      const arrayLength = value.length as number;\n      for (let i = startIdx; i <= Math.min(endIdx, arrayLength - 1); i++) {\n        const index = i >= 0 ? i : arrayLength + i;\n        const arrayElement = value[index];\n        if (arrayElement == undefined) {\n          continue;\n        }\n        // Ideally show something like `/topic.object[:]{some_id=123}` for the path, but fall\n        // back to `/topic.object[10]` if necessary. In any case, make sure that the user can\n        // actually identify where the value came from.\n        let newPath;\n        if (nextPathItem && nextPathItem.type === \"filter\") {\n          // If we have a filter set after this, it will update the path appropriately.\n          newPath = `${path}[:]`;\n        } else if (typeof arrayElement === \"object\") {\n          // See if `arrayElement` has a property that we typically filter on. If so, show that.\n          const name = TypicalFilterNames.find((id) => id in arrayElement);\n          if (name != undefined) {\n            newPath = `${path}[:]{${name}==${arrayElement[name]}}`;\n          } else {\n            // Use `i` here instead of `index`, since it's only different when `i` is negative,\n            // and in that case it's probably more useful to show to the user how many elements\n            // from the end of the array this data is, since they clearly are thinking in that way\n            // (otherwise they wouldn't have chosen a negative slice).\n            newPath = `${path}[${i}]`;\n          }\n        } else {\n          // Use `i` here instead of `index`, since it's only different when `i` is negative,\n          // and in that case it's probably more useful to show to the user how many elements\n          // from the end of the array this data is, since they clearly are thinking in that way\n          // (otherwise they wouldn't have chosen a negative slice).\n          newPath = `${path}[${i}]`;\n        }\n        traverse(arrayElement, pathIndex + 1, newPath, structureItem.next);\n      }\n    } else if (pathItem.type === \"filter\") {\n      if (filterMatches(pathItem, value)) {\n        traverse(value, pathIndex + 1, `${path}{${pathItem.repr}}`, structureItem);\n      }\n    } else {\n      console.warn(\n        `Unknown pathItem.type ${pathItem.type} for structureType: ${structureItem.structureType}`,\n      );\n    }\n  }\n  const structure: MessagePathStructureItemMessage | undefined =\n    // If the topic has no schema, we can at least allow accessing the root message\n    topic.schemaName == undefined\n      ? { structureType: \"message\", datatype: \"\", nextByName: {} }\n      : structures[topic.schemaName];\n  if (structure) {\n    traverse(message.message, 0, quoteTopicNameIfNeeded(filledInPath.topicName), structure);\n  }\n  return queriedData;\n}\n\nexport type MessageAndData = {\n  messageEvent: MessageEvent;\n  queriedData: MessagePathDataItem[];\n};\n\nexport type MessageDataItemsByPath = {\n  readonly [key: string]: readonly MessageAndData[];\n};\n\nexport function useDecodeMessagePathsForMessagesByTopic(\n  paths: readonly string[],\n): (messagesByTopic: { [topicName: string]: readonly MessageEvent[] }) => MessageDataItemsByPath {\n  const memoizedPaths = useShallowMemo(paths);\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(memoizedPaths);\n  // Note: Let callers define their own memoization scheme for messagesByTopic. For regular playback\n  // useMemo might be appropriate, but weakMemo will likely better for blocks.\n  return useCallback(\n    (messagesByTopic) => {\n      const obj: { [path: string]: MessageAndData[] } = {};\n      for (const path of memoizedPaths) {\n        // Create an array for invalid paths, and valid paths with entries in messagesByTopic\n        const rosPath = parseRosPath(path);\n        if (!rosPath) {\n          obj[path] = [];\n          continue;\n        }\n        const messages = messagesByTopic[rosPath.topicName];\n        if (!messages) {\n          // For the playback pipeline messagesByTopic will always include an entry for every topic.\n          // For the blocks, missing entries are semantically interesting, and should result in\n          // missing (not empty) entries in the output so that information is communicated\n          // downstream.\n          continue;\n        }\n\n        const messagesForThisPath: MessageAndData[] = [];\n        obj[path] = messagesForThisPath;\n\n        for (const message of messages) {\n          // Add the item (if it exists) to the array.\n          const queriedData = cachedGetMessagePathDataItems(path, message);\n          if (queriedData) {\n            messagesForThisPath.push({ messageEvent: message, queriedData });\n          }\n        }\n      }\n      return obj;\n    },\n    [memoizedPaths, cachedGetMessagePathDataItems],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { Divider, Menu, MenuItem } from \"@mui/material\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { Immutable } from \"@foxglove/studio\";\nimport { PANEL_ROOT_CLASS_NAME } from \"@foxglove/studio-base/components/PanelRoot\";\n\n/**\n * Types of items that can be included in a context menu. Either a clickable item\n * or a divider.\n */\nexport type PanelContextMenuItem =\n  | {\n      /** Type of selectable menu items. */\n      type: \"item\";\n\n      /** True if the item should be shown but disabled. */\n      disabled?: boolean;\n\n      /** Label shown for the menu item. */\n      label: string;\n\n      /** Callback triggered by clicking the item. */\n      onclick: () => void;\n    }\n  | {\n      /** Type of item dividers. */\n      type: \"divider\";\n    };\n\ntype PanelContextMenuProps = {\n  /** @returns List of menu items */\n  getItems: () => Immutable<PanelContextMenuItem[]>;\n};\n\n/**\n * This is a convenience component for attaching a context menu to a panel. It\n * must be a child of a Panel component to work.\n */\nexport function PanelContextMenu(props: PanelContextMenuProps): JSX.Element {\n  const { getItems } = props;\n\n  const rootRef = useRef<HTMLDivElement>(ReactNull);\n\n  const [position, setPosition] = useState<undefined | { x: number; y: number }>();\n\n  const handleClose = useCallback(() => setPosition(undefined), []);\n\n  const [items, setItems] = useState<Immutable<PanelContextMenuItem[]>>([]);\n\n  useEffect(() => {\n    const parent = rootRef.current?.closest<HTMLElement>(`.${PANEL_ROOT_CLASS_NAME}`);\n    if (!parent) {\n      return;\n    }\n\n    // Trigger the menu when the right mouse button is released, but not if the mouse moved in\n    // between press & release\n    let rightClickState: \"none\" | \"down\" | \"canceled\" = \"none\";\n    const handleMouseUp = (event: MouseEvent) => {\n      if (event.button === 2 && rightClickState === \"down\") {\n        setPosition({ x: event.clientX, y: event.clientY });\n        setItems(getItems());\n        rightClickState = \"none\";\n      }\n    };\n    const handleMouseMove = (_event: MouseEvent) => {\n      rightClickState = \"canceled\";\n    };\n    const handleMouseDown = (event: MouseEvent) => {\n      if (event.button === 2) {\n        rightClickState = \"down\";\n      }\n    };\n    const handleContextMenu = (event: MouseEvent) => {\n      event.preventDefault();\n    };\n\n    parent.addEventListener(\"mousedown\", handleMouseDown);\n    parent.addEventListener(\"mousemove\", handleMouseMove);\n    parent.addEventListener(\"mouseup\", handleMouseUp);\n    parent.addEventListener(\"contextmenu\", handleContextMenu);\n    return () => {\n      parent.removeEventListener(\"mousedown\", handleMouseDown);\n      parent.removeEventListener(\"mousemove\", handleMouseMove);\n      parent.removeEventListener(\"mouseup\", handleMouseUp);\n      parent.removeEventListener(\"contextmenu\", handleContextMenu);\n    };\n  }, [getItems]);\n\n  return (\n    <div ref={rootRef} onContextMenu={(event) => event.preventDefault()}>\n      <Menu\n        open={position != undefined}\n        onClose={handleClose}\n        anchorReference=\"anchorPosition\"\n        anchorPosition={position ? { top: position.y, left: position.x } : undefined}\n        MenuListProps={{\n          dense: true,\n        }}\n      >\n        {items.map((item, index) => {\n          if (item.type === \"divider\") {\n            return <Divider variant=\"middle\" key={`divider_${index}`} />;\n          }\n\n          return (\n            <MenuItem\n              onClick={() => {\n                handleClose();\n                item.onclick();\n              }}\n              key={`item_${index}_${item.label}`}\n              disabled={item.disabled}\n            >\n              {item.label}\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport {\n  setNotificationHandler,\n  DetailsType,\n  NotificationType,\n  NotificationSeverity,\n} from \"@foxglove/studio-base/util/sendNotification\";\n\nimport Rpc from \"./Rpc\";\nimport overwriteFetch from \"./overwriteFetch\";\n\nexport function setupSendReportNotificationHandler(rpc: Rpc): void {\n  setNotificationHandler(\n    (\n      message: string,\n      details: DetailsType,\n      type: NotificationType,\n      severity: NotificationSeverity,\n    ) => {\n      if (!(details instanceof Error || typeof details === \"string\")) {\n        console.warn(\"Invalid Error type\", details);\n      }\n      void rpc.send(\"sendNotification\", {\n        message,\n        details: details instanceof Error ? details.toString() : details,\n        type,\n        severity,\n      });\n    },\n  );\n}\n\nexport function setupWorker(rpc: Rpc): void {\n  if (process.env.NODE_ENV !== \"test\") {\n    setupSendReportNotificationHandler(rpc);\n    overwriteFetch();\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Chart, ChartData, ChartOptions, ChartType } from \"chart.js\";\nimport type { Context as DatalabelContext } from \"chartjs-plugin-datalabels\";\nimport DatalabelPlugin from \"chartjs-plugin-datalabels\";\nimport { type Options as DatalabelsPluginOptions } from \"chartjs-plugin-datalabels/types/options\";\nimport EventEmitter from \"eventemitter3\";\n\nimport { Zoom as ZoomPlugin } from \"@foxglove/chartjs-plugin-zoom\";\nimport Logger from \"@foxglove/log\";\nimport { RpcElement, RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\nimport { maybeCast } from \"@foxglove/studio-base/util/maybeCast\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nconst log = Logger.getLogger(__filename);\n\nexport type InitOpts = {\n  id: string;\n  node: { canvas: HTMLCanvasElement };\n  type: ChartType;\n  data: ChartData<\"scatter\">;\n  options: ChartOptions;\n  devicePixelRatio: number;\n  fontLoaded: Promise<FontFace>;\n};\n\n// allows us to override the chart.ctx instance field which zoom plugin uses for adding event listeners\ntype MutableContext<T> = Omit<Chart, \"ctx\"> & { ctx: T };\n\nfunction addEventListener(emitter: EventEmitter) {\n  return (eventName: string, fn?: () => void) => {\n    const existing = emitter.listeners(eventName);\n    if (!fn || existing.includes(fn)) {\n      return;\n    }\n\n    emitter.on(eventName, fn);\n  };\n}\n\nfunction removeEventListener(emitter: EventEmitter) {\n  return (eventName: string, fn?: () => void) => {\n    if (fn) {\n      emitter.off(eventName, fn);\n    }\n  };\n}\n\ntype ZoomableChart = Chart & {\n  $zoom: {\n    panStartHandler(event: HammerInput): void;\n    panHandler(event: HammerInput): void;\n    panEndHandler(event: HammerInput): void;\n  };\n};\n\nexport default class ChartJSManager {\n  #chartInstance?: Chart;\n  #fakeNodeEvents = new EventEmitter();\n  #fakeDocumentEvents = new EventEmitter();\n  #lastDatalabelClickContext?: DatalabelContext;\n\n  public constructor(initOpts: InitOpts) {\n    log.info(`new ChartJSManager(id=${initOpts.id})`);\n    void this.init(initOpts);\n  }\n\n  public async init({\n    id,\n    node,\n    type,\n    data,\n    options,\n    devicePixelRatio,\n    fontLoaded,\n  }: InitOpts): Promise<void> {\n    const font = await fontLoaded;\n    log.debug(`ChartJSManager(${id}) init, default font \"${font.family}\" status=${font.status}`);\n\n    const fakeNode = {\n      addEventListener: addEventListener(this.#fakeNodeEvents),\n      removeEventListener: removeEventListener(this.#fakeNodeEvents),\n      ownerDocument: {\n        addEventListener: addEventListener(this.#fakeDocumentEvents),\n        removeEventListener: removeEventListener(this.#fakeDocumentEvents),\n      },\n    };\n\n    const origZoomStart = ZoomPlugin.start?.bind(ZoomPlugin);\n    ZoomPlugin.start = (chartInstance: MutableContext<unknown>, args, pluginOptions) => {\n      // swap the canvas with our fake dom node canvas to support zoom plugin addEventListener\n      const ctx = chartInstance.ctx;\n      chartInstance.ctx = {\n        canvas: fakeNode,\n      };\n      const res = origZoomStart?.(chartInstance as Chart, args, pluginOptions);\n      chartInstance.ctx = ctx;\n      return res;\n    };\n\n    const fullOptions: ChartOptions = {\n      ...this.#addFunctionsToConfig(options),\n      devicePixelRatio,\n      font: { family: fonts.MONOSPACE },\n      // we force responsive off since we manually trigger width/height updates on the chart\n      // responsive mode does not work properly with offscreen canvases and retina device pixel ratios\n      // it results in a run-away canvas that keeps doubling in size!\n      responsive: false,\n    };\n\n    const chartInstance = new Chart(node, {\n      type,\n      data,\n      options: fullOptions,\n      plugins: [DatalabelPlugin, ZoomPlugin],\n    });\n\n    ZoomPlugin.start = origZoomStart;\n    this.#chartInstance = chartInstance;\n  }\n\n  public wheel(event: WheelEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this.#fakeNodeEvents.emit(\"wheel\", event);\n    return this.getScales();\n  }\n\n  public mousedown(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this.#fakeNodeEvents.emit(\"mousedown\", event);\n    return this.getScales();\n  }\n\n  public mousemove(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this.#fakeNodeEvents.emit(\"mousemove\", event);\n    return this.getScales();\n  }\n\n  public mouseup(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this.#fakeDocumentEvents.emit(\"mouseup\", event);\n    return this.getScales();\n  }\n\n  public panstart(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this.#chartInstance)?.$zoom.panStartHandler(event);\n    return this.getScales();\n  }\n\n  public panmove(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this.#chartInstance)?.$zoom.panHandler(event);\n    return this.getScales();\n  }\n\n  public panend(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this.#chartInstance)?.$zoom.panEndHandler(event);\n    return this.getScales();\n  }\n\n  public update({\n    options,\n    width,\n    height,\n    isBoundsReset,\n    data,\n  }: {\n    options?: ChartOptions;\n    width?: number;\n    height?: number;\n    isBoundsReset: boolean;\n    data?: ChartData<\"scatter\">;\n  }): RpcScales {\n    const instance = this.#chartInstance;\n    if (instance == undefined) {\n      return {};\n    }\n\n    if (options != undefined) {\n      instance.options.plugins = this.#addFunctionsToConfig(options).plugins;\n\n      // Let the chart manage its own scales unless we've been told to reset or if an explicit\n      // min and max have been specified.\n      const scales = options.scales ?? {};\n      if (\n        (isBoundsReset || (scales.x?.min != undefined && scales.x.max != undefined)) &&\n        instance.options.scales\n      ) {\n        instance.options.scales.x = scales.x;\n      }\n      if (\n        (isBoundsReset || (scales.y?.min != undefined && scales.y.max != undefined)) &&\n        instance.options.scales\n      ) {\n        instance.options.scales.y = scales.y;\n      }\n    }\n\n    if (width != undefined || height != undefined) {\n      let shouldResize = false;\n      const wholeWidth = Math.floor(width ?? instance.width);\n      const wholeHeight = Math.floor(height ?? instance.height);\n\n      // Internally chartjs rounds width and height before updating the instance.\n      // If our update has decimal width and height that will cause a resize on every update.\n      // To avoid this we truncate the decimal from the width and height to present chartjs with whole\n      // numbers.\n      if (width != undefined) {\n        if (Math.abs(instance.width - wholeWidth) > Number.EPSILON) {\n          instance.canvas.width = wholeWidth;\n          shouldResize = true;\n        }\n      }\n\n      if (height != undefined) {\n        if (Math.abs(instance.height - wholeHeight) > Number.EPSILON) {\n          instance.canvas.height = wholeHeight;\n          shouldResize = true;\n        }\n      }\n\n      if (shouldResize) {\n        instance.resize(wholeWidth, wholeHeight);\n      }\n    }\n\n    if (data != undefined) {\n      instance.data = data;\n    }\n\n    // While the chartjs API doesn't indicate update should be called after resize, in practice\n    // we've found that performing a resize after an update sometimes results in a blank chart.\n    //\n    // NOTE: \"none\" disables animations - this is important for chart performance because we update\n    // the entire data set which does not preserve history for the chart animations\n    instance.update(\"none\");\n\n    return this.getScales();\n  }\n\n  public destroy(): void {\n    this.#chartInstance?.destroy();\n  }\n\n  public getElementsAtEvent({ event }: { event: MouseEvent }): RpcElement[] {\n    const ev = {\n      native: true,\n      x: event.clientX,\n      y: event.clientY,\n    };\n\n    // ev is cast to any because the typings for getElementsAtEventForMode are wrong\n    // ev is specified as a dom Event - but the implementation does not require it for the basic platform\n    const elements =\n      this.#chartInstance?.getElementsAtEventForMode(\n        ev as unknown as Event,\n        this.#chartInstance.options.interaction?.mode ?? \"intersect\",\n        this.#chartInstance.options.interaction ?? {},\n        false,\n      ) ?? [];\n\n    const out = new Array<RpcElement>();\n\n    for (const element of elements) {\n      const data = (this.#chartInstance?.data as ChartData<\"scatter\"> | undefined)?.datasets[\n        element.datasetIndex\n      ]?.data[element.index];\n      if (data == undefined || typeof data === \"number\") {\n        continue;\n      }\n\n      // turn into an object we can send over the rpc\n      out.push({\n        data,\n        datasetIndex: element.datasetIndex,\n        index: element.index,\n        view: {\n          x: element.element.x,\n          y: element.element.y,\n        },\n      });\n    }\n\n    // sort elements by proximity to the cursor\n    out.sort((itemA, itemB) => {\n      const dxA = event.clientX - itemA.view.x;\n      const dyA = event.clientY - itemA.view.y;\n      const dxB = event.clientX - itemB.view.x;\n      const dyB = event.clientY - itemB.view.y;\n      const distSquaredA = dxA * dxA + dyA * dyA;\n      const distSquaredB = dxB * dxB + dyB * dyB;\n\n      return distSquaredA - distSquaredB;\n    });\n\n    return out;\n  }\n\n  public getDatalabelAtEvent({ event }: { event: Event }): unknown {\n    this.#chartInstance?.notifyPlugins(\"beforeEvent\", { event });\n\n    // clear the stored click context - we have consumed it\n    const context = this.#lastDatalabelClickContext;\n    this.#lastDatalabelClickContext = undefined;\n\n    return context?.dataset.data[context.dataIndex];\n  }\n\n  // get the current chart scales in an rpc friendly format\n  // all rpc methods return the current chart scale since that is the main thing that could change automatically\n  public getScales(): RpcScales {\n    const scales: RpcScales = {};\n\n    // fill our rpc scales - we only support x and y scales for now\n    const xScale = this.#chartInstance?.scales.x;\n    if (xScale) {\n      scales.x = {\n        pixelMin: xScale.left,\n        pixelMax: xScale.right,\n        min: xScale.min,\n        max: xScale.max,\n      };\n    }\n\n    const yScale = this.#chartInstance?.scales.y;\n    if (yScale) {\n      scales.y = {\n        pixelMin: yScale.bottom,\n        pixelMax: yScale.top,\n        min: yScale.min,\n        max: yScale.max,\n      };\n    }\n\n    return scales;\n  }\n\n  // We cannot serialize functions over rpc, we add options that require functions here\n  #addFunctionsToConfig(config: ChartOptions): typeof config {\n    const datalabelsOptions = config.plugins?.datalabels as DatalabelsPluginOptions | undefined;\n    if (datalabelsOptions) {\n      // process _click_ events to get the label we clicked on\n      // this is because datalabels does not export any public methods to lookup the clicked label\n      // maybe we contribute a patch upstream with the explanation for web-worker use\n      datalabelsOptions.listeners = {\n        click: (context: DatalabelContext) => {\n          this.#lastDatalabelClickContext = context;\n        },\n      };\n\n      // Only display labels for datapoints that include a \"label\" property\n      datalabelsOptions.formatter = (value: { label?: string }, _context: unknown) => {\n        // Return \"null\" if we don't want this label to be displayed.\n        // Returning \"undefined\" falls back to the default formatting and will display\n        // eslint-disable-next-line no-restricted-syntax\n        return value.label ?? null;\n      };\n\n      // Override color so that it can be set per-dataset.\n      const staticColor = datalabelsOptions.color ?? \"white\";\n      datalabelsOptions.color = (context: DatalabelContext) => {\n        const value = context.dataset.data[context.dataIndex];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (value as any)?.labelColor ?? staticColor;\n      };\n    }\n\n    return config;\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport {\n  CategoryScale,\n  Chart,\n  ChartData,\n  ChartOptions,\n  Filler,\n  Legend,\n  LinearScale,\n  LineController,\n  LineElement,\n  PointElement,\n  ScatterController,\n  Ticks,\n  TimeScale,\n  TimeSeriesScale,\n  Title,\n  Tooltip,\n} from \"chart.js\";\nimport AnnotationPlugin from \"chartjs-plugin-annotation\";\n\nimport PlexMono from \"@foxglove/studio-base/styles/assets/PlexMono.woff2\";\nimport Rpc from \"@foxglove/studio-base/util/Rpc\";\nimport { setupWorker } from \"@foxglove/studio-base/util/RpcWorkerUtils\";\n\nimport ChartJSManager, { InitOpts } from \"./ChartJSManager\";\n\ntype RpcEvent<EventType> = { id: string; event: EventType };\n\nexport type ChartUpdateMessage = {\n  data?: ChartData<\"scatter\">;\n  height?: number;\n  options?: ChartOptions;\n  isBoundsReset: boolean;\n  width?: number;\n};\n\ntype RpcUpdateEvent = {\n  id: string;\n} & ChartUpdateMessage;\n\n// Explicitly load the \"Plex Mono\" font, since custom fonts from the main renderer are not inherited\n// by web workers. This is required to draw \"Plex Mono\" on an OffscreenCanvas, and it also appears\n// to fix a crash a large portion of Windows users were seeing where the rendering thread would\n// crash in skia code related to DirectWrite font loading when the system display scaling is set\n// >100%. For more info on this crash, see util/waitForFonts.ts.\nasync function loadDefaultFont(): Promise<FontFace> {\n  const fontFace = new FontFace(\"IBM Plex Mono\", `url(${PlexMono}) format('woff2')`);\n  if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n    (self as unknown as WorkerGlobalScope).fonts.add(fontFace);\n  } else {\n    document.fonts.add(fontFace);\n  }\n  return await fontFace.load();\n}\n\n// Immediately start font loading in the Worker thread. Each ChartJSManager we instantiate will\n// wait on this promise before instantiating a new Chart instance, which kicks off rendering\nconst fontLoaded = loadDefaultFont();\n\n// Register the features we support globally on our chartjs instance\n// Note: Annotation plugin must be registered, it does not work _inline_ (i.e. per instance)\nChart.register(\n  LineElement,\n  PointElement,\n  LineController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  AnnotationPlugin,\n);\n\nconst fixedNumberFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n/**\n * Adjust the `ticks` of the chart options to ensure the first/last x labels remain a constant\n * width. See https://github.com/foxglove/studio/issues/2926\n *\n * Because this requires passing a `callback` function for the tick options, this has to be done in\n * the worker, since functions can't be sent via postMessage.\n */\nfunction fixTicks(args: RpcUpdateEvent): RpcUpdateEvent {\n  const xScale = args.options?.scales?.x;\n\n  if (xScale?.ticks) {\n    xScale.ticks.callback = function (value, index, ticks) {\n      // use a fixed formatter for the first/last ticks\n      if (index === 0 || index === ticks.length - 1) {\n        return fixedNumberFormat.format(value as number);\n      }\n      // otherwise use chart.js's default formatter\n      return Ticks.formatters.numeric.apply(this, [value as number, index, ticks]);\n    };\n  }\n  return args;\n}\n\n// Since we use a capped number of web-workers, a single web-worker may be running multiple chartjs instances\n// The ChartJsWorkerMux forwards an rpc request for a specific chartjs instance id to the appropriate instance\nexport default class ChartJsMux {\n  readonly #rpc: Rpc;\n  readonly #managers = new Map<string, ChartJSManager>();\n\n  public constructor(rpc: Rpc) {\n    this.#rpc = rpc;\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      setupWorker(this.#rpc);\n    }\n\n    // create a new chartjs instance\n    // this must be done before sending any other rpc requests to the instance\n    rpc.receive(\"initialize\", (args: InitOpts) => {\n      args.fontLoaded = fontLoaded;\n      const manager = new ChartJSManager(args);\n      this.#managers.set(args.id, manager);\n      return manager.getScales();\n    });\n    rpc.receive(\"wheel\", (args: RpcEvent<WheelEvent>) => this.#getChart(args.id).wheel(args.event));\n    rpc.receive(\"mousedown\", (args: RpcEvent<MouseEvent>) =>\n      this.#getChart(args.id).mousedown(args.event),\n    );\n    rpc.receive(\"mousemove\", (args: RpcEvent<MouseEvent>) =>\n      this.#getChart(args.id).mousemove(args.event),\n    );\n    rpc.receive(\"mouseup\", (args: RpcEvent<MouseEvent>) =>\n      this.#getChart(args.id).mouseup(args.event),\n    );\n    rpc.receive(\"panstart\", (args: RpcEvent<HammerInput>) =>\n      this.#getChart(args.id).panstart(args.event),\n    );\n    rpc.receive(\"panend\", (args: RpcEvent<HammerInput>) =>\n      this.#getChart(args.id).panend(args.event),\n    );\n    rpc.receive(\"panmove\", (args: RpcEvent<HammerInput>) =>\n      this.#getChart(args.id).panmove(args.event),\n    );\n\n    rpc.receive(\"update\", (args: RpcUpdateEvent) => this.#getChart(args.id).update(fixTicks(args)));\n    rpc.receive(\"destroy\", (args: RpcEvent<void>) => {\n      const manager = this.#managers.get(args.id);\n      if (manager) {\n        manager.destroy();\n        this.#managers.delete(args.id);\n      }\n    });\n    rpc.receive(\"getElementsAtEvent\", (args: RpcEvent<MouseEvent>) =>\n      this.#getChart(args.id).getElementsAtEvent(args),\n    );\n    rpc.receive(\"getDatalabelAtEvent\", (args: RpcEvent<Event>) =>\n      this.#getChart(args.id).getDatalabelAtEvent(args),\n    );\n  }\n\n  #getChart(id: string): ChartJSManager {\n    const chart = this.#managers.get(id);\n    if (!chart) {\n      throw new Error(`Could not find chart with id ${id}`);\n    }\n    return chart;\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport sendNotification, {\n  DetailsType,\n  NotificationSeverity,\n  NotificationType,\n} from \"@foxglove/studio-base/util/sendNotification\";\n\nimport Rpc from \"./Rpc\";\n\n// This function should be called inside the parent thread; it sets up receiving a message from the worker thread and\n// calling sendNotification.\nexport function setupReceiveReportErrorHandler(rpc: Rpc): void {\n  rpc.receive(\n    \"sendNotification\",\n    ({\n      message,\n      details,\n      type,\n      severity,\n    }: {\n      message: string;\n      details: DetailsType;\n      type: NotificationType;\n      severity: NotificationSeverity;\n    }) => {\n      sendNotification(message, details, type, severity);\n    },\n  );\n}\n\nexport function setupMainThreadRpc(rpc: Rpc): void {\n  setupReceiveReportErrorHandler(rpc);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport findIndex from \"lodash/findIndex\";\nimport sortBy from \"lodash/sortBy\";\n\nimport Rpc, { Channel } from \"@foxglove/studio-base/util/Rpc\";\nimport { setupMainThreadRpc } from \"@foxglove/studio-base/util/RpcMainThreadUtils\";\n\n// This file provides a convenient way to set up and tear down workers as needed. It will create only a single worker\n// of each class, and terminate the worker when all listeners are unregistered.\n\ntype WorkerListenerState<W> = { rpc: Rpc; worker: W; listenerIds: string[] };\n\nexport default class WebWorkerManager<W extends Channel> {\n  #createWorker: () => W;\n  #maxWorkerCount: number;\n  #workerStates: (WorkerListenerState<W> | undefined)[];\n  #allListeners: Set<string>;\n\n  public constructor(createWorker: () => W, maxWorkerCount: number) {\n    this.#createWorker = createWorker;\n    this.#maxWorkerCount = maxWorkerCount;\n    this.#workerStates = new Array(maxWorkerCount);\n    this.#allListeners = new Set();\n  }\n\n  public testing_workerCount(): number {\n    return this.#workerStates.filter(Boolean).length;\n  }\n\n  public testing_getWorkerState(id: string): WorkerListenerState<W> | undefined {\n    return this.#workerStates.find((workerState) => workerState?.listenerIds.includes(id));\n  }\n\n  public registerWorkerListener(id: string): Rpc {\n    if (this.#allListeners.has(id)) {\n      throw new Error(\"cannot register the same listener id twice\");\n    }\n    this.#allListeners.add(id);\n\n    const currentWorkerCount = this.#workerStates.filter(Boolean).length;\n    if (currentWorkerCount < this.#maxWorkerCount) {\n      const worker = this.#createWorker();\n      const rpc = new Rpc(worker);\n      setupMainThreadRpc(rpc);\n\n      const emptyIndex = findIndex(this.#workerStates, (x) => !x);\n      this.#workerStates[emptyIndex] = { worker, rpc, listenerIds: [id] };\n      return rpc;\n    }\n    const workerStateByListenerCount = sortBy(\n      this.#workerStates.filter(Boolean),\n      (workerState) => workerState?.listenerIds.length,\n    );\n    const workerState = workerStateByListenerCount[0];\n    if (!workerState) {\n      throw new Error(\"no worker state\");\n    }\n    workerState.listenerIds.push(id);\n    return workerState.rpc;\n  }\n\n  public unregisterWorkerListener(id: string): void {\n    if (!this.#allListeners.has(id)) {\n      throw new Error(\"Cannot find listener to unregister\");\n    }\n    this.#allListeners.delete(id);\n\n    const workerStateIndex = findIndex(this.#workerStates, (workerState) => {\n      if (!workerState) {\n        return false;\n      }\n      return workerState.listenerIds.includes(id);\n    });\n    const workerState = this.#workerStates[workerStateIndex];\n    if (workerStateIndex >= 0 && workerState) {\n      workerState.listenerIds = workerState.listenerIds.filter((_id) => _id !== id);\n      if (workerState.listenerIds.length === 0) {\n        this.#workerStates[workerStateIndex] = undefined;\n        workerState.worker.terminate();\n        workerState.rpc.terminate();\n      }\n    }\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\n// These modules declaration merge into chart.js declarations for plugins\n// Since we don't use the modules directly in this file, we need to load the types as references\n// so typescript will have the merged declarations.\n/// <reference types=\"chartjs-plugin-datalabels\" />\n/// <reference types=\"@foxglove/chartjs-plugin-zoom\" />\n\nimport { ChartOptions } from \"chart.js\";\nimport Hammer from \"hammerjs\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport { useMountedState } from \"react-use\";\nimport { assert } from \"ts-essentials\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { type ZoomPluginOptions } from \"@foxglove/chartjs-plugin-zoom/types/options\";\nimport Logger from \"@foxglove/log\";\nimport ChartJsMux, {\n  ChartUpdateMessage,\n} from \"@foxglove/studio-base/components/Chart/worker/ChartJsMux\";\nimport Rpc, { createLinkedChannels } from \"@foxglove/studio-base/util/Rpc\";\nimport WebWorkerManager from \"@foxglove/studio-base/util/WebWorkerManager\";\nimport { mightActuallyBePartial } from \"@foxglove/studio-base/util/mightActuallyBePartial\";\n\nimport { ChartData, RpcElement, RpcScales } from \"./types\";\n\nconst log = Logger.getLogger(__filename);\n\nfunction makeChartJSWorker() {\n  // foxglove-depcheck-used: babel-plugin-transform-import-meta\n  return new Worker(new URL(\"./worker/main\", import.meta.url));\n}\n\nexport type OnClickArg = {\n  datalabel?: unknown;\n  // x-value in scale\n  x: number | undefined;\n  // y-value in scale\n  y: number | undefined;\n};\n\ntype Props = {\n  data: ChartData;\n  options: ChartOptions;\n  isBoundsReset: boolean;\n  type: \"scatter\";\n  height: number;\n  width: number;\n  onClick?: (params: OnClickArg) => void;\n\n  // called when the chart scales have updated (happens for zoom/pan/reset)\n  onScalesUpdate?: (scales: RpcScales, opt: { userInteraction: boolean }) => void;\n\n  // called when the chart is about to start rendering new data\n  onStartRender?: () => void;\n\n  // called when the chart has finished updating with new data\n  onFinishRender?: () => void;\n\n  // called when a user hovers over an element\n  // uses the chart.options.hover configuration\n  onHover?: (elements: RpcElement[]) => void;\n};\n\nconst devicePixelRatio = mightActuallyBePartial(window).devicePixelRatio ?? 1;\n\nconst webWorkerManager = new WebWorkerManager(makeChartJSWorker, 4);\n\n// turn a React.MouseEvent into an object we can send over rpc\nfunction rpcMouseEvent(event: React.MouseEvent<HTMLElement>) {\n  const boundingRect = event.currentTarget.getBoundingClientRect();\n\n  return {\n    cancelable: false,\n    clientX: event.clientX - boundingRect.left,\n    clientY: event.clientY - boundingRect.top,\n    target: {\n      boundingClientRect: boundingRect.toJSON(),\n    },\n  };\n}\n\ntype RpcSend = <T>(\n  topic: string,\n  payload?: Record<string, unknown>,\n  transferables?: Transferable[],\n) => Promise<T>;\n\n// Chart component renders data using workers with chartjs offscreen canvas\n\nconst supportsOffscreenCanvas =\n  typeof HTMLCanvasElement.prototype.transferControlToOffscreen === \"function\";\n\nfunction Chart(props: Props): JSX.Element {\n  const [id] = useState(() => uuidv4());\n\n  const initialized = useRef(false);\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const containerRef = useRef<HTMLDivElement>(ReactNull);\n  const isMounted = useMountedState();\n\n  // to avoid changing useCallback deps for callbacks which access the scale value\n  // at the time they are invoked\n  const currentScalesRef = useRef<RpcScales | undefined>();\n\n  const zoomEnabled =\n    (props.options.plugins?.zoom as ZoomPluginOptions | undefined)?.zoom?.enabled ?? false;\n  const panEnabled =\n    (props.options.plugins?.zoom as ZoomPluginOptions | undefined)?.pan?.enabled ?? false;\n\n  const { type, data, isBoundsReset, options, width, height, onStartRender, onFinishRender } =\n    props;\n\n  const sendWrapperRef = useRef<RpcSend | undefined>();\n  const rpcSendRef = useRef<RpcSend | undefined>();\n\n  const hasPannedSinceMouseDown = useRef(false);\n  const previousUpdateMessage = useRef<Record<string, unknown>>({});\n\n  useLayoutEffect(() => {\n    log.info(`Register Chart ${id}`);\n    let rpc: Rpc;\n    if (supportsOffscreenCanvas) {\n      rpc = webWorkerManager.registerWorkerListener(id);\n    } else {\n      const { local, remote } = createLinkedChannels();\n      new ChartJsMux(new Rpc(remote));\n      rpc = new Rpc(local);\n    }\n\n    // helper function to send rpc to our worker - all invocations need an _id_ so we inject it here\n    const sendWrapper = async <T,>(\n      topic: string,\n      payload?: Record<string, unknown>,\n      transferables?: Transferable[],\n    ) => {\n      return await rpc.send<T>(topic, { id, ...payload }, transferables);\n    };\n\n    // store the send wrapper so it can be set to rpcSendRef once initialization occurs\n    sendWrapperRef.current = sendWrapper;\n\n    return () => {\n      log.info(`Unregister chart ${id}`);\n      sendWrapper(\"destroy\").catch(() => {}); // may fail if worker is torn down\n      rpcSendRef.current = undefined;\n      sendWrapperRef.current = undefined;\n      initialized.current = false;\n      previousUpdateMessage.current = {};\n      canvasRef.current?.remove();\n      canvasRef.current = undefined;\n      if (supportsOffscreenCanvas) {\n        webWorkerManager.unregisterWorkerListener(id);\n      }\n    };\n  }, [id]);\n\n  // trigger when scales update\n  const onScalesUpdateRef = useRef(props.onScalesUpdate);\n  onScalesUpdateRef.current = props.onScalesUpdate;\n\n  const maybeUpdateScales = useCallback(\n    (newScales: RpcScales, opt?: { userInteraction: boolean }) => {\n      if (!isMounted()) {\n        return;\n      }\n\n      const oldScales = currentScalesRef.current;\n      currentScalesRef.current = newScales;\n\n      // cheap hack to only update the scales when the values change\n      // avoids triggering handlers that depend on scales\n      const oldStr = JSON.stringify(oldScales);\n      const newStr = JSON.stringify(newScales);\n      if (oldStr !== newStr) {\n        onScalesUpdateRef.current?.(newScales, opt ?? { userInteraction: false });\n      }\n    },\n    [isMounted],\n  );\n\n  // getNewUpdateMessage returns an update message for the changed fields from the last\n  // call to get an update message\n  //\n  // The purpose of this mechanism is to avoid sending data/options/size to the worker\n  // if they are unchanged from a previous initialization or update.\n  const getNewUpdateMessage = useCallback(() => {\n    const prev = previousUpdateMessage.current;\n    const out: Partial<ChartUpdateMessage> = {};\n\n    // NOTE(Roman): I don't know why this happens but when I initialize a chart using some data\n    // and width/height of 0. Even when I later send an update for correct width/height the chart\n    // does not render.\n    //\n    // The workaround here is to avoid sending any initialization or update messages until we have\n    // a width and height that are non-zero\n    if (width === 0 || height === 0) {\n      return undefined;\n    }\n\n    if (prev.data !== data) {\n      prev.data = out.data = data;\n    }\n    if (prev.options !== options) {\n      prev.options = out.options = options;\n    }\n    if (prev.height !== height) {\n      prev.height = out.height = height;\n    }\n    if (prev.width !== width) {\n      prev.width = out.width = width;\n    }\n\n    out.isBoundsReset = isBoundsReset;\n\n    // nothing to update\n    if (Object.keys(out).length === 0) {\n      return;\n    }\n\n    return out;\n  }, [data, height, options, isBoundsReset, width]);\n\n  // Update the chart with a new set of data\n  const updateChart = useCallback(\n    async (update: Partial<ChartUpdateMessage>) => {\n      // first time initialization\n      if (!initialized.current) {\n        assert(canvasRef.current == undefined, \"Canvas has already been initialized\");\n        assert(containerRef.current, \"No container ref\");\n        assert(sendWrapperRef.current, \"No RPC\");\n\n        const canvas = document.createElement(\"canvas\");\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"100%\";\n        canvas.width = update.width ?? 0;\n        canvas.height = update.height ?? 0;\n        containerRef.current.appendChild(canvas);\n\n        canvasRef.current = canvas;\n        initialized.current = true;\n\n        onStartRender?.();\n        const offscreenCanvas =\n          typeof canvas.transferControlToOffscreen === \"function\"\n            ? canvas.transferControlToOffscreen()\n            : canvas;\n        const scales = await sendWrapperRef.current<RpcScales>(\n          \"initialize\",\n          {\n            node: offscreenCanvas,\n            type,\n            data: update.data,\n            options: update.options,\n            devicePixelRatio,\n            width: update.width,\n            height: update.height,\n          },\n          [\n            // If this is actually a HTMLCanvasElement then it will not be transferred because we\n            // don't use a worker\n            offscreenCanvas as OffscreenCanvas,\n          ],\n        );\n\n        // once we are initialized, we can allow other handlers to send to the rpc endpoint\n        rpcSendRef.current = sendWrapperRef.current;\n\n        maybeUpdateScales(scales);\n        onFinishRender?.();\n        return;\n      }\n\n      assert(rpcSendRef.current, \"No RPC\");\n\n      onStartRender?.();\n      const scales = await rpcSendRef.current<RpcScales>(\"update\", update);\n      maybeUpdateScales(scales);\n      onFinishRender?.();\n    },\n    [maybeUpdateScales, onFinishRender, onStartRender, type],\n  );\n\n  // Prevent updating the chart if we are already updating the chart to avoid backing up stale updates\n  const running = useRef(false);\n  const [updateError, setUpdateError] = useState<Error | undefined>();\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    // Do we want to queue up this change or do we assume another update will trigger it\n    if (running.current) {\n      return;\n    }\n\n    setUpdateError(undefined);\n\n    const newUpdate = getNewUpdateMessage();\n    if (!newUpdate) {\n      return;\n    }\n\n    running.current = true;\n    updateChart(newUpdate)\n      .catch((err: Error) => {\n        if (isMounted()) {\n          setUpdateError(err);\n        }\n      })\n      .finally(() => {\n        running.current = false;\n      });\n  }, [getNewUpdateMessage, isMounted, updateChart]);\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    if (!container || !panEnabled) {\n      return;\n    }\n\n    const hammerManager = new Hammer.Manager(container);\n    const threshold = props.options.plugins?.zoom?.pan?.threshold ?? 10;\n    hammerManager.add(new Hammer.Pan({ threshold }));\n\n    hammerManager.on(\"panstart\", async (event) => {\n      hasPannedSinceMouseDown.current = true;\n\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      await rpcSendRef.current<RpcScales>(\"panstart\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          center: {\n            x: event.center.x,\n            y: event.center.y,\n          },\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n    });\n\n    hammerManager.on(\"panmove\", async (event) => {\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"panmove\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    });\n\n    hammerManager.on(\"panend\", async (event) => {\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"panend\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    });\n\n    return () => {\n      hammerManager.destroy();\n    };\n  }, [maybeUpdateScales, panEnabled, props.options.plugins?.zoom?.pan?.threshold]);\n\n  const onWheel = useCallback(\n    async (event: React.WheelEvent<HTMLElement>) => {\n      if (!zoomEnabled || !rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.currentTarget.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"wheel\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          clientX: event.clientX,\n          clientY: event.clientY,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    },\n    [zoomEnabled, maybeUpdateScales],\n  );\n\n  const onMouseDown = useCallback(\n    async (event: React.MouseEvent<HTMLElement>) => {\n      hasPannedSinceMouseDown.current = false;\n\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const scales = await rpcSendRef.current<RpcScales>(\"mousedown\", {\n        event: rpcMouseEvent(event),\n      });\n\n      maybeUpdateScales(scales);\n    },\n    [maybeUpdateScales],\n  );\n\n  const onMouseUp = useCallback(async (event: React.MouseEvent<HTMLElement>) => {\n    if (!rpcSendRef.current) {\n      return;\n    }\n\n    return await rpcSendRef.current(\"mouseup\", {\n      event: rpcMouseEvent(event),\n    });\n  }, []);\n\n  // Since hover events are handled via rpc, we might get a response back when we've\n  // already hovered away from the chart. We gate calling onHover by whether the mouse is still\n  // present on the component\n  const mousePresentRef = useRef(false);\n\n  const { onHover } = props;\n  const onMouseMove = useCallback(\n    async (event: React.MouseEvent<HTMLElement>) => {\n      mousePresentRef.current = true; // The mouse must be present if we're getting this event.\n\n      if (onHover == undefined || rpcSendRef.current == undefined) {\n        return;\n      }\n\n      const elements = await rpcSendRef.current<RpcElement[]>(\"getElementsAtEvent\", {\n        event: rpcMouseEvent(event),\n      });\n\n      // Check mouse presence again in case the mouse has left the canvas while we\n      // were waiting for the RPC call.\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (isMounted() && mousePresentRef.current) {\n        onHover(elements);\n      }\n    },\n    [onHover, isMounted],\n  );\n\n  const onMouseEnter = useCallback(() => {\n    mousePresentRef.current = true;\n  }, []);\n\n  const onMouseLeave = useCallback(() => {\n    mousePresentRef.current = false;\n    onHover?.([]);\n  }, [onHover]);\n\n  const onClick = useCallback(\n    async (event: React.MouseEvent<HTMLElement>): Promise<void> => {\n      if (\n        !props.onClick ||\n        !rpcSendRef.current ||\n        !isMounted() ||\n        hasPannedSinceMouseDown.current // Don't send click event if it was part of a pan gesture.\n      ) {\n        return;\n      }\n\n      const rect = event.currentTarget.getBoundingClientRect();\n      const mouseX = event.clientX - rect.left;\n      const mouseY = event.clientY - rect.top;\n\n      // maybe we should forward the click event and add support for datalabel listeners\n      // the rpc channel doesn't have a way to send rpc back...\n      const datalabel = await rpcSendRef.current(\"getDatalabelAtEvent\", {\n        event: { x: mouseX, y: mouseY, type: \"click\" },\n      });\n\n      let xVal: number | undefined;\n      let yVal: number | undefined;\n\n      const xScale = currentScalesRef.current?.x;\n      if (xScale) {\n        const pixels = xScale.pixelMax - xScale.pixelMin;\n        const range = xScale.max - xScale.min;\n        xVal = (range / pixels) * (mouseX - xScale.pixelMin) + xScale.min;\n      }\n\n      const yScale = currentScalesRef.current?.y;\n      if (yScale) {\n        const pixels = yScale.pixelMax - yScale.pixelMin;\n        const range = yScale.max - yScale.min;\n        yVal = (range / pixels) * (mouseY - yScale.pixelMin) + yScale.min;\n      }\n\n      props.onClick({\n        datalabel,\n        x: xVal,\n        y: yVal,\n      });\n    },\n    [isMounted, props],\n  );\n\n  if (updateError) {\n    throw updateError;\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      onWheel={onWheel}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onMouseEnter={onMouseEnter}\n      onMouseUp={onMouseUp}\n      style={{ width, height, cursor: \"crosshair\", position: \"relative\" }}\n    />\n  );\n}\n\nexport default Chart;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport type { ChartDataset, ChartDatum } from \"./types\";\n\ntype DownsampleBounds = {\n  width: number;\n  height: number;\n  x: { min: number; max: number };\n  y: { min: number; max: number };\n};\n\n/**\n * Downsample a timeseries dataset\n *\n * This function assumes the dataset x axis time and sorted.\n *\n * The downsampled data preserves the shape of the original data. The algorithm does this by\n * downsampling within an interval. Each interval tracks the first datum of the interval,\n * minimum y-value datum, maximum y-value datum, and the last datum of the interval.\n *\n * For each datum within the dataset, we determine first if it falls within the current interval.\n * - If the datum falls within the current interval we update the min/max y or last values. Then move\n *   to the next datum.\n * - If the datum falls outside the current interval, we determine whether to add the min/max and\n *   last datum to the downsampled dataset, and then move to the next datum.\n * - If first/min/max/last are all the same datum, then only one datum appears in the downsampled\n *   dataset.\n *\n * By tracking the first/min/max/last within an interval, the shape of the original data is preserved.\n * Points before the interval connect into the interval with the same slope line as the original\n * dataset, and the interval connects to the next interval with the same slope line as the original\n * data. The min/max entries preserve spikes within the data.\n */\nexport function downsampleTimeseries(\n  dataset: ChartDataset,\n  bounds: DownsampleBounds,\n): ChartDataset {\n  // datasets of length 1 don't need downsampling\n  if (dataset.data.length <= 1) {\n    return dataset;\n  }\n\n  const pixelPerXValue = bounds.width / (bounds.x.max - bounds.x.min);\n  const pixelPerYValue = bounds.height / (bounds.y.max - bounds.y.min);\n\n  const downsampled: ChartDatum[] = [];\n\n  type IntervalItem = { xPixel: number; yPixel: number; datum: ChartDatum };\n\n  let intFirst: IntervalItem | undefined;\n  let intLast: IntervalItem | undefined;\n  let intMin: IntervalItem | undefined;\n  let intMax: IntervalItem | undefined;\n\n  // We keep points within a buffer window around the bounds so points near the bounds are\n  // connected to their peers and available for pan/zoom.\n  // Points outside this buffer window are dropped.\n  const xRange = bounds.x.max - bounds.x.min;\n  const minX = bounds.x.min - xRange * 0.5;\n  const maxX = bounds.x.max + xRange * 0.5;\n\n  let firstPastBounds: (typeof dataset.data)[0] | undefined = undefined;\n\n  for (const datum of dataset.data) {\n    if (!datum) {\n      continue;\n    }\n\n    // track the first point before our bounds\n    if (datum.x < minX) {\n      if (downsampled.length === 0) {\n        downsampled.push(datum);\n      } else {\n        // the first point outside our bounds will always be at index 0\n        downsampled[0] = datum;\n      }\n      continue;\n    }\n\n    // track the first point outside of our bounds\n    if (datum.x > maxX) {\n      firstPastBounds = datum;\n      continue;\n    }\n\n    // Benchmarking shows, at least as of the time of this writing, that Math.trunc is\n    // *much* faster than Math.round on this data.\n    const x = Math.trunc(datum.x * pixelPerXValue);\n    const y = Math.trunc(datum.y * pixelPerYValue);\n\n    // interval has ended, we determine whether to write additional points for min/max/last\n    if (intFirst?.xPixel !== x) {\n      // add the min value from previous interval if it doesn't match the first or last of that interval\n      if (intMin && intMin.yPixel !== intFirst?.yPixel && intMin.yPixel !== intLast?.yPixel) {\n        downsampled.push(intMin.datum);\n      }\n\n      // add the max value from previous interval if it doesn't match the first or last of that interval\n      if (intMax && intMax.yPixel !== intFirst?.yPixel && intMax.yPixel !== intLast?.yPixel) {\n        downsampled.push(intMax.datum);\n      }\n\n      // add the last value if it doesn't match the first\n      if (intLast && intFirst?.yPixel !== intLast.yPixel) {\n        downsampled.push(intLast.datum);\n      }\n\n      // always add the first datum of an new interval\n      downsampled.push(datum);\n\n      intFirst = { xPixel: x, yPixel: y, datum };\n      intLast = { xPixel: x, yPixel: y, datum };\n      intMin = { xPixel: x, yPixel: y, datum };\n      intMax = { xPixel: x, yPixel: y, datum };\n      continue;\n    }\n\n    intLast ??= { xPixel: x, yPixel: y, datum };\n    intLast.xPixel = x;\n    intLast.yPixel = y;\n    intLast.datum = datum;\n\n    if (intMin && y < intMin.yPixel) {\n      intMin.yPixel = y;\n      intMin.datum = datum;\n    }\n\n    if (intMax && y > intMax.yPixel) {\n      intMax.yPixel = y;\n      intMax.datum = datum;\n    }\n  }\n\n  // add the min value from previous interval if it doesn't match the first or last of that interval\n  if (intMin && intMin.yPixel !== intFirst?.yPixel && intMin.yPixel !== intLast?.yPixel) {\n    downsampled.push(intMin.datum);\n  }\n\n  // add the max value from previous interval if it doesn't match the first or last of that interval\n  if (intMax && intMax.yPixel !== intFirst?.yPixel && intMax.yPixel !== intLast?.yPixel) {\n    downsampled.push(intMax.datum);\n  }\n\n  // add the last value if it doesn't match the first\n  if (intLast && intFirst?.yPixel !== intLast.yPixel) {\n    downsampled.push(intLast.datum);\n  }\n\n  if (firstPastBounds) {\n    downsampled.push(firstPastBounds);\n  }\n\n  return { ...dataset, data: downsampled };\n}\n\nexport function downsampleScatter(dataset: ChartDataset, bounds: DownsampleBounds): ChartDataset {\n  // datasets of length 1 don't need downsampling\n  if (dataset.data.length <= 1) {\n    return dataset;\n  }\n\n  const pixelPerXValue = bounds.width / (bounds.x.max - bounds.x.min);\n  const pixelPerYValue = bounds.height / (bounds.y.max - bounds.y.min);\n  const pixelPerRow = bounds.width;\n\n  const downsampled: ChartDatum[] = [];\n\n  // downsampling tracks a sparse array of x/y locations\n  const sparse: boolean[] = [];\n\n  for (const datum of dataset.data) {\n    if (!datum) {\n      continue;\n    }\n\n    // Out-of-bounds scatter points are ignored. We don't filter on y\n    // because y values are needed to allow chart to auto scale to the correct\n    // height.\n    if (datum.x > bounds.x.max || datum.x < bounds.x.min) {\n      continue;\n    }\n\n    const x = Math.round(datum.x * pixelPerXValue);\n    const y = Math.round(datum.y * pixelPerYValue);\n\n    // the locator is the x/y pixel value as one number\n    const locator = y * pixelPerRow + x;\n    if (sparse[locator] === true) {\n      continue;\n    }\n    sparse[locator] = true;\n    downsampled.push(datum);\n  }\n\n  return { ...dataset, data: downsampled };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\n\nimport { downsampleScatter, downsampleTimeseries } from \"./downsample\";\nimport { ChartDatasets } from \"./types\";\n\ntype DatasetBounds = {\n  x: { min?: number; max?: number };\n  y: { min?: number; max?: number };\n};\n\ntype UpdateParams = {\n  datasets?: ChartDatasets;\n  width?: number;\n  height?: number;\n  datasetBounds?: DatasetBounds;\n  scales?: RpcScales;\n};\n\n/**\n * Track a dataset, some bounds, a viewport to perform downsampling\n */\nexport class Downsampler {\n  #datasets: ChartDatasets = [];\n  #width = 0;\n  #height = 0;\n  #datasetBounds?: DatasetBounds;\n  #scales?: RpcScales;\n\n  /**\n   * Update internal state for next downsample\n   */\n  public update(opt: UpdateParams): void {\n    this.#datasets = opt.datasets ?? this.#datasets;\n    this.#width = opt.width ?? this.#width;\n    this.#height = opt.height ?? this.#height;\n    this.#datasetBounds = opt.datasetBounds ?? this.#datasetBounds;\n    this.#scales = opt.scales ?? this.#scales;\n  }\n\n  /**\n   * Perform a downsample with the latest state\n   */\n  public downsample(): ChartDatasets {\n    const currentScales = this.#scales;\n    let bounds:\n      | {\n          width: number;\n          height: number;\n          x: { min: number; max: number };\n          y: { min: number; max: number };\n        }\n      | undefined = undefined;\n    if (currentScales?.x && currentScales.y) {\n      bounds = {\n        width: this.#width,\n        height: this.#height,\n        x: {\n          min: currentScales.x.min,\n          max: currentScales.x.max,\n        },\n        y: {\n          min: currentScales.y.min,\n          max: currentScales.y.max,\n        },\n      };\n    }\n\n    const dataBounds = this.#datasetBounds;\n    if (!dataBounds) {\n      return [];\n    }\n\n    // if we don't have bounds (chart not initialized) but do have dataset bounds\n    // then setup bounds as x/y min/max around the dataset values rather than the scales\n    if (\n      !bounds &&\n      dataBounds.x.min != undefined &&\n      dataBounds.x.max != undefined &&\n      dataBounds.y.min != undefined &&\n      dataBounds.y.max != undefined\n    ) {\n      bounds = {\n        width: this.#width,\n        height: this.#height,\n        x: {\n          min: dataBounds.x.min,\n          max: dataBounds.x.max,\n        },\n        y: {\n          min: dataBounds.y.min,\n          max: dataBounds.y.max,\n        },\n      };\n    }\n\n    // If we don't have any bounds - we assume the component is still initializing and return no data\n    // The other alternative is to return the full data set. This leads to rendering full fidelity data\n    // which causes render pauses and blank charts for large data sets.\n    if (!bounds) {\n      return [];\n    }\n\n    return this.#datasets.map((dataset) => {\n      if (!bounds) {\n        return dataset;\n      }\n\n      const downsampled =\n        dataset.showLine !== true\n          ? downsampleScatter(dataset, bounds)\n          : downsampleTimeseries(dataset, bounds);\n      // NaN item values create gaps in the line\n      const undefinedToNanData = downsampled.data.map((item) => {\n        if (item == undefined || isNaN(item.x) || isNaN(item.y)) {\n          return { x: NaN, y: NaN, value: NaN };\n        }\n        return item;\n      });\n\n      return { ...downsampled, data: undefinedToNanData };\n    });\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Square24Filled } from \"@fluentui/react-icons\";\nimport { sortBy } from \"lodash\";\nimport { Fragment, PropsWithChildren, useMemo } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { Immutable } from \"@foxglove/studio\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nexport type TimeBasedChartTooltipData = {\n  datasetIndex: number;\n  value: number | bigint | boolean | string;\n  constantName?: string;\n};\n\ntype Props = Immutable<{\n  colorsByDatasetIndex?: Record<string, undefined | string>;\n  content: TimeBasedChartTooltipData[];\n  labelsByDatasetIndex?: Record<string, undefined | string>;\n  // Flag indicating the containing chart has multiple datasets\n  multiDataset: boolean;\n}>;\n\nconst useStyles = makeStyles()((theme) => ({\n  root: {\n    fontFamily: fonts.MONOSPACE,\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.lineHeight,\n    overflowWrap: \"break-word\",\n  },\n  grid: {\n    columnGap: theme.spacing(0.5),\n    display: \"grid\",\n    gridTemplateColumns: \"auto minmax(0px, max-content) minmax(auto, max-content)\",\n    alignItems: \"center\",\n    fontFamily: fonts.MONOSPACE,\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.lineHeight,\n    overflowWrap: \"break-word\",\n  },\n  icon: {\n    gridColumn: \"1\",\n    height: 12,\n    width: 12,\n  },\n  path: {\n    opacity: 0.9,\n    whiteSpace: \"nowrap\",\n  },\n  value: {\n    fontWeight: 600,\n    paddingLeft: theme.spacing(2),\n  },\n  overflow: {\n    gridColumn: \"2/4\",\n    opacity: theme.palette.action.disabledOpacity,\n    fontStyle: \"italic\",\n\n    \":not(:last-child)\": {\n      marginBottom: theme.spacing(0.5),\n    },\n  },\n}));\n\nfunction OverflowMessage(): JSX.Element {\n  const { classes } = useStyles();\n\n  return <div className={classes.overflow}>&lt;multiple values under cursor&gt;</div>;\n}\n\nexport default function TimeBasedChartTooltipContent(\n  props: PropsWithChildren<Props>,\n): React.ReactElement {\n  const { colorsByDatasetIndex, content, labelsByDatasetIndex, multiDataset } = props;\n  const { classes, cx } = useStyles();\n\n  // Compute whether there are multiple items for the dataset so we can show the user\n  // a message informing them about the multiple items.\n  //\n  // We do not actually show all the items to keep the tooltip size sane.\n  const sortedItems = useMemo(() => {\n    // for single dataset plots we don't care about grouping by path - there is only one path\n    if (!multiDataset) {\n      return [];\n    }\n\n    const out = new Map<\n      number,\n      { tooltip: TimeBasedChartTooltipData; hasMultipleValues: boolean }\n    >();\n\n    // group items by path\n    for (const item of content) {\n      const datasetIndex = item.datasetIndex;\n      const existing = out.get(datasetIndex);\n      if (existing) {\n        existing.hasMultipleValues = true;\n        continue;\n      }\n\n      out.set(datasetIndex, {\n        tooltip: item,\n        hasMultipleValues: false,\n      });\n    }\n\n    // Sort by datasetIndex to keep the displayed values in the same order as the settings\n    return sortBy([...out.entries()], ([_, items]) => items.tooltip.datasetIndex);\n  }, [content, multiDataset]);\n\n  // If the chart contains only one dataset, we don't need to render the dataset label - saving space\n  //\n  // We cannot detect this from the content since content is only what is actively hovered which may\n  // not include all datasets\n  if (!multiDataset) {\n    const tooltip = content[0];\n    if (!tooltip) {\n      return <></>;\n    }\n\n    const value =\n      typeof tooltip.value === \"string\"\n        ? tooltip.value\n        : typeof tooltip.value === \"bigint\"\n        ? tooltip.value.toString()\n        : JSON.stringify(tooltip.value);\n\n    return (\n      <Stack className={classes.root} data-testid=\"TimeBasedChartTooltipContent\">\n        <div>\n          {value}\n          {tooltip.constantName != undefined ? ` (${tooltip.constantName})` : \"\"}\n        </div>\n        {content.length > 1 && <OverflowMessage />}\n      </Stack>\n    );\n  }\n\n  return (\n    <div className={cx(classes.root, classes.grid)} data-testid=\"TimeBasedChartTooltipContent\">\n      {sortedItems.map(([datasetIndex, item], idx) => {\n        const color = colorsByDatasetIndex?.[datasetIndex] ?? \"auto\";\n        const label = labelsByDatasetIndex?.[datasetIndex];\n        const tooltip = item.tooltip;\n        const value =\n          typeof tooltip.value === \"string\"\n            ? tooltip.value\n            : typeof tooltip.value === \"bigint\"\n            ? tooltip.value.toString()\n            : JSON.stringify(tooltip.value);\n\n        return (\n          <Fragment key={idx}>\n            <Square24Filled className={classes.icon} primaryFill={color} />\n            <div className={classes.path}>{label ?? \"\"}</div>\n            <div className={classes.value}>\n              {value}\n              {tooltip.constantName != undefined ? ` (${tooltip.constantName})` : \"\"}\n            </div>\n            {item.hasMultipleValues && <OverflowMessage />}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Button, Fade, Tooltip, useTheme } from \"@mui/material\";\nimport { ChartOptions, ScaleOptions } from \"chart.js\";\nimport { AnnotationOptions } from \"chartjs-plugin-annotation\";\nimport { isEqual } from \"lodash\";\nimport React, {\n  ComponentProps,\n  MouseEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useMountedState } from \"react-use\";\nimport { makeStyles } from \"tss-react/mui\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport type { ZoomOptions } from \"@foxglove/chartjs-plugin-zoom/types/options\";\nimport { filterMap } from \"@foxglove/den/collection\";\nimport Logger from \"@foxglove/log\";\nimport ChartComponent from \"@foxglove/studio-base/components/Chart/index\";\nimport { RpcElement, RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\nimport KeyListener from \"@foxglove/studio-base/components/KeyListener\";\nimport { useMessagePipeline } from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport {\n  TimelineInteractionStateStore,\n  useClearHoverValue,\n  useSetHoverValue,\n  useTimelineInteractionState,\n} from \"@foxglove/studio-base/context/TimelineInteractionStateContext\";\nimport { Bounds } from \"@foxglove/studio-base/types/Bounds\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport { Downsampler } from \"./Downsampler\";\nimport HoverBar from \"./HoverBar\";\nimport TimeBasedChartTooltipContent, {\n  TimeBasedChartTooltipData,\n} from \"./TimeBasedChartTooltipContent\";\nimport { VerticalBarWrapper } from \"./VerticalBarWrapper\";\n\nconst log = Logger.getLogger(__filename);\n\nconst useStyles = makeStyles()((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  resetZoomButton: {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    marginBottom: theme.spacing(4),\n    marginRight: theme.spacing(1),\n  },\n  tooltip: {\n    maxWidth: \"none\",\n  },\n  bar: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    width: 1,\n    marginLeft: -1,\n    display: \"block\",\n  },\n  playbackBar: {\n    backgroundColor: \"#aaa\",\n  },\n}));\n\ntype ChartComponentProps = ComponentProps<typeof ChartComponent>;\n\nconst selectGlobalBounds = (store: TimelineInteractionStateStore) => store.globalBounds;\nconst selectSetGlobalBounds = (store: TimelineInteractionStateStore) => store.setGlobalBounds;\n\n// Calculation mode for the \"reset view\" view.\nexport type ChartDefaultView =\n  | { type: \"fixed\"; minXValue: number; maxXValue: number }\n  | { type: \"following\"; width: number };\n\nexport type Props = {\n  type: \"scatter\";\n  width: number;\n  height: number;\n  zoom: boolean;\n  data: ChartComponentProps[\"data\"];\n  dataBounds?: Bounds;\n  tooltips?: Map<string, TimeBasedChartTooltipData>;\n  xAxes?: ScaleOptions<\"linear\">;\n  yAxes: ScaleOptions<\"linear\">;\n  annotations?: AnnotationOptions[];\n  isSynced?: boolean;\n  linesToHide?: {\n    [key: string]: boolean;\n  };\n  datasetId?: string;\n  onClick?: ChartComponentProps[\"onClick\"];\n  // If the x axis represents playback time (\"timestamp\"), the hover cursor will be synced.\n  // Note, this setting should not be used for other time values.\n  xAxisIsPlaybackTime: boolean;\n  showXAxisLabels: boolean;\n  plugins?: ChartOptions[\"plugins\"];\n  currentTime?: number;\n  defaultView?: ChartDefaultView;\n};\n\n// Create a chart with any y-axis but with an x-axis that shows time since the\n// start of the bag, and which is kept in sync with other instances of this\n// component. Uses chart.js internally, with a zoom/pan plugin, and with our\n// standard tooltips.\nexport default function TimeBasedChart(props: Props): JSX.Element {\n  const requestID = useRef<number>(0);\n  const {\n    currentTime,\n    data,\n    dataBounds,\n    datasetId,\n    defaultView,\n    height,\n    isSynced = false,\n    showXAxisLabels,\n    type,\n    width,\n    xAxes,\n    xAxisIsPlaybackTime,\n    yAxes,\n  } = props;\n\n  const { labels, datasets } = data;\n\n  const theme = useTheme();\n  const { classes, cx } = useStyles();\n  const componentId = useMemo(() => uuidv4(), []);\n  const isMounted = useMountedState();\n  const canvasContainer = useRef<HTMLDivElement>(ReactNull);\n\n  const [hasUserPannedOrZoomed, setHasUserPannedOrZoomed] = useState<boolean>(false);\n\n  const pauseFrame = useMessagePipeline(\n    useCallback((messagePipeline) => messagePipeline.pauseFrame, []),\n  );\n\n  const resumeFrame = useRef<() => void | undefined>();\n  const requestedResumeFrame = useRef<() => void | undefined>();\n\n  // when data changes, we pause and wait for onFinishRender to resume\n  const onStartRender = useCallback(() => {\n    if (resumeFrame.current) {\n      resumeFrame.current();\n    }\n    // during streaming the message pipeline should not give us any more data until we finish\n    // rendering this update\n    resumeFrame.current = pauseFrame(\"TimeBasedChart\");\n  }, [pauseFrame]);\n\n  // resumes any paused frames\n  // since we render in a web-worker we need to pause/resume the message pipeline to keep\n  // our plot rendeirng in-sync with data rendered elsewhere in the app\n  const onFinishRender = useCallback(() => {\n    const current = resumeFrame.current;\n    resumeFrame.current = undefined;\n    requestedResumeFrame.current = current;\n\n    if (current) {\n      // allow the chart offscreen canvas to render to screen before calling done\n      requestID.current = requestAnimationFrame(() => {\n        current();\n        requestedResumeFrame.current = undefined;\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // cleanup paused frames on unmount or dataset changes\n    return () => {\n      onFinishRender();\n      cancelAnimationFrame(requestID.current);\n      requestedResumeFrame.current?.();\n    };\n  }, [pauseFrame, onFinishRender]);\n\n  const globalBounds = useTimelineInteractionState(selectGlobalBounds);\n  const setGlobalBounds = useTimelineInteractionState(selectSetGlobalBounds);\n\n  // Ignore global bounds if we're not synced.\n  const syncedGlobalBounds = useMemo(\n    () => (isSynced ? globalBounds : undefined),\n    [globalBounds, isSynced],\n  );\n\n  const linesToHide = useMemo(() => props.linesToHide ?? {}, [props.linesToHide]);\n\n  // some callbacks don't need to re-create when the current scales change, so we keep a ref\n  const currentScalesRef = useRef<RpcScales | undefined>(undefined);\n\n  // Calculates the minX/maxX for all our datasets. We do this on the unfiltered datasets\n  // because we need the bounds to properly filter adjacent points. Defers to precomputed\n  // dataBounds, if available.\n  const datasetBounds = useMemo(() => {\n    if (dataBounds) {\n      return dataBounds;\n    }\n\n    let xMin: number | undefined;\n    let xMax: number | undefined;\n    let yMin: number | undefined;\n    let yMax: number | undefined;\n\n    for (const dataset of datasets) {\n      for (const item of dataset.data) {\n        if (item == undefined) {\n          continue;\n        }\n        if (!isNaN(item.x)) {\n          xMin = Math.min(xMin ?? item.x, item.x);\n          xMax = Math.max(xMax ?? item.x, item.x);\n        }\n\n        if (!isNaN(item.x)) {\n          yMin = Math.min(yMin ?? item.y, item.y);\n          yMax = Math.max(yMax ?? item.y, item.y);\n        }\n      }\n    }\n\n    return { x: { min: xMin, max: xMax }, y: { min: yMin, max: yMax } };\n  }, [dataBounds, datasets]);\n\n  const onResetZoom = () => {\n    setHasUserPannedOrZoomed(false);\n    setGlobalBounds(undefined);\n  };\n\n  const [hasVerticalExclusiveZoom, setHasVerticalExclusiveZoom] = useState<boolean>(false);\n  const [hasBothAxesZoom, setHasBothAxesZoom] = useState<boolean>(false);\n\n  const zoomMode = useMemo<ZoomOptions[\"mode\"]>(() => {\n    if (hasVerticalExclusiveZoom) {\n      return \"y\";\n    } else if (hasBothAxesZoom) {\n      return \"xy\";\n    }\n    return \"x\";\n  }, [hasBothAxesZoom, hasVerticalExclusiveZoom]);\n\n  const keyDownHandlers = React.useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(true),\n      b: () => setHasBothAxesZoom(true),\n    }),\n    [setHasVerticalExclusiveZoom, setHasBothAxesZoom],\n  );\n  const keyUphandlers = React.useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(false),\n      b: () => setHasBothAxesZoom(false),\n    }),\n    [setHasVerticalExclusiveZoom, setHasBothAxesZoom],\n  );\n\n  const mouseYRef = useRef<number | undefined>(undefined);\n\n  // We use a custom tooltip so we can style it more nicely, and so that it can break\n  // out of the bounds of the canvas, in case the panel is small.\n  const [activeTooltip, setActiveTooltip] = useState<{\n    x: number;\n    y: number;\n    data: TimeBasedChartTooltipData[];\n  }>();\n\n  const updateTooltip = useCallback((elements: RpcElement[]) => {\n    if (elements.length === 0 || mouseYRef.current == undefined) {\n      return setActiveTooltip(undefined);\n    }\n\n    const tooltipItems: { item: TimeBasedChartTooltipData; element: RpcElement }[] = [];\n\n    for (const element of elements) {\n      if (!element.data) {\n        continue;\n      }\n\n      const datum = element.data;\n      if (datum.value == undefined) {\n        continue;\n      }\n\n      tooltipItems.push({\n        item: {\n          datasetIndex: element.datasetIndex,\n          value: datum.value,\n          constantName: datum.constantName,\n        },\n        element,\n      });\n    }\n\n    if (tooltipItems.length === 0) {\n      return setActiveTooltip(undefined);\n    }\n\n    const element = tooltipItems[0]!.element;\n\n    const canvasRect = canvasContainer.current?.getBoundingClientRect();\n    if (canvasRect) {\n      setActiveTooltip({\n        x: canvasRect.left + element.view.x,\n        y: canvasRect.top + mouseYRef.current,\n        data: tooltipItems.map((item) => item.item),\n      });\n    }\n  }, []);\n\n  const setHoverValue = useSetHoverValue();\n  const clearHoverValue = useClearHoverValue();\n  const clearGlobalHoverTime = useCallback(\n    () => clearHoverValue(componentId),\n    [clearHoverValue, componentId],\n  );\n\n  const onMouseOut = useCallback(() => {\n    setActiveTooltip(undefined);\n    clearGlobalHoverTime();\n  }, [clearGlobalHoverTime]);\n\n  // currentScalesRef is used because we don't need to change this callback content when the scales change\n  // this does mean that scale changes don't remove tooltips - which is a future enhancement\n  const onMouseMove = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      const xScale = currentScalesRef.current?.x;\n      if (!xScale || !canvasContainer.current) {\n        setActiveTooltip(undefined);\n        clearGlobalHoverTime();\n        return;\n      }\n\n      const canvasContainerRect = canvasContainer.current.getBoundingClientRect();\n\n      // tooltip vertical placement align with the cursor y value\n      mouseYRef.current = event.pageY - canvasContainerRect.top;\n\n      const mouseX = event.pageX - canvasContainerRect.left;\n      const pixels = xScale.pixelMax - xScale.pixelMin;\n      const range = xScale.max - xScale.min;\n      const xVal = (range / pixels) * (mouseX - xScale.pixelMin) + xScale.min;\n\n      const xInBounds = xVal >= xScale.min && xVal <= xScale.max;\n      if (!xInBounds || isNaN(xVal)) {\n        setActiveTooltip(undefined);\n        clearGlobalHoverTime();\n        return;\n      }\n\n      setHoverValue({\n        componentId,\n        value: xVal,\n        type: xAxisIsPlaybackTime ? \"PLAYBACK_SECONDS\" : \"OTHER\",\n      });\n    },\n    [setHoverValue, componentId, xAxisIsPlaybackTime, clearGlobalHoverTime],\n  );\n\n  const plugins = useMemo<ChartOptions[\"plugins\"]>(() => {\n    return {\n      decimation: {\n        enabled: true,\n        algorithm: \"lttb\",\n      },\n      legend: {\n        display: false,\n      },\n      datalabels: {\n        display: false,\n      },\n      tooltip: {\n        enabled: false, // Disable native tooltips since we use custom ones.\n      },\n      zoom: {\n        zoom: {\n          enabled: props.zoom,\n          mode: zoomMode,\n          sensitivity: 3,\n          speed: 0.1,\n        },\n        pan: {\n          mode: \"xy\",\n          enabled: true,\n          speed: 20,\n          threshold: 10,\n        },\n      },\n      ...props.plugins,\n      annotation: { annotations: props.annotations },\n    };\n  }, [props.annotations, props.plugins, props.zoom, zoomMode]);\n\n  // To avoid making a new xScale identity on all updates that might change the min/max\n  // we memo the min/max X values so only when the values change is the scales object re-made\n  const { min: minX, max: maxX } = useMemo(() => {\n    // when unlocking sync keep the last manually panned/zoomed chart state\n    if (!syncedGlobalBounds && hasUserPannedOrZoomed) {\n      return { min: undefined, max: undefined };\n    }\n\n    // If we're the source of global bounds then use our current values\n    // to avoid scale feedback jitter.\n    if (syncedGlobalBounds?.sourceId === componentId && syncedGlobalBounds.userInteraction) {\n      return { min: undefined, max: undefined };\n    }\n\n    let min: number | undefined;\n    let max: number | undefined;\n\n    // default view possibly gives us some initial bounds\n    if (defaultView?.type === \"fixed\") {\n      min = defaultView.minXValue;\n      max = defaultView.maxXValue;\n    } else if (defaultView?.type === \"following\") {\n      max = currentTime ?? 0;\n      min = max - defaultView.width;\n    } else {\n      min = datasetBounds.x.min;\n      max = datasetBounds.x.max;\n    }\n\n    // If the global bounds are from user interaction, we use that unconditionally.\n    if (syncedGlobalBounds?.userInteraction === true) {\n      min = syncedGlobalBounds.min;\n      max = syncedGlobalBounds.max;\n    }\n\n    // if the min/max are the same, use undefined to fall-back to chart component auto-scales\n    // without this the chart axis does not appear since it has as 0 size\n    if (min === max) {\n      return { min: undefined, max: undefined };\n    }\n\n    return { min, max };\n  }, [\n    componentId,\n    currentTime,\n    datasetBounds.x.max,\n    datasetBounds.x.min,\n    defaultView,\n    syncedGlobalBounds,\n    hasUserPannedOrZoomed,\n  ]);\n\n  const xScale = useMemo<ScaleOptions>(() => {\n    const defaultXTicksSettings: ScaleOptions[\"ticks\"] = {\n      font: {\n        family: fonts.MONOSPACE,\n        size: 10,\n      },\n      color: theme.palette.text.secondary,\n      maxRotation: 0,\n    };\n\n    const scale: ScaleOptions<\"linear\"> = {\n      grid: { color: theme.palette.divider },\n      ...xAxes,\n      min: minX,\n      max: maxX,\n      ticks: {\n        display: showXAxisLabels,\n        ...defaultXTicksSettings,\n        ...xAxes?.ticks,\n      },\n    };\n\n    return scale;\n  }, [theme.palette, showXAxisLabels, xAxes, minX, maxX]);\n\n  const yScale = useMemo<ScaleOptions>(() => {\n    const defaultYTicksSettings: ScaleOptions[\"ticks\"] = {\n      font: {\n        family: fonts.MONOSPACE,\n        size: 10,\n      },\n      color: theme.palette.text.secondary,\n      padding: 0,\n    };\n\n    let { min: minY, max: maxY } = yAxes;\n\n    // chartjs doesn't like it when only one of min/max are specified for scales\n    // so if either is specified then we specify both\n    if (maxY == undefined && minY != undefined) {\n      maxY = datasetBounds.y.max;\n    }\n    if (minY == undefined && maxY != undefined) {\n      minY = datasetBounds.y.min;\n    }\n\n    return {\n      type: \"linear\",\n      ...yAxes,\n      min: minY,\n      max: maxY,\n      ticks: {\n        ...defaultYTicksSettings,\n        ...yAxes.ticks,\n      },\n    } as ScaleOptions;\n  }, [datasetBounds.y, yAxes, theme.palette]);\n\n  // remove datasets that should be hidden\n  const visibleDatasets = useMemo(() => {\n    return filterMap(datasets, (dataset) => {\n      const { label } = dataset;\n      if ((label == undefined || linesToHide[label]) ?? false) {\n        return;\n      }\n      return dataset;\n    });\n  }, [datasets, linesToHide]);\n\n  const [downsampler] = useState(() => new Downsampler());\n\n  // Set the initial downsampler state and downsample the initial dataset\n  const [downsampledDatasets, setDownsampledDatasets] = useState<typeof datasets>(() => {\n    downsampler.update({\n      width,\n      height,\n      datasets: visibleDatasets,\n      datasetBounds,\n      scales: currentScalesRef.current,\n    });\n    return downsampler.downsample();\n  });\n\n  // Stable callback to run the downsampler and update the latest copy of the downsampled datasets\n  const applyDownsample = useCallback(() => {\n    setDownsampledDatasets(downsampler.downsample());\n  }, [downsampler]);\n\n  // Debounce calls to invoke the downsampler\n  const queueDownsample = useDebouncedCallback(\n    applyDownsample,\n    100,\n    // maxWait equal to debounce timeout makes the debounce act like a throttle\n    // Without a maxWait - invocations of the debounced invalidate reset the countdown\n    // resulting in no invalidation when scales are constantly changing (playback)\n    { leading: false, maxWait: 100 },\n  );\n\n  // Updates to the dataset bounds do not need to queue a downsample\n  useEffect(() => {\n    downsampler.update({ datasetBounds });\n  }, [datasetBounds, downsampler]);\n\n  // Updates to the viewport or the datasets queue a downsample\n  useEffect(() => {\n    downsampler.update({ width, height, datasets: visibleDatasets });\n    queueDownsample();\n  }, [downsampler, height, width, visibleDatasets, queueDownsample]);\n\n  const downsampledData = useMemo(() => {\n    return {\n      labels,\n      datasets: downsampledDatasets,\n    };\n  }, [labels, downsampledDatasets]);\n\n  const options = useMemo<ChartOptions>(() => {\n    return {\n      maintainAspectRatio: false,\n      animation: false,\n      // Disable splines, they seem to cause weird rendering artifacts:\n      elements: { line: { tension: 0 } },\n      interaction: {\n        intersect: false,\n        mode: \"x\",\n      },\n      scales: {\n        x: xScale,\n        y: yScale,\n      },\n      plugins,\n    };\n  }, [plugins, xScale, yScale]);\n\n  const onHover = useCallback(\n    (elements: RpcElement[]) => {\n      // onHover could fire after component unmounts so we need to guard with mounted checks\n      if (isMounted()) {\n        updateTooltip(elements);\n      }\n    },\n    [isMounted, updateTooltip],\n  );\n\n  const onScalesUpdate = useCallback(\n    (scales: RpcScales, { userInteraction }: { userInteraction: boolean }) => {\n      if (!isMounted()) {\n        return;\n      }\n\n      // If this is an update from the chart adjusting its own bounds and not a\n      // user interaction and the X scale is defined but hasn't changed we can\n      // skip updating global bounds and downsampling. This avoids a feedback\n      // loop on boundary conditions when the chart is adjusting its own Y axis\n      // to fit the dataset.\n      if (\n        scales.x != undefined &&\n        isEqual(scales.x, currentScalesRef.current?.x) &&\n        !userInteraction\n      ) {\n        return;\n      }\n\n      if (userInteraction) {\n        setHasUserPannedOrZoomed(true);\n      }\n\n      currentScalesRef.current = scales;\n\n      // Scales updated which indicates we might need to adjust the downsampling\n      downsampler.update({ scales });\n      queueDownsample();\n\n      // chart indicated we got a scales update, we may need to update global bounds\n      if (!isSynced || !scales.x) {\n        return;\n      }\n\n      // the change is a result of user interaction on our chart\n      // we set the sync scale value so other synced charts follow our zoom/pan behavior\n      if (userInteraction) {\n        setGlobalBounds({\n          min: scales.x.min,\n          max: scales.x.max,\n          sourceId: componentId,\n          userInteraction: true,\n        });\n        return;\n      }\n\n      // the scales changed due to new data or another non-user initiated event\n      // the sync value is conditionally set depending on the state of the existing sync value\n      setGlobalBounds((old) => {\n        // no scale from our plot, always use old value\n        const scalesX = scales.x;\n        if (!scalesX) {\n          return old;\n        }\n\n        // no old value for sync, initialize with our value\n        if (!old) {\n          return {\n            min: scalesX.min,\n            max: scalesX.max,\n            sourceId: componentId,\n            userInteraction: false,\n          };\n        }\n\n        // give preference to an old value set via user interaction\n        // note that updates due to _our_ user interaction are set earlier\n        if (old.userInteraction) {\n          return old;\n        }\n\n        // calculate min/max based on old value and our new scale\n        const newMin = Math.min(scalesX.min, old.min);\n        const newMax = Math.max(scalesX.max, old.max);\n\n        // avoid making a new sync object if the existing one matches our range\n        // avoids infinite set states\n        if (old.max === newMax && old.min === newMin) {\n          return old;\n        }\n\n        // existing value does not match our new range, update the global sync value\n        return {\n          min: newMin,\n          max: newMax,\n          sourceId: componentId,\n          userInteraction: false,\n        };\n      });\n    },\n    [componentId, downsampler, isMounted, isSynced, queueDownsample, setGlobalBounds],\n  );\n\n  useEffect(() => log.debug(`<TimeBasedChart> (datasetId=${datasetId})`), [datasetId]);\n\n  const colorsByDatasetIndex = useMemo(() => {\n    return Object.fromEntries(\n      data.datasets.map((dataset, index) => [index, dataset.borderColor?.toString()]),\n    );\n  }, [data.datasets]);\n\n  const labelsByDatasetIndex = useMemo(() => {\n    return Object.fromEntries(data.datasets.map((dataset, index) => [index, dataset.label]));\n  }, [data.datasets]);\n\n  const datasetsLength = datasets.length;\n  const tooltipContent = useMemo(() => {\n    return activeTooltip ? (\n      <TimeBasedChartTooltipContent\n        content={activeTooltip.data}\n        multiDataset={datasetsLength > 1}\n        colorsByDatasetIndex={colorsByDatasetIndex}\n        labelsByDatasetIndex={labelsByDatasetIndex}\n      />\n    ) : undefined;\n  }, [activeTooltip, colorsByDatasetIndex, datasetsLength, labelsByDatasetIndex]);\n\n  // reset is shown if we have sync lock and there has been user interaction, or if we don't\n  // have sync lock and the user has manually interacted with the plot\n  //\n  // The reason we check for pan lock is to remove reset display from all sync'd plots once\n  // the range has been reset.\n  const showReset = useMemo(() => {\n    return isSynced ? syncedGlobalBounds?.userInteraction === true : hasUserPannedOrZoomed;\n  }, [syncedGlobalBounds?.userInteraction, hasUserPannedOrZoomed, isSynced]);\n\n  // We don't memo this since each option itself is memo'd and this is just convenience to pass to\n  // the component.\n  const chartProps: ChartComponentProps = {\n    type,\n    width,\n    height,\n    isBoundsReset: globalBounds == undefined,\n    options,\n    data: downsampledData,\n    onClick: props.onClick,\n    onScalesUpdate,\n    onStartRender,\n    onFinishRender,\n    onHover,\n  };\n\n  // avoid rendering if width/height are 0 - usually on initial mount\n  // so we don't trigger onFinishRender if we know we will immediately resize\n  if (width === 0 || height === 0) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"row\" fullWidth>\n      <Tooltip\n        arrow={false}\n        classes={{ tooltip: classes.tooltip }}\n        open={activeTooltip != undefined}\n        placement=\"right\"\n        title={tooltipContent ?? <></>}\n        disableInteractive\n        followCursor\n        TransitionComponent={Fade}\n        TransitionProps={{ timeout: 0 }}\n      >\n        <Stack direction=\"row\" style={{ width }}>\n          <div className={classes.root} onDoubleClick={onResetZoom}>\n            <HoverBar\n              componentId={componentId}\n              isTimestampScale={xAxisIsPlaybackTime}\n              scales={currentScalesRef.current}\n            >\n              <div\n                className={classes.bar}\n                style={{\n                  backgroundColor: xAxisIsPlaybackTime\n                    ? theme.palette.warning.main\n                    : theme.palette.info.main,\n                }}\n              />\n            </HoverBar>\n            {xAxisIsPlaybackTime && (\n              <VerticalBarWrapper scales={currentScalesRef.current} xValue={currentTime}>\n                <div className={cx(classes.bar, classes.playbackBar)} />\n              </VerticalBarWrapper>\n            )}\n\n            <div ref={canvasContainer} onMouseMove={onMouseMove} onMouseOut={onMouseOut}>\n              <ChartComponent {...chartProps} />\n            </div>\n\n            {showReset && (\n              <Button\n                className={classes.resetZoomButton}\n                variant=\"contained\"\n                color=\"inherit\"\n                title=\"(shortcut: double-click)\"\n                onClick={onResetZoom}\n              >\n                Reset view\n              </Button>\n            )}\n            <KeyListener global keyDownHandlers={keyDownHandlers} keyUpHandlers={keyUphandlers} />\n          </div>\n        </Stack>\n      </Tooltip>\n    </Stack>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessageEvent } from \"@foxglove/studio\";\nimport { MessageDataItemsByPath } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport { PlotDataByPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { getTimestampForMessage } from \"@foxglove/studio-base/util/time\";\n\n/**\n * Fetch the data we need from each item in itemsByPath and discard the rest of\n * the message to save memory.\n */\nconst getByPath = (itemsByPath: MessageDataItemsByPath): PlotDataByPath => {\n  const ret: PlotDataByPath = {};\n  Object.entries(itemsByPath).forEach(([path, items]) => {\n    ret[path] = items.map((messageAndData) => {\n      const headerStamp = getTimestampForMessage(messageAndData.messageEvent.message);\n      return {\n        queriedData: messageAndData.queriedData,\n        receiveTime: messageAndData.messageEvent.receiveTime,\n        headerStamp,\n      };\n    });\n  });\n  return ret;\n};\n\nfunction getMessagePathItems(\n  decodeMessagePathsForMessagesByTopic: (\n    Record: Record<string, readonly MessageEvent[]>,\n  ) => MessageDataItemsByPath,\n  messages: Record<string, readonly MessageEvent[]>,\n): PlotDataByPath {\n  return Object.freeze(getByPath(decodeMessagePathsForMessagesByTopic(messages)));\n}\n\n/**\n * Fetch all the plot data we want for our current subscribed topics from blocks.\n */\nexport function getBlockItemsByPath(\n  decodeMessagePathsForMessagesByTopic: (\n    msgs: Record<string, readonly MessageEvent[]>,\n  ) => MessageDataItemsByPath,\n  messages: Record<string, readonly MessageEvent[]>,\n): PlotDataByPath {\n  return getMessagePathItems(decodeMessagePathsForMessagesByTopic, messages);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nexport type MathFunction = (arg: number) => number;\n\nexport function derivative<T extends { x: number; y: number }>(data: T[]): T[] {\n  const newDatums = [];\n  for (let i = 1; i < data.length; i++) {\n    const item = data[i]!;\n    const prevItem = data[i - 1]!;\n    const secondsDifference = item.x - prevItem.x;\n    const value = (item.y - prevItem.y) / secondsDifference;\n    newDatums.push({\n      ...item,\n      y: value,\n      value,\n    });\n  }\n  return newDatums;\n}\n\nexport const mathFunctions: { [fn: string]: MathFunction } = {\n  abs: Math.abs,\n  acos: Math.acos,\n  asin: Math.asin,\n  atan: Math.atan,\n  ceil: Math.ceil,\n  cos: Math.cos,\n  log: Math.log,\n  log1p: Math.log1p,\n  log2: Math.log2,\n  log10: Math.log10,\n  round: Math.round,\n  sign: Math.sign,\n  sin: Math.sin,\n  sqrt: Math.sqrt,\n  tan: Math.tan,\n  trunc: Math.trunc,\n  negative: (value: number) => -value,\n  deg2rad: (degrees: number) => degrees * (Math.PI / 180),\n  rad2deg: (radians: number) => radians * (180 / Math.PI),\n};\n\nexport function applyToDatum<T extends { y: number | string | bigint }>(\n  datum: T,\n  func: MathFunction,\n): T {\n  let { y } = datum;\n  const numericYValue: number = Number(y);\n  // Only apply the function if the Y value is a valid number.\n  if (!isNaN(numericYValue)) {\n    y = func(numericYValue);\n  }\n  return { ...datum, y, value: y };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { Immutable } from \"@foxglove/studio\";\n\n/**\n * Describes the limits of a rectangular area in 2d space.\n */\nexport type Bounds = {\n  x: { min: number; max: number };\n  y: { min: number; max: number };\n};\n\n/**\n * Creates inverted bounds with values set to extremes to simplify calculating the union\n * with a series of other bounds.\n */\nexport function makeInvertedBounds(): Bounds {\n  return {\n    x: { min: Number.MAX_SAFE_INTEGER, max: Number.MIN_SAFE_INTEGER },\n    y: { min: Number.MAX_SAFE_INTEGER, max: Number.MIN_SAFE_INTEGER },\n  };\n}\n\n/**\n * Finds the union of two rectangular bounds.\n */\nexport function unionBounds(a: Immutable<Bounds>, b: Immutable<Bounds>): Bounds {\n  return {\n    x: { min: Math.min(a.x.min, b.x.min), max: Math.max(a.x.max, b.x.max) },\n    y: { min: Math.min(a.y.min, b.y.min), max: Math.max(a.y.max, b.y.max) },\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { ChartDataset } from \"chart.js\";\n\nimport { Time } from \"@foxglove/rostime\";\nimport { MessagePathDataItem } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport type { ChartDatum } from \"@foxglove/studio-base/components/TimeBasedChart/types\";\nimport { TimestampMethod } from \"@foxglove/studio-base/util/time\";\n\nexport type BasePlotPath = {\n  value: string;\n  enabled: boolean;\n};\n\nexport type PlotPath = BasePlotPath & {\n  color?: string;\n  label?: string;\n  timestampMethod: TimestampMethod;\n  showLine?: boolean;\n};\n\n// X-axis values:\nexport type PlotXAxisVal =\n  | \"timestamp\" // Message playback time. Preloaded.\n  | \"index\" // Message-path value index. One \"current\" message at playback time.\n  | \"custom\" // Message path data. Preloaded.\n  | \"currentCustom\"; // Message path data. One \"current\" message at playback time.\n\n// In addition to the base datum, we also add receiveTime and optionally header stamp to our datums\n// These are used in the csv export.\nexport type Datum = ChartDatum & {\n  receiveTime: Time;\n  headerStamp?: Time;\n};\n\nexport type DataSet = ChartDataset<\"scatter\", Datum[]>;\n\nexport type PlotDataItem = {\n  queriedData: MessagePathDataItem[];\n  receiveTime: Time;\n  headerStamp?: Time;\n};\n\nexport type PlotDataByPath = Record<string, PlotDataItem[]>;\n\n// A \"reference line\" plot path is a numeric value. It creates a horizontal line on the plot at the specified value.\nexport function isReferenceLinePlotPathType(path: BasePlotPath): boolean {\n  return !isNaN(Number.parseFloat(path.value));\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { isTime, subtract, Time, toSec } from \"@foxglove/rostime\";\nimport { Immutable } from \"@foxglove/studio\";\nimport { Bounds, makeInvertedBounds } from \"@foxglove/studio-base/types/Bounds\";\nimport { format } from \"@foxglove/studio-base/util/formatTime\";\nimport { darkColor, getLineColor, lightColor } from \"@foxglove/studio-base/util/plotColors\";\nimport { formatTimeRaw, TimestampMethod } from \"@foxglove/studio-base/util/time\";\n\nimport {\n  BasePlotPath,\n  DataSet,\n  Datum,\n  isReferenceLinePlotPathType,\n  PlotDataByPath,\n  PlotDataItem,\n  PlotPath,\n  PlotXAxisVal,\n} from \"./internalTypes\";\nimport { applyToDatum, MathFunction, mathFunctions } from \"./transformPlotRange\";\n\nconst isCustomScale = (xAxisVal: PlotXAxisVal): boolean =>\n  xAxisVal === \"custom\" || xAxisVal === \"currentCustom\";\n\nfunction getXForPoint(\n  xAxisVal: PlotXAxisVal,\n  timestamp: number,\n  innerIdx: number,\n  xAxisRanges: Immutable<PlotDataItem[]> | undefined,\n  xItem: undefined | Immutable<PlotDataItem>,\n  xAxisPath: BasePlotPath | undefined,\n): number | bigint {\n  if (isCustomScale(xAxisVal) && xAxisPath) {\n    if (isReferenceLinePlotPathType(xAxisPath)) {\n      return Number.parseFloat(xAxisPath.value);\n    }\n    if (xAxisRanges) {\n      if (!xItem) {\n        return NaN;\n      }\n      const value = xItem.queriedData[innerIdx]?.value;\n      return isTime(value) ? toSec(value) : typeof value === \"bigint\" ? value : Number(value);\n    }\n  }\n  return xAxisVal === \"timestamp\" ? timestamp : innerIdx;\n}\n\nfunction getDatumsForMessagePathItem(\n  yItem: Immutable<PlotDataItem>,\n  xItem: undefined | Immutable<PlotDataItem>,\n  startTime: Time,\n  timestampMethod: TimestampMethod,\n  xAxisVal: PlotXAxisVal,\n  xAxisPath?: BasePlotPath,\n  xAxisRanges?: Immutable<PlotDataItem[]>,\n): { data: Datum[]; hasMismatchedData: boolean } {\n  const timestamp = timestampMethod === \"headerStamp\" ? yItem.headerStamp : yItem.receiveTime;\n  if (!timestamp) {\n    return { data: [], hasMismatchedData: false };\n  }\n  const data: Datum[] = [];\n  const elapsedTime = toSec(subtract(timestamp, startTime));\n  for (const entry of yItem.queriedData.entries()) {\n    const [innerIdx, { value, constantName }] = entry;\n    if (\n      typeof value === \"number\" ||\n      typeof value === \"boolean\" ||\n      typeof value === \"string\" ||\n      typeof value === \"bigint\"\n    ) {\n      const valueNum = typeof value === \"bigint\" ? value : Number(value);\n      if (typeof valueNum === \"bigint\" || !isNaN(valueNum)) {\n        const x = getXForPoint(xAxisVal, elapsedTime, innerIdx, xAxisRanges, xItem, xAxisPath);\n        const y = valueNum;\n\n        data.push({\n          x: Number(x),\n          y: Number(y),\n          value,\n          constantName,\n          receiveTime: yItem.receiveTime,\n          headerStamp: yItem.headerStamp,\n        });\n      }\n    } else if (isTime(value)) {\n      const x = getXForPoint(xAxisVal, elapsedTime, innerIdx, xAxisRanges, xItem, xAxisPath);\n      const y = toSec(value);\n\n      data.push({\n        x: Number(x),\n        y,\n        receiveTime: yItem.receiveTime,\n        headerStamp: yItem.headerStamp,\n        value: `${format(value)} (${formatTimeRaw(value)})`,\n        constantName,\n      });\n    }\n  }\n\n  const hasMismatchedData =\n    isCustomScale(xAxisVal) && (!xItem || yItem.queriedData.length !== xItem.queriedData.length);\n  return { data, hasMismatchedData };\n}\n\nfunction getDatasetsFromMessagePlotPath({\n  path,\n  yAxisRanges,\n  index,\n  startTime,\n  xAxisVal,\n  xAxisRanges,\n  xAxisPath,\n  invertedTheme = false,\n}: {\n  path: PlotPath;\n  yAxisRanges: Immutable<PlotDataItem[]>;\n  index: number;\n  startTime: Time;\n  xAxisVal: PlotXAxisVal;\n  xAxisRanges: Immutable<PlotDataItem[]> | undefined;\n  xAxisPath?: BasePlotPath;\n  invertedTheme?: boolean;\n}): {\n  dataset: DataSet;\n  hasMismatchedData: boolean;\n} {\n  let showLine = path.showLine !== false;\n  let hasMismatchedData =\n    isCustomScale(xAxisVal) &&\n    xAxisRanges != undefined &&\n    yAxisRanges.length !== xAxisRanges.length;\n\n  const plotData: Datum[] = [];\n\n  let maybeMathFn: MathFunction | undefined;\n  for (const funcName of Object.keys(mathFunctions)) {\n    if (path.value.endsWith(`.@${funcName}`)) {\n      maybeMathFn = mathFunctions[funcName];\n      if (maybeMathFn) {\n        break;\n      }\n    }\n  }\n\n  const rangeData: Datum[] = [];\n  for (const [rangeIdx, item] of yAxisRanges.entries()) {\n    const xItem = xAxisRanges?.[rangeIdx];\n    const { data: datums, hasMismatchedData: itemHasMismatchedData } = getDatumsForMessagePathItem(\n      item,\n      xItem,\n      startTime,\n      path.timestampMethod,\n      xAxisVal,\n      xAxisPath,\n      xAxisRanges,\n    );\n\n    for (const datum of datums) {\n      if (maybeMathFn) {\n        rangeData.push(applyToDatum(datum, maybeMathFn));\n      } else {\n        rangeData.push(datum);\n      }\n    }\n\n    hasMismatchedData = hasMismatchedData || itemHasMismatchedData;\n    // If we have added more than one point for this message, make it a scatter plot.\n    if (item.queriedData.length > 1 && xAxisVal !== \"index\") {\n      showLine = false;\n    }\n  }\n\n  for (const datum of rangeData) {\n    plotData.push(datum);\n  }\n\n  const borderColor = getLineColor(path.color, index);\n  const dataset: DataSet = {\n    borderColor,\n    label: path.label != undefined && path.label !== \"\" ? path.label : path.value,\n    showLine,\n    fill: false,\n    borderWidth: 1,\n    pointRadius: 1,\n    pointHoverRadius: 3,\n    pointBackgroundColor: invertedTheme ? lightColor(borderColor) : darkColor(borderColor),\n    pointBorderColor: \"transparent\",\n    data: plotData,\n  };\n  return {\n    dataset,\n    hasMismatchedData,\n  };\n}\n\ntype GetDatasetArgs = Immutable<{\n  paths: PlotPath[];\n  itemsByPath: PlotDataByPath;\n  startTime: Time;\n  xAxisVal: PlotXAxisVal;\n  xAxisPath?: BasePlotPath;\n  invertedTheme?: boolean;\n}>;\n\ntype DatasetWithPath = { path: PlotPath; dataset: DataSet };\n\nexport type DataSets = {\n  bounds: Bounds;\n  datasets: Array<undefined | DatasetWithPath>;\n  pathsWithMismatchedDataLengths: string[];\n};\n\nexport function getDatasets({\n  paths,\n  itemsByPath,\n  startTime,\n  xAxisVal,\n  xAxisPath,\n  invertedTheme,\n}: GetDatasetArgs): DataSets {\n  const bounds: Bounds = makeInvertedBounds();\n  const pathsWithMismatchedDataLengths: string[] = [];\n  const datasets: DataSets[\"datasets\"] = [];\n  for (const [index, path] of paths.entries()) {\n    const yRanges = itemsByPath[path.value] ?? [];\n    const xRanges = xAxisPath && itemsByPath[xAxisPath.value];\n    if (!path.enabled) {\n      datasets.push(undefined);\n    } else if (!isReferenceLinePlotPathType(path)) {\n      const res = getDatasetsFromMessagePlotPath({\n        path,\n        yAxisRanges: yRanges,\n        index,\n        startTime,\n        xAxisVal,\n        xAxisRanges: xRanges,\n        xAxisPath,\n        invertedTheme,\n      });\n\n      if (res.hasMismatchedData) {\n        pathsWithMismatchedDataLengths.push(path.value);\n      }\n      for (const datum of res.dataset.data) {\n        if (isFinite(datum.x)) {\n          bounds.x.min = Math.min(bounds.x.min, datum.x);\n          bounds.x.max = Math.max(bounds.x.max, datum.x);\n        }\n        if (isFinite(datum.y)) {\n          bounds.y.min = Math.min(bounds.y.min, datum.y);\n          bounds.y.max = Math.max(bounds.y.max, datum.y);\n        }\n      }\n      datasets.push({ path, dataset: res.dataset });\n    }\n  }\n\n  return {\n    bounds,\n    datasets,\n    pathsWithMismatchedDataLengths,\n  };\n}\n\n/**\n * Merges two datasets into a single dataset containing all points from both.\n */\nexport function mergeDatasets(\n  a: undefined | DatasetWithPath,\n  b: undefined | DatasetWithPath,\n): undefined | DatasetWithPath {\n  if (a == undefined) {\n    return b;\n  }\n  if (b == undefined) {\n    return a;\n  }\n  return {\n    path: a.path,\n    dataset: {\n      ...a.dataset,\n      data: a.dataset.data.concat(b.dataset.data),\n      showLine: a.dataset.showLine === true && b.dataset.showLine === true,\n    },\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { sumBy, transform } from \"lodash\";\nimport { useMemo, useState } from \"react\";\n\nimport { Immutable } from \"@foxglove/studio\";\nimport {\n  MessagePipelineContext,\n  useMessagePipeline,\n} from \"@foxglove/studio-base/components/MessagePipeline\";\nimport { MessageBlock, MessageEvent } from \"@foxglove/studio-base/players/types\";\n\nconst EmptyBlocks: MessageBlock[] = [];\n\ntype State = {\n  cursors: Record<string, number>;\n  messages: Record<string, MessageEvent[]>;\n  previousBlocks: Immutable<Array<undefined | MessageBlock>>;\n};\n\nfunction makeInitialState(): State {\n  return {\n    cursors: {},\n    messages: {},\n    previousBlocks: [],\n  };\n}\n\nconst selectBlocks = (ctx: MessagePipelineContext) =>\n  ctx.playerState.progress.messageCache?.blocks ?? EmptyBlocks;\n\n/**\n * Flattens incoming blocks into per-topic allFrames arrays.\n *\n * Internally this is implemented via cursor and an accumulating arrays instead of\n * returning new arrays on each invocation to improve performance.\n *\n * @param blocks blocks containing messages\n * @param topics to load from blocks\n * @returns flattened per-topic arrays of messages\n */\nexport function useFlattenedBlocksByTopic(\n  topics: readonly string[],\n): Immutable<Record<string, MessageEvent[]>> {\n  const [state, setState] = useState<State>(makeInitialState);\n\n  const blocks = useMessagePipeline(selectBlocks);\n\n  const memoryAvailable = useMemo(() => {\n    const messageCount = sumBy(Object.values(state.messages), (msgs) => msgs.length);\n    if (messageCount >= 1_000_000) {\n      // If we have memory stats we can let the user have more points as long as memory is\n      // not under pressure.\n      // foxglove-depcheck-used: @types/foxglove__web\n      if (performance.memory) {\n        const pct = performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit;\n        if (isNaN(pct) || pct > 0.6) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }, [state.messages]);\n\n  // Reset cursors and buffers if the first block has changed.\n  const shouldResetState = blocks[0]?.messagesByTopic !== state.previousBlocks[0]?.messagesByTopic;\n\n  if (shouldResetState || (blocks !== state.previousBlocks && memoryAvailable)) {\n    // setState directly here instead of a useEffect to avoid an extra render.\n    setState((oldState) => {\n      // Rebuild message buffers and cursors from last state, resetting if we are\n      // rebuilding from scratch.\n      const newState = transform(\n        topics,\n        (acc, topic) => {\n          acc.cursors[topic] = shouldResetState ? -1 : oldState.cursors[topic] ?? -1;\n          acc.messages[topic] = shouldResetState ? [] : oldState.messages[topic] ?? [];\n        },\n        { ...makeInitialState(), previousBlocks: blocks },\n      );\n\n      // append new messages to accumulating per-topic buffers and update cursors\n      for (const [idx, block] of blocks.entries()) {\n        if (block == undefined) {\n          break;\n        }\n\n        for (const topic of topics) {\n          const blockMessages = block.messagesByTopic[topic];\n          if (blockMessages == undefined) {\n            continue;\n          }\n\n          if (idx > (newState.cursors[topic] ?? -1)) {\n            newState.messages[topic] = (newState.messages[topic] ?? []).concat(blockMessages);\n            newState.cursors[topic] = idx;\n          }\n        }\n      }\n\n      return newState;\n    });\n  }\n\n  return state.messages;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { useTheme } from \"@mui/material\";\nimport { groupBy, intersection, isEmpty, transform, union, zipWith } from \"lodash\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useLatest } from \"react-use\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport { isLessThan, subtract } from \"@foxglove/rostime\";\nimport { Immutable, Subscription, Time } from \"@foxglove/studio\";\nimport { useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport parseRosPath, {\n  getTopicsFromPaths,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport {\n  useCachedGetMessagePathDataItems,\n  useDecodeMessagePathsForMessagesByTopic,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport { ChartDefaultView } from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport {\n  BasePlotPath,\n  DataSet,\n  PlotDataByPath,\n  PlotPath,\n  PlotXAxisVal,\n} from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport * as PlotData from \"@foxglove/studio-base/panels/Plot/plotData\";\nimport { derivative } from \"@foxglove/studio-base/panels/Plot/transformPlotRange\";\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\nimport { Bounds, makeInvertedBounds, unionBounds } from \"@foxglove/studio-base/types/Bounds\";\nimport { getTimestampForMessage } from \"@foxglove/studio-base/util/time\";\n\nimport { DataSets, getDatasets, mergeDatasets } from \"./datasets\";\nimport { useFlattenedBlocksByTopic } from \"./useFlattenedBlocksByTopic\";\n\nconst ZERO_TIME = { sec: 0, nsec: 0 };\n\nconst EmptyAllFrames: Record<string, MessageEvent[]> = {};\n\nconst EmptyDatasets: DataSets = {\n  datasets: [],\n  bounds: makeInvertedBounds(),\n  pathsWithMismatchedDataLengths: [],\n};\n\ntype Params = Immutable<{\n  allPaths: string[];\n  followingView: undefined | ChartDefaultView;\n  showSingleCurrentMessage: boolean;\n  startTime: undefined | Time;\n  xAxisVal: PlotXAxisVal;\n  xAxisPath?: BasePlotPath;\n  yAxisPaths: PlotPath[];\n}>;\n\ntype State = DataSets & {\n  allFrames: Record<string, Immutable<MessageEvent[]>>;\n  allPaths: readonly string[];\n  bounds: Bounds;\n  cursors: Record<string, number>;\n  subscriptions: Subscription[];\n  xAxisVal: PlotXAxisVal;\n  xAxisPath: undefined | BasePlotPath;\n};\n\n/**\n * Applies the @derivative modifier to the dataset. This has to be done on the complete\n * dataset, not calculated incrementally.\n */\nfunction applyDerivativeToDatasets(datasets: DataSets[\"datasets\"]): DataSets[\"datasets\"] {\n  return datasets.map((dataset) => {\n    if (dataset == undefined) {\n      return undefined;\n    }\n\n    if (dataset.path.value.endsWith(\".@derivative\")) {\n      return {\n        path: dataset.path,\n        dataset: { ...dataset.dataset, data: derivative(dataset.dataset.data) },\n      };\n    } else {\n      return dataset;\n    }\n  });\n}\n\n/**\n * Sorts datsets by header stamp, which at this point in the processing chain is the x value of each point.\n * This has to be done on the complete dataset, not point by point.\n *\n * Messages are provided in receive time order but header stamps might be out of order\n * This would create zig-zag lines connecting the wrong points. Sorting the header stamp values (x)\n * results in the datums being in the correct order for connected lines.\n *\n * An example is when messages at the same receive time have different header stamps. The receive\n * time ordering is undefined (could be different for different data sources), but the header stamps\n * still need sorting so the plot renders correctly.\n */\nfunction sortDatasetsByHeaderStamp(datasets: DataSets[\"datasets\"]): DataSets[\"datasets\"] {\n  return datasets.map((dataset) => {\n    if (dataset == undefined) {\n      return undefined;\n    }\n\n    if (dataset.path.timestampMethod !== \"headerStamp\") {\n      return dataset;\n    }\n\n    return {\n      path: dataset.path,\n      dataset: { ...dataset.dataset, data: dataset.dataset.data.sort((a, b) => a.x - b.x) },\n    };\n  });\n}\n\nfunction makeInitialState(): State {\n  return {\n    allFrames: {},\n    allPaths: [],\n    bounds: makeInvertedBounds(),\n    cursors: {},\n    datasets: [],\n    subscriptions: [],\n    pathsWithMismatchedDataLengths: [],\n    xAxisVal: \"timestamp\",\n    xAxisPath: undefined,\n  };\n}\n\n/**\n * Collates and combines datasets from alLFrames and currentFrame messages.\n */\nexport function usePlotPanelDatasets(params: Params): {\n  bounds: Bounds;\n  datasets: DataSet[];\n  pathsWithMismatchedDataLengths: string[];\n} {\n  const {\n    allPaths,\n    followingView,\n    showSingleCurrentMessage,\n    startTime,\n    xAxisPath,\n    xAxisVal,\n    yAxisPaths,\n  } = params;\n\n  const theme = useTheme();\n\n  // When iterating message events, we need a reverse lookup from topic to the\n  // paths that requested the topic.\n  const topicToPaths = useMemo(\n    () => groupBy(allPaths, (path) => parseRosPath(path)?.topicName),\n    [allPaths],\n  );\n\n  const subscribeTopics = useShallowMemo(getTopicsFromPaths(allPaths));\n\n  const subscriptions: Subscription[] = useMemo(() => {\n    return subscribeTopics.map((topic) => ({ topic, preload: true }));\n  }, [subscribeTopics]);\n\n  const [state, setState] = useState(makeInitialState);\n\n  const allFramesFromBlocks = useFlattenedBlocksByTopic(subscribeTopics);\n\n  const allFrames = showSingleCurrentMessage ? EmptyAllFrames : allFramesFromBlocks;\n\n  const decodeMessagePathsForMessagesByTopic = useDecodeMessagePathsForMessagesByTopic(allPaths);\n\n  const resetDatasets =\n    allPaths !== state.allPaths || xAxisVal !== state.xAxisVal || xAxisPath !== state.xAxisPath;\n\n  if (allFrames !== state.allFrames || resetDatasets) {\n    // use setState directly instead of useEffect to skip an extra render.\n    setState((oldState) => {\n      const newState = resetDatasets ? makeInitialState() : oldState;\n\n      const newFramesByTopic = transform(\n        allFrames,\n        (acc, messages, topic) => {\n          acc[topic] = messages.slice(newState.cursors[topic] ?? 0);\n        },\n        {} as State[\"allFrames\"],\n      );\n\n      const newCursors = transform(\n        allFrames,\n        (acc, messages, topic) => {\n          acc[topic] = messages.length;\n        },\n        {} as State[\"cursors\"],\n      );\n\n      const newBlockItems = PlotData.getBlockItemsByPath(\n        decodeMessagePathsForMessagesByTopic,\n        newFramesByTopic,\n      );\n\n      const anyNewFrames = Object.values(newFramesByTopic).some((msgs) => msgs.length > 0);\n\n      const newDatasets = anyNewFrames\n        ? getDatasets({\n            paths: yAxisPaths,\n            itemsByPath: newBlockItems,\n            startTime: startTime ?? ZERO_TIME,\n            xAxisVal,\n            xAxisPath,\n            invertedTheme: theme.palette.mode === \"dark\",\n          })\n        : EmptyDatasets;\n\n      const mergedDatasets: State[\"datasets\"] = zipWith(\n        newState.datasets,\n        newDatasets.datasets,\n        mergeDatasets,\n      );\n\n      return {\n        allFrames,\n        allPaths,\n        bounds: unionBounds(newState.bounds, newDatasets.bounds),\n        cursors: newCursors,\n        datasets: mergedDatasets,\n        pathsWithMismatchedDataLengths: union(\n          newState.pathsWithMismatchedDataLengths,\n          newDatasets.pathsWithMismatchedDataLengths,\n        ),\n        subscriptions,\n        xAxisPath,\n        xAxisVal,\n      };\n    });\n  }\n\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(allPaths);\n\n  // When restoring, keep only the paths that are present in allPaths. Without this, the\n  // reducer value will grow unbounded with new paths as users add/remove series.\n  const restore = useCallback(\n    (previous?: DataSets): DataSets => {\n      if (previous) {\n        return {\n          datasets: previous.datasets.filter((ds) => ds && allPaths.includes(ds.path.value)),\n          bounds: previous.bounds,\n          pathsWithMismatchedDataLengths: intersection(\n            previous.pathsWithMismatchedDataLengths,\n            allPaths,\n          ),\n        };\n      } else {\n        return {\n          datasets: [],\n          bounds: makeInvertedBounds(),\n          pathsWithMismatchedDataLengths: [],\n        };\n      }\n    },\n    [allPaths],\n  );\n\n  const latestAllFramesDatasets = useLatest(state.datasets);\n\n  const addMessages = useCallback(\n    (accumulated: DataSets, msgEvents: Immutable<MessageEvent[]>) => {\n      const lastEventTime = msgEvents.at(-1)?.receiveTime;\n      const isFollowing = followingView?.type === \"following\";\n      const newMessages: PlotDataByPath = {};\n\n      for (const msgEvent of msgEvents) {\n        const paths = topicToPaths[msgEvent.topic];\n        if (!paths) {\n          continue;\n        }\n\n        for (const [pathIndex, path] of paths.entries()) {\n          // Skip datasets we're getting from allFrames.\n          if ((latestAllFramesDatasets.current[pathIndex]?.dataset.data.length ?? 0) > 0) {\n            continue;\n          }\n\n          const dataItem = cachedGetMessagePathDataItems(path, msgEvent);\n          if (!dataItem) {\n            continue;\n          }\n\n          const headerStamp = getTimestampForMessage(msgEvent.message);\n          const plotDataItem = {\n            queriedData: dataItem,\n            receiveTime: msgEvent.receiveTime,\n            headerStamp,\n          };\n\n          if (showSingleCurrentMessage) {\n            newMessages[path] = [plotDataItem];\n          } else {\n            let plotDataPath = newMessages[path]?.slice() ?? [];\n            const plotDataItems = plotDataPath;\n            // If we are using the _following_ view mode, truncate away any\n            // items older than the view window.\n            if (lastEventTime && isFollowing) {\n              const minStamp = subtract(lastEventTime, { sec: followingView.width, nsec: 0 });\n              const newItems = plotDataItems.filter(\n                (item) => !isLessThan(item.receiveTime, minStamp),\n              );\n              newItems.push(plotDataItem);\n              plotDataPath = newItems;\n            } else {\n              plotDataPath = plotDataItems.concat(plotDataItem);\n            }\n\n            newMessages[path] = plotDataPath;\n          }\n        }\n      }\n\n      if (isEmpty(newMessages)) {\n        return accumulated;\n      }\n\n      const newDatasets = getDatasets({\n        paths: yAxisPaths,\n        itemsByPath: newMessages,\n        startTime: startTime ?? ZERO_TIME,\n        xAxisVal,\n        xAxisPath,\n        invertedTheme: theme.palette.mode === \"dark\",\n      });\n\n      const mergedDatasets: DataSets = {\n        bounds: unionBounds(accumulated.bounds, newDatasets.bounds),\n        datasets: zipWith(accumulated.datasets, newDatasets.datasets, mergeDatasets),\n        pathsWithMismatchedDataLengths: union(\n          accumulated.pathsWithMismatchedDataLengths,\n          newDatasets.pathsWithMismatchedDataLengths,\n        ),\n      };\n\n      return mergedDatasets;\n    },\n    [\n      cachedGetMessagePathDataItems,\n      followingView,\n      latestAllFramesDatasets,\n      showSingleCurrentMessage,\n      startTime,\n      theme.palette.mode,\n      topicToPaths,\n      xAxisPath,\n      xAxisVal,\n      yAxisPaths,\n    ],\n  );\n\n  const currentFrameDatasets = useMessageReducer<DataSets>({\n    topics: subscribeTopics,\n    preloadType: \"full\",\n    restore,\n    addMessages,\n  });\n\n  // Combine allFrames & currentFrames datasets, optionally applying the @derivative\n  // modifier and sorting by header stamp, which can only be calculated on a complete\n  // dataset, not point by point.\n  const combinedDatasets = useMemo(() => {\n    const stateWithDerivatives = applyDerivativeToDatasets(state.datasets);\n    const sortedStateWithDerivatives = sortDatasetsByHeaderStamp(stateWithDerivatives);\n    const currentFrameWithDerivatives = applyDerivativeToDatasets(currentFrameDatasets.datasets);\n    const sortedCurrentFrameWithDerivatives = sortDatasetsByHeaderStamp(\n      currentFrameWithDerivatives,\n    );\n    const allDatasets = Object.values(sortedStateWithDerivatives).concat(\n      Object.values(sortedCurrentFrameWithDerivatives),\n    );\n    const bounds = unionBounds(state.bounds, currentFrameDatasets.bounds);\n    return {\n      bounds,\n      datasets: filterMap(allDatasets, (ds) => (ds ? ds.dataset : undefined)),\n      pathsWithMismatchedDataLengths: union(\n        state.pathsWithMismatchedDataLengths,\n        currentFrameDatasets.pathsWithMismatchedDataLengths,\n      ),\n    };\n  }, [\n    currentFrameDatasets.bounds,\n    currentFrameDatasets.datasets,\n    currentFrameDatasets.pathsWithMismatchedDataLengths,\n    state.bounds,\n    state.datasets,\n    state.pathsWithMismatchedDataLengths,\n  ]);\n\n  return combinedDatasets;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useTheme } from \"@mui/material\";\nimport { ScaleOptions } from \"chart.js\";\nimport { AnnotationOptions } from \"chartjs-plugin-annotation\";\nimport { ComponentProps, useMemo } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport TimeBasedChart, {\n  ChartDefaultView,\n  Props as TimeBasedChartProps,\n} from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { DataSets } from \"@foxglove/studio-base/panels/Plot/datasets\";\nimport { getLineColor } from \"@foxglove/studio-base/util/plotColors\";\n\nimport { PlotPath, PlotXAxisVal, isReferenceLinePlotPathType } from \"./internalTypes\";\n\n// A \"reference line\" plot path is a numeric value. It creates a horizontal line on the plot at the specified value.\nfunction getAnnotationFromReferenceLine(path: PlotPath, index: number): AnnotationOptions {\n  const borderColor = getLineColor(path.color, index);\n  return {\n    type: \"line\",\n    display: true,\n    drawTime: \"beforeDatasetsDraw\",\n    scaleID: \"y\",\n    label: { content: path.value, width: \"100%\", height: \"100%\" },\n    borderColor,\n    borderDash: [5, 5],\n    borderWidth: 1,\n    value: Number.parseFloat(path.value),\n  };\n}\n\nfunction getAnnotations(paths: PlotPath[]) {\n  return filterMap(paths, (path: PlotPath, index: number) => {\n    if (!path.enabled) {\n      return undefined;\n    } else if (isReferenceLinePlotPathType(path)) {\n      return getAnnotationFromReferenceLine(path, index);\n    }\n    return undefined;\n  });\n}\n\ntype PlotChartProps = {\n  isSynced: boolean;\n  paths: PlotPath[];\n  minYValue: number;\n  maxYValue: number;\n  showXAxisLabels: boolean;\n  showYAxisLabels: boolean;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  datasetBounds: DataSets[\"bounds\"];\n  xAxisVal: PlotXAxisVal;\n  currentTime?: number;\n  defaultView?: ChartDefaultView;\n  onClick?: TimeBasedChartProps[\"onClick\"];\n};\nexport default function PlotChart(props: PlotChartProps): JSX.Element {\n  const theme = useTheme();\n  const {\n    currentTime,\n    datasetBounds,\n    datasets,\n    defaultView,\n    isSynced,\n    maxYValue,\n    minYValue,\n    onClick,\n    paths,\n    showXAxisLabels,\n    showYAxisLabels,\n    xAxisVal,\n  } = props;\n\n  const annotations = useMemo(() => getAnnotations(paths), [paths]);\n\n  const yAxes = useMemo((): ScaleOptions<\"linear\"> => {\n    const min = isNaN(minYValue) ? undefined : minYValue;\n    const max = isNaN(maxYValue) ? undefined : maxYValue;\n    return {\n      min,\n      max,\n      ticks: {\n        display: showYAxisLabels,\n        precision: 3,\n      },\n      grid: {\n        color: theme.palette.divider,\n      },\n    };\n  }, [maxYValue, minYValue, showYAxisLabels, theme]);\n\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const {\n    width,\n    height,\n    ref: sizeRef,\n  } = useResizeDetector({\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  const data = useMemo(() => {\n    return { datasets };\n  }, [datasets]);\n\n  return (\n    <div style={{ width: \"100%\", flexGrow: 1, overflow: \"hidden\", padding: \"2px\" }} ref={sizeRef}>\n      <TimeBasedChart\n        key={xAxisVal}\n        isSynced={isSynced}\n        zoom\n        width={width ?? 0}\n        height={height ?? 0}\n        data={data}\n        dataBounds={datasetBounds}\n        annotations={annotations}\n        type=\"scatter\"\n        yAxes={yAxes}\n        xAxisIsPlaybackTime={xAxisVal === \"timestamp\"}\n        showXAxisLabels={showXAxisLabels}\n        currentTime={currentTime}\n        defaultView={defaultView}\n        onClick={onClick}\n      />\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { PANEL_TITLE_CONFIG_KEY } from \"@foxglove/studio-base/util/layout\";\n\nimport type { BasePlotPath, PlotPath, PlotXAxisVal } from \"./internalTypes\";\n\n/**\n * Coalesces null, undefined and empty string to undefined.\n */\nfunction presence<T>(value: undefined | T): undefined | T {\n  if (value === \"\") {\n    return undefined;\n  }\n\n  return value == undefined ? undefined : value;\n}\n\nexport function plotPathDisplayName(path: Readonly<PlotPath>, index: number): string {\n  return presence(path.label) ?? presence(path.value) ?? `Series ${index + 1}`;\n}\n\ntype DeprecatedPlotConfig = {\n  showSidebar?: boolean;\n  sidebarWidth?: number;\n};\n\nexport type PlotConfig = DeprecatedPlotConfig & {\n  /** @deprecated Replaced by global panel rename functionality https://github.com/foxglove/studio/pull/5225 */\n  title?: string;\n  paths: PlotPath[];\n  minXValue?: number;\n  maxXValue?: number;\n  minYValue?: string | number;\n  maxYValue?: string | number;\n  showLegend: boolean;\n  legendDisplay: \"floating\" | \"top\" | \"left\" | \"none\";\n  showPlotValuesInLegend: boolean;\n  showXAxisLabels: boolean;\n  showYAxisLabels: boolean;\n  isSynced: boolean;\n  xAxisVal: PlotXAxisVal;\n  xAxisPath?: BasePlotPath;\n  followingViewWidth?: number;\n  sidebarDimension: number;\n  [PANEL_TITLE_CONFIG_KEY]?: string;\n};\n\nexport const plotableRosTypes = [\n  \"bool\",\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n  \"float32\",\n  \"float64\",\n  \"time\",\n  \"duration\",\n  \"string\",\n  \"json\",\n];\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { ErrorCircle16Filled, Square24Filled, Square24Regular } from \"@fluentui/react-icons\";\nimport { Checkbox, Tooltip, Typography } from \"@mui/material\";\nimport { ComponentProps, useMemo, useState } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { usePanelContext } from \"@foxglove/studio-base/components/PanelContext\";\nimport TimeBasedChart from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { useSelectedPanels } from \"@foxglove/studio-base/context/CurrentLayoutContext\";\nimport { useHoverValue } from \"@foxglove/studio-base/context/TimelineInteractionStateContext\";\nimport { useWorkspaceActions } from \"@foxglove/studio-base/context/Workspace/useWorkspaceActions\";\nimport { plotPathDisplayName } from \"@foxglove/studio-base/panels/Plot/types\";\nimport { getLineColor } from \"@foxglove/studio-base/util/plotColors\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport { PlotPath } from \"./internalTypes\";\n\ntype PlotLegendRowProps = {\n  currentTime?: number;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  hasMismatchedDataLength: boolean;\n  index: number;\n  onClickPath: () => void;\n  path: PlotPath;\n  paths: PlotPath[];\n  savePaths: (paths: PlotPath[]) => void;\n  showPlotValuesInLegend: boolean;\n};\n\nconst ROW_HEIGHT = 28;\n\nconst useStyles = makeStyles<void, \"plotName\">()((theme, _params, classes) => ({\n  root: {\n    display: \"contents\",\n    cursor: \"pointer\",\n\n    \"&:hover\": {\n      \"& > *:last-child\": {\n        opacity: 1,\n      },\n      \"& > *\": {\n        backgroundColor: theme.palette.background.paper,\n        backgroundImage: `linear-gradient(${[\n          \"0deg\",\n          theme.palette.action.focus,\n          theme.palette.action.focus,\n        ].join(\" ,\")})`,\n      },\n    },\n  },\n  showPlotValue: {\n    [`.${classes.plotName}`]: {\n      gridColumn: \"span 1\",\n      padding: theme.spacing(0, 1.5, 0, 0.5),\n    },\n  },\n  listIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"sticky\",\n    height: ROW_HEIGHT,\n    left: 0,\n  },\n  checkbox: {\n    fontSize: \"1em\",\n    padding: theme.spacing(0.975),\n    borderRadius: 0,\n\n    \"svg:not(.MuiSvgIcon-root)\": {\n      fontSize: \"1em\",\n    },\n  },\n  disabledPathLabel: {\n    opacity: 0.5,\n  },\n  plotName: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: ROW_HEIGHT,\n    padding: theme.spacing(0, 2.5, 0, 0.5),\n    gridColumn: \"span 2\",\n    fontFeatureSettings: `${fonts.SANS_SERIF_FEATURE_SETTINGS}, \"zero\"`,\n\n    \".MuiTypography-root\": {\n      whiteSpace: \"nowrap\",\n    },\n  },\n  plotValue: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: ROW_HEIGHT,\n    padding: theme.spacing(0.25, 1, 0.25, 0.25),\n  },\n  errorIcon: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport function PlotLegendRow({\n  currentTime,\n  datasets,\n  hasMismatchedDataLength,\n  index,\n  onClickPath,\n  path,\n  paths,\n  savePaths,\n  showPlotValuesInLegend,\n}: PlotLegendRowProps): JSX.Element {\n  const { openPanelSettings } = useWorkspaceActions();\n  const { id: panelId } = usePanelContext();\n  const { setSelectedPanelIds } = useSelectedPanels();\n  const { classes, cx } = useStyles();\n\n  const correspondingData = useMemo(() => {\n    if (!showPlotValuesInLegend) {\n      return [];\n    }\n    return datasets[index]?.data ?? [];\n  }, [datasets, index, showPlotValuesInLegend]);\n\n  const [hoverComponentId] = useState<string>(() => uuidv4());\n  const hoverValue = useHoverValue({\n    componentId: hoverComponentId,\n    isTimestampScale: true,\n  });\n\n  const currentValue = useMemo(() => {\n    if (!showPlotValuesInLegend) {\n      return undefined;\n    }\n    const timeToCompare = hoverValue?.value ?? currentTime;\n\n    let value;\n    for (const pt of correspondingData) {\n      if (timeToCompare == undefined || pt == undefined || pt.x > timeToCompare) {\n        break;\n      }\n      value = pt.y;\n    }\n    return value;\n  }, [showPlotValuesInLegend, hoverValue?.value, currentTime, correspondingData]);\n\n  return (\n    <div\n      className={cx(classes.root, {\n        [classes.showPlotValue]: showPlotValuesInLegend,\n      })}\n      onClick={() => {\n        setSelectedPanelIds([panelId]);\n        openPanelSettings();\n        onClickPath();\n      }}\n    >\n      <div className={classes.listIcon}>\n        <Checkbox\n          className={classes.checkbox}\n          checked={path.enabled}\n          size=\"small\"\n          title=\"Toggle visibility\"\n          style={{ color: getLineColor(path.color, index) }}\n          icon={<Square24Regular />}\n          checkedIcon={<Square24Filled />}\n          onClick={(event) => event.stopPropagation()} // prevent toggling from opening settings\n          onChange={() => {\n            const newPaths = paths.slice();\n            const newPath = newPaths[index];\n\n            if (newPath) {\n              newPaths[index] = { ...newPath, enabled: !newPath.enabled };\n            }\n            savePaths(newPaths);\n          }}\n        />\n      </div>\n      <div\n        className={classes.plotName}\n        style={{ gridColumn: !showPlotValuesInLegend ? \"span 2\" : undefined }}\n      >\n        <Typography\n          noWrap={showPlotValuesInLegend}\n          flex=\"auto\"\n          variant=\"body2\"\n          className={cx({ [classes.disabledPathLabel]: !path.enabled })}\n        >\n          {plotPathDisplayName(path, index)}\n        </Typography>\n        {hasMismatchedDataLength && (\n          <Tooltip\n            placement=\"top\"\n            title=\"Mismatch in the number of elements in x-axis and y-axis messages\"\n          >\n            <ErrorCircle16Filled className={classes.errorIcon} />\n          </Tooltip>\n        )}\n      </div>\n      {showPlotValuesInLegend && (\n        <div className={classes.plotValue}>\n          <Typography\n            variant=\"body2\"\n            align=\"right\"\n            color={hoverValue?.value != undefined ? \"warning.main\" : \"text.secondary\"}\n          >\n            {currentValue ?? \"\"}\n          </Typography>\n        </div>\n      )}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport {\n  ChevronDown20Regular,\n  ChevronUp20Regular,\n  ChevronLeft20Regular,\n  ChevronRight20Regular,\n  TextBulletListLtr20Filled,\n  ArrowMinimize24Filled,\n} from \"@fluentui/react-icons\";\nimport { IconButton } from \"@mui/material\";\nimport { clamp } from \"lodash\";\nimport { ComponentProps, useCallback, useMemo, useRef } from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { PANEL_TOOLBAR_MIN_HEIGHT } from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport TimeBasedChart from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { PlotLegendRow } from \"@foxglove/studio-base/panels/Plot/PlotLegendRow\";\nimport { PlotPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { PlotConfig } from \"@foxglove/studio-base/panels/Plot/types\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nconst minLegendWidth = 25;\nconst maxLegendWidth = 800;\n\ntype Props = {\n  currentTime?: number;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  legendDisplay: \"floating\" | \"top\" | \"left\";\n  onClickPath: (index: number) => void;\n  paths: PlotPath[];\n  pathsWithMismatchedDataLengths: string[];\n  saveConfig: SaveConfig<PlotConfig>;\n  showLegend: boolean;\n  showPlotValuesInLegend: boolean;\n  sidebarDimension: number;\n};\n\nconst useStyles = makeStyles<void, \"container\" | \"toggleButton\" | \"toggleButtonFloating\">()(\n  ({ palette, shadows, shape, spacing }, _params, classes) => ({\n    root: {\n      display: \"flex\",\n      overflow: \"hidden\",\n    },\n    rootFloating: {\n      padding: spacing(0.75), // pad the container to prevent shadow from being clipped\n      pointerEvents: \"none\",\n      gap: spacing(0.75),\n      position: \"absolute\",\n      top: spacing(4.5),\n      left: spacing(4),\n      zIndex: 1000,\n      backgroundColor: \"transparent\",\n      alignItems: \"flex-start\",\n      height: `calc(100% - ${PANEL_TOOLBAR_MIN_HEIGHT}px - ${spacing(5.25)})`,\n      overflow: \"hidden\",\n\n      [`.${classes.container}`]: {\n        pointerEvents: \"auto\",\n        borderRadius: shape.borderRadius,\n        backgroundImage: `linear-gradient(${[\n          \"0deg\",\n          tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n          tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n        ].join(\" ,\")})`,\n        backgroundColor: tinycolor(palette.background.paper).setAlpha(0.8).toHex8String(),\n        backdropFilter: \"blur(3px)\",\n        maxWidth: `calc(100% - ${spacing(1)})`,\n        boxShadow: shadows[3],\n      },\n    },\n    rootLeft: {\n      alignItems: \"flex-start\",\n      maxWidth: \"80%\",\n\n      [`.${classes.toggleButton}`]: {\n        padding: spacing(0.25),\n        height: \"100%\",\n        borderRadius: 0,\n        borderTop: \"none\",\n        borderBottom: \"none\",\n      },\n      [`.${classes.container}`]: {\n        overflow: \"auto\",\n        height: \"100%\",\n        alignContent: \"flex-start\",\n      },\n    },\n    rootTop: {\n      flexDirection: \"column\",\n      maxHeight: \"80%\",\n\n      [`.${classes.toggleButton}`]: {\n        padding: spacing(0.25),\n        borderRadius: 0,\n        borderRight: \"none\",\n        borderLeft: \"none\",\n      },\n    },\n    container: {\n      alignItems: \"center\",\n      overflow: \"auto\",\n      display: \"grid\",\n      gridTemplateColumns: \"auto minmax(0, 1fr) auto\",\n    },\n    dragHandle: {\n      userSelect: \"none\",\n      border: `0px solid ${palette.action.hover}`,\n\n      \"&:hover\": {\n        borderColor: palette.action.selected,\n      },\n    },\n    toggleButton: {\n      fontSize: \"1rem\",\n      padding: spacing(0.75),\n\n      \"svg:not(.MuiSvgIcon-root)\": {\n        fontSize: \"1em\",\n      },\n    },\n    toggleButtonFloating: {\n      backdropFilter: \"blur(3px)\",\n      pointerEvents: \"auto\",\n      backgroundImage: `linear-gradient(${[\n        \"0deg\",\n        tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n        tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n      ].join(\" ,\")})`,\n      backgroundColor: tinycolor(palette.background.paper).setAlpha(0.8).toHex8String(),\n      boxShadow: shadows[3],\n\n      \"&:hover\": {\n        backgroundColor: palette.background.paper,\n        backgroundImage: `linear-gradient(0deg, ${palette.action.hover}, ${palette.action.hover})`,\n      },\n    },\n  }),\n);\n\nexport function PlotLegend(props: Props): JSX.Element {\n  const {\n    currentTime,\n    datasets,\n    legendDisplay,\n    onClickPath,\n    paths,\n    pathsWithMismatchedDataLengths,\n    saveConfig,\n    showLegend,\n    showPlotValuesInLegend,\n    sidebarDimension,\n  } = props;\n  const { classes, cx } = useStyles();\n\n  const dragStart = useRef({ x: 0, y: 0, sidebarDimension: 0 });\n\n  const toggleLegend = useCallback(\n    () => saveConfig({ showLegend: !showLegend }),\n    [showLegend, saveConfig],\n  );\n\n  const legendIcon = useMemo(() => {\n    switch (legendDisplay) {\n      case \"floating\":\n        return showLegend ? <ArrowMinimize24Filled /> : <TextBulletListLtr20Filled />;\n      case \"left\":\n        return showLegend ? <ChevronLeft20Regular /> : <ChevronRight20Regular />;\n      case \"top\":\n        return showLegend ? <ChevronUp20Regular /> : <ChevronDown20Regular />;\n    }\n  }, [showLegend, legendDisplay]);\n\n  const handlePointerMove = useCallback(\n    (event: React.PointerEvent) => {\n      if (legendDisplay === \"floating\" || event.buttons !== 1) {\n        return;\n      }\n      const delta =\n        legendDisplay === \"left\"\n          ? event.clientX - dragStart.current.x\n          : event.clientY - dragStart.current.y;\n      const newDimension = clamp(\n        dragStart.current.sidebarDimension + delta,\n        minLegendWidth,\n        maxLegendWidth,\n      );\n      saveConfig({ sidebarDimension: newDimension });\n    },\n    [legendDisplay, saveConfig],\n  );\n\n  const handlePointerDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.currentTarget.setPointerCapture(event.pointerId);\n      dragStart.current = { x: event.clientX, y: event.clientY, sidebarDimension };\n    },\n    [sidebarDimension],\n  );\n\n  const handlePointerUp = useCallback((event: React.PointerEvent) => {\n    event.currentTarget.releasePointerCapture(event.pointerId);\n  }, []);\n\n  const savePaths = useCallback(\n    (newPaths: PlotPath[]) => {\n      saveConfig({ paths: newPaths });\n    },\n    [saveConfig],\n  );\n\n  return (\n    <div\n      className={cx(classes.root, {\n        [classes.rootFloating]: legendDisplay === \"floating\",\n        [classes.rootLeft]: legendDisplay === \"left\",\n        [classes.rootTop]: legendDisplay === \"top\",\n      })}\n    >\n      <IconButton\n        onClick={toggleLegend}\n        className={cx(classes.toggleButton, {\n          [classes.toggleButtonFloating]: legendDisplay === \"floating\",\n        })}\n      >\n        {legendIcon}\n      </IconButton>\n      {showLegend && (\n        <Stack\n          flexGrow={1}\n          gap={0.5}\n          overflow=\"auto\"\n          fullHeight={legendDisplay !== \"top\"}\n          style={{\n            height: legendDisplay === \"top\" ? Math.round(sidebarDimension) : undefined,\n            width: legendDisplay === \"left\" ? Math.round(sidebarDimension) : undefined,\n          }}\n        >\n          <Stack\n            flex=\"auto\"\n            fullWidth\n            fullHeight={legendDisplay !== \"top\"}\n            overflow={legendDisplay === \"floating\" ? \"auto\" : undefined}\n          >\n            <div className={classes.container}>\n              {paths.map((path, index) => (\n                <PlotLegendRow\n                  key={index}\n                  index={index}\n                  onClickPath={() => onClickPath(index)}\n                  path={path}\n                  paths={paths}\n                  hasMismatchedDataLength={pathsWithMismatchedDataLengths.includes(path.value)}\n                  datasets={datasets}\n                  currentTime={currentTime}\n                  savePaths={savePaths}\n                  showPlotValuesInLegend={showPlotValuesInLegend}\n                />\n              ))}\n            </div>\n          </Stack>\n        </Stack>\n      )}\n      {legendDisplay !== \"floating\" && (\n        <div\n          className={classes.dragHandle}\n          onPointerDown={handlePointerDown}\n          onPointerMove={handlePointerMove}\n          onPointerUp={handlePointerUp}\n          style={\n            legendDisplay === \"left\"\n              ? {\n                  marginLeft: -6,\n                  cursor: \"ew-resize\",\n                  borderRightWidth: 2,\n                  height: \"100%\",\n                  width: 4,\n                }\n              : {\n                  marginTop: -6,\n                  cursor: \"ns-resize\",\n                  borderBottomWidth: 2,\n                  width: \"100%\",\n                  height: 4,\n                }\n          }\n        />\n      )}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { downloadFiles } from \"@foxglove/studio-base/util/download\";\nimport { formatTimeRaw } from \"@foxglove/studio-base/util/time\";\n\nimport { DataSet, Datum, PlotXAxisVal } from \"./internalTypes\";\n\nfunction getCSVRow(label: string | undefined, data: Datum) {\n  const { x, value, receiveTime, headerStamp } = data;\n  const receiveTimeFloat = formatTimeRaw(receiveTime);\n  const stampTime = headerStamp ? formatTimeRaw(headerStamp) : \"\";\n  return [x, receiveTimeFloat, stampTime, label, value];\n}\n\nconst getCVSColName = (xAxisVal: PlotXAxisVal): string => {\n  return {\n    timestamp: \"elapsed time\",\n    index: \"index\",\n    custom: \"x value\",\n    currentCustom: \"x value\",\n  }[xAxisVal];\n};\n\nfunction generateCSV(datasets: DataSet[], xAxisVal: PlotXAxisVal): string {\n  const headLine = [getCVSColName(xAxisVal), \"receive time\", \"header.stamp\", \"topic\", \"value\"];\n  const combinedLines = [];\n  combinedLines.push(headLine);\n  for (const dataset of datasets) {\n    for (const datum of dataset.data) {\n      combinedLines.push(getCSVRow(dataset.label, datum));\n    }\n  }\n  return combinedLines.join(\"\\n\");\n}\n\nfunction downloadCSV(datasets: DataSet[], xAxisVal: PlotXAxisVal): void {\n  const csvData = generateCSV(datasets, xAxisVal);\n  const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8;\" });\n  downloadFiles([{ blob, fileName: `plot_data.csv` }]);\n}\n\nexport { downloadCSV, generateCSV };\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { TFunction } from \"i18next\";\nimport { produce } from \"immer\";\nimport { isEqual, isNumber, set } from \"lodash\";\nimport memoizeWeak from \"memoize-weak\";\nimport { useCallback, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SettingsTreeAction, SettingsTreeNode, SettingsTreeNodes } from \"@foxglove/studio\";\nimport { PlotPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { lineColors } from \"@foxglove/studio-base/util/plotColors\";\n\nimport { plotableRosTypes, PlotConfig, plotPathDisplayName } from \"./types\";\n\nconst makeSeriesNode = memoizeWeak(\n  (path: PlotPath, index: number, t: TFunction<\"plot\">): SettingsTreeNode => {\n    return {\n      actions: [\n        {\n          type: \"action\",\n          id: \"delete-series\",\n          label: t(\"deleteSeries\"),\n          display: \"inline\",\n          icon: \"Clear\",\n        },\n      ],\n      label: plotPathDisplayName(path, index),\n      visible: path.enabled,\n      fields: {\n        value: {\n          label: t(\"messagePath\"),\n          input: \"messagepath\",\n          value: path.value,\n          validTypes: plotableRosTypes,\n          supportsMathModifiers: true,\n        },\n        label: {\n          input: \"string\",\n          label: t(\"label\"),\n          value: path.label,\n        },\n        color: {\n          input: \"rgb\",\n          label: t(\"color\"),\n          value: path.color ?? lineColors[index % lineColors.length],\n        },\n        showLine: {\n          label: t(\"showLine\"),\n          input: \"boolean\",\n          value: path.showLine !== false,\n        },\n        timestampMethod: {\n          input: \"select\",\n          label: t(\"timestamp\"),\n          value: path.timestampMethod,\n          options: [\n            { label: t(\"receiveTime\"), value: \"receiveTime\" },\n            { label: t(\"headerStamp\"), value: \"headerStamp\" },\n          ],\n        },\n      },\n    };\n  },\n);\n\nconst makeRootSeriesNode = memoizeWeak(\n  (paths: PlotPath[], t: TFunction<\"plot\">): SettingsTreeNode => {\n    const children = Object.fromEntries(\n      paths.map((path, index) => [`${index}`, makeSeriesNode(path, index, t)]),\n    );\n    return {\n      label: t(\"series\"),\n      children,\n      actions: [\n        {\n          type: \"action\",\n          id: \"add-series\",\n          label: t(\"addSeries\"),\n          display: \"inline\",\n          icon: \"Addchart\",\n        },\n      ],\n    };\n  },\n);\n\nfunction buildSettingsTree(config: PlotConfig, t: TFunction<\"plot\">): SettingsTreeNodes {\n  const maxYError =\n    isNumber(config.minYValue) && isNumber(config.maxYValue) && config.minYValue >= config.maxYValue\n      ? t(\"maxYError\")\n      : undefined;\n\n  const maxXError =\n    isNumber(config.minXValue) && isNumber(config.maxXValue) && config.minXValue >= config.maxXValue\n      ? t(\"maxXError\")\n      : undefined;\n\n  return {\n    general: {\n      label: t(\"general\"),\n      fields: {\n        isSynced: { label: t(\"syncWithOtherPlots\"), input: \"boolean\", value: config.isSynced },\n      },\n    },\n    legend: {\n      label: t(\"legend\"),\n      fields: {\n        legendDisplay: {\n          label: t(\"position\"),\n          input: \"select\",\n          value: config.legendDisplay,\n          options: [\n            { value: \"floating\", label: t(\"floating\") },\n            { value: \"left\", label: t(\"left\") },\n            { value: \"top\", label: t(\"top\") },\n            { value: \"none\", label: t(\"hidden\") },\n          ],\n        },\n        showPlotValuesInLegend: {\n          label: t(\"showValues\"),\n          input: \"boolean\",\n          value: config.showPlotValuesInLegend,\n        },\n      },\n    },\n    yAxis: {\n      label: t(\"yAxis\"),\n      defaultExpansionState: \"collapsed\",\n      fields: {\n        showYAxisLabels: {\n          label: t(\"showLabels\"),\n          input: \"boolean\",\n          value: config.showYAxisLabels,\n        },\n        minYValue: {\n          label: t(\"min\"),\n          input: \"number\",\n          value: config.minYValue != undefined ? Number(config.minYValue) : undefined,\n          placeholder: \"auto\",\n        },\n        maxYValue: {\n          label: t(\"max\"),\n          input: \"number\",\n          error: maxYError,\n          value: config.maxYValue != undefined ? Number(config.maxYValue) : undefined,\n          placeholder: \"auto\",\n        },\n      },\n    },\n    xAxis: {\n      label: t(\"xAxis\"),\n      defaultExpansionState: \"collapsed\",\n      fields: {\n        xAxisVal: {\n          label: t(\"value\"),\n          input: \"select\",\n          value: config.xAxisVal,\n          options: [\n            { label: t(\"timestamp\"), value: \"timestamp\" },\n            { label: t(\"index\"), value: \"index\" },\n            { label: t(\"currentPath\"), value: \"currentCustom\" },\n            { label: t(\"accumulatedPath\"), value: \"custom\" },\n          ],\n        },\n        xAxisPath:\n          config.xAxisVal === \"currentCustom\" || config.xAxisVal === \"custom\"\n            ? {\n                label: t(\"messagePath\"),\n                input: \"messagepath\",\n                value: config.xAxisPath?.value ?? \"\",\n                validTypes: plotableRosTypes,\n              }\n            : undefined,\n        showXAxisLabels: {\n          label: t(\"showLabels\"),\n          input: \"boolean\",\n          value: config.showXAxisLabels,\n        },\n        minXValue: {\n          label: t(\"min\"),\n          input: \"number\",\n          value: config.minXValue != undefined ? Number(config.minXValue) : undefined,\n          placeholder: \"auto\",\n        },\n        maxXValue: {\n          label: t(\"max\"),\n          input: \"number\",\n          error: maxXError,\n          value: config.maxXValue != undefined ? Number(config.maxXValue) : undefined,\n          placeholder: \"auto\",\n        },\n        followingViewWidth: {\n          label: t(\"secondsRange\"),\n          input: \"number\",\n          placeholder: \"auto\",\n          value: config.followingViewWidth,\n        },\n      },\n    },\n    paths: makeRootSeriesNode(config.paths, t),\n  };\n}\n\nexport function usePlotPanelSettings(\n  config: PlotConfig,\n  saveConfig: SaveConfig<PlotConfig>,\n  focusedPath?: readonly string[],\n): void {\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n  const { t } = useTranslation(\"plot\");\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action === \"update\") {\n        const { path, value } = action.payload;\n        saveConfig(\n          produce((draft) => {\n            if (path[0] === \"paths\") {\n              if (path[2] === \"visible\") {\n                set(draft, [...path.slice(0, 2), \"enabled\"], value);\n              } else {\n                set(draft, path, value);\n              }\n            } else if (isEqual(path, [\"legend\", \"legendDisplay\"])) {\n              draft.legendDisplay = value;\n              draft.showLegend = true;\n            } else if (isEqual(path, [\"xAxis\", \"xAxisPath\"])) {\n              set(draft, [\"xAxisPath\", \"value\"], value);\n            } else {\n              set(draft, path.slice(1), value);\n\n              // X min/max and following width are mutually exclusive.\n              if (path[1] === \"followingViewWidth\") {\n                draft.minXValue = undefined;\n                draft.maxXValue = undefined;\n              } else if (path[1] === \"minXValue\" || path[1] === \"maxXValue\") {\n                draft.followingViewWidth = undefined;\n              }\n            }\n          }),\n        );\n      } else {\n        if (action.payload.id === \"add-series\") {\n          saveConfig(\n            produce<PlotConfig>((draft) => {\n              draft.paths.push({\n                timestampMethod: \"receiveTime\",\n                value: \"\",\n                enabled: true,\n              });\n            }),\n          );\n        } else if (action.payload.id === \"delete-series\") {\n          const index = action.payload.path[1];\n          saveConfig(\n            produce<PlotConfig>((draft) => {\n              draft.paths.splice(Number(index), 1);\n            }),\n          );\n        }\n      }\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      focusedPath,\n      nodes: buildSettingsTree(config, t),\n    });\n  }, [actionHandler, config, focusedPath, updatePanelSettingsTree, t]);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { compact, isNumber, uniq } from \"lodash\";\nimport { ComponentProps, useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport {\n  Time,\n  add as addTimes,\n  fromSec,\n  subtract as subtractTimes,\n  toSec,\n} from \"@foxglove/rostime\";\nimport {\n  MessagePipelineContext,\n  useMessagePipeline,\n  useMessagePipelineGetter,\n} from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport {\n  PanelContextMenu,\n  PanelContextMenuItem,\n} from \"@foxglove/studio-base/components/PanelContextMenu\";\nimport PanelToolbar, {\n  PANEL_TOOLBAR_MIN_HEIGHT,\n} from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { ChartDefaultView } from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { usePlotPanelDatasets } from \"@foxglove/studio-base/panels/Plot/usePlotPanelDatasets\";\nimport { OnClickArg as OnChartClickArgs } from \"@foxglove/studio-base/src/components/Chart\";\nimport { OpenSiblingPanel, PanelConfig, SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { PANEL_TITLE_CONFIG_KEY } from \"@foxglove/studio-base/util/layout\";\n\nimport PlotChart from \"./PlotChart\";\nimport { PlotLegend } from \"./PlotLegend\";\nimport { downloadCSV } from \"./csv\";\nimport { usePlotPanelSettings } from \"./settings\";\nimport { PlotConfig } from \"./types\";\n\nexport { plotableRosTypes } from \"./types\";\nexport type { PlotConfig } from \"./types\";\n\nconst defaultSidebarDimension = 240;\n\nexport function openSiblingPlotPanel(openSiblingPanel: OpenSiblingPanel, topicName: string): void {\n  openSiblingPanel({\n    panelType: \"Plot\",\n    updateIfExists: true,\n    siblingConfigCreator: (config: PanelConfig) => ({\n      ...config,\n      paths: uniq(\n        (config as PlotConfig).paths\n          .concat([{ value: topicName, enabled: true, timestampMethod: \"receiveTime\" }])\n          .filter(({ value }) => value),\n      ),\n    }),\n  });\n}\n\ntype Props = {\n  config: PlotConfig;\n  saveConfig: SaveConfig<PlotConfig>;\n};\n\nfunction selectStartTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.startTime;\n}\n\nfunction selectCurrentTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.currentTime;\n}\n\nfunction selectEndTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.endTime;\n}\n\nfunction Plot(props: Props) {\n  const { saveConfig, config } = props;\n  const {\n    title: legacyTitle,\n    followingViewWidth,\n    paths: yAxisPaths,\n    minXValue,\n    maxXValue,\n    minYValue,\n    maxYValue,\n    showXAxisLabels,\n    showYAxisLabels,\n    showLegend,\n    legendDisplay = config.showSidebar === true ? \"left\" : \"floating\",\n    showPlotValuesInLegend,\n    isSynced,\n    xAxisVal,\n    xAxisPath,\n    sidebarDimension = config.sidebarWidth ?? defaultSidebarDimension,\n    [PANEL_TITLE_CONFIG_KEY]: customTitle,\n  } = config;\n\n  useEffect(() => {\n    if (legacyTitle && (customTitle == undefined || customTitle === \"\")) {\n      // Migrate legacy Plot-specific title setting to new global title setting\n      // https://github.com/foxglove/studio/pull/5225\n      saveConfig({\n        title: undefined,\n        [PANEL_TITLE_CONFIG_KEY]: legacyTitle,\n      } as Partial<PlotConfig>);\n    }\n  }, [customTitle, legacyTitle, saveConfig]);\n\n  useEffect(() => {\n    if (yAxisPaths.length === 0) {\n      saveConfig({ paths: [{ value: \"\", enabled: true, timestampMethod: \"receiveTime\" }] });\n    }\n  }, [saveConfig, yAxisPaths.length]);\n\n  const showSingleCurrentMessage = xAxisVal === \"currentCustom\" || xAxisVal === \"index\";\n\n  const startTime = useMessagePipeline(selectStartTime);\n  const currentTime = useMessagePipeline(selectCurrentTime);\n  const endTime = useMessagePipeline(selectEndTime);\n\n  // Min/max x-values and playback position indicator are only used for preloaded plots. In non-\n  // preloaded plots min x-value is always the last seek time, and the max x-value is the current\n  // playback time.\n  const timeSincePreloadedStart = (time?: Time): number | undefined => {\n    if (xAxisVal === \"timestamp\" && time && startTime) {\n      return toSec(subtractTimes(time, startTime));\n    }\n    return undefined;\n  };\n\n  const currentTimeSinceStart = timeSincePreloadedStart(currentTime);\n\n  const followingView = useMemo<ChartDefaultView | undefined>(() => {\n    if (followingViewWidth != undefined && +followingViewWidth > 0) {\n      return { type: \"following\", width: +followingViewWidth };\n    }\n    return undefined;\n  }, [followingViewWidth]);\n\n  const endTimeSinceStart = timeSincePreloadedStart(endTime);\n  const fixedView = useMemo<ChartDefaultView | undefined>(() => {\n    // Apply min/max x-value if either min or max or both is defined.\n    if ((isNumber(minXValue) && isNumber(endTimeSinceStart)) || isNumber(maxXValue)) {\n      return {\n        type: \"fixed\",\n        minXValue: isNumber(minXValue) ? minXValue : 0,\n        maxXValue: isNumber(maxXValue) ? maxXValue : endTimeSinceStart ?? 0,\n      };\n    }\n    if (xAxisVal === \"timestamp\" && startTime && endTimeSinceStart != undefined) {\n      return { type: \"fixed\", minXValue: 0, maxXValue: endTimeSinceStart };\n    }\n    return undefined;\n  }, [maxXValue, minXValue, endTimeSinceStart, startTime, xAxisVal]);\n\n  // following view and fixed view are split to keep defaultView identity stable when possible\n  const defaultView = useMemo<ChartDefaultView | undefined>(() => {\n    return followingView ?? fixedView ?? undefined;\n  }, [fixedView, followingView]);\n\n  const allPaths = useMemo(() => {\n    return yAxisPaths.map(({ value }) => value).concat(compact([xAxisPath?.value]));\n  }, [xAxisPath?.value, yAxisPaths]);\n\n  const {\n    bounds: datasetBounds,\n    datasets,\n    pathsWithMismatchedDataLengths,\n  } = usePlotPanelDatasets({\n    allPaths,\n    followingView,\n    showSingleCurrentMessage,\n    startTime,\n    xAxisVal,\n    xAxisPath,\n    yAxisPaths,\n  });\n\n  const messagePipeline = useMessagePipelineGetter();\n  const onClick = useCallback<NonNullable<ComponentProps<typeof PlotChart>[\"onClick\"]>>(\n    ({ x: seekSeconds }: OnChartClickArgs) => {\n      const {\n        seekPlayback,\n        playerState: { activeData: { startTime: start } = {} },\n      } = messagePipeline();\n      if (!seekPlayback || !start || seekSeconds == undefined || xAxisVal !== \"timestamp\") {\n        return;\n      }\n      // Avoid normalizing a negative time if the clicked point had x < 0.\n      if (seekSeconds >= 0) {\n        seekPlayback(addTimes(start, fromSec(seekSeconds)));\n      }\n    },\n    [messagePipeline, xAxisVal],\n  );\n\n  const [focusedPath, setFocusedPath] = useState<undefined | string[]>(undefined);\n\n  usePlotPanelSettings(config, saveConfig, focusedPath);\n\n  const stackDirection = useMemo(\n    () => (legendDisplay === \"top\" ? \"column\" : \"row\"),\n    [legendDisplay],\n  );\n\n  const getPanelContextMenuItems = useCallback(() => {\n    const items: PanelContextMenuItem[] = [\n      {\n        type: \"item\",\n        label: \"Download plot data as CSV\",\n        onclick: () => downloadCSV(datasets, xAxisVal),\n      },\n    ];\n    return items;\n  }, [datasets, xAxisVal]);\n\n  return (\n    <Stack\n      flex=\"auto\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      overflow=\"hidden\"\n      position=\"relative\"\n    >\n      <PanelToolbar />\n      <Stack\n        direction={stackDirection}\n        flex=\"auto\"\n        fullWidth\n        style={{ height: `calc(100% - ${PANEL_TOOLBAR_MIN_HEIGHT}px)` }}\n      >\n        {legendDisplay !== \"none\" && (\n          <PlotLegend\n            paths={yAxisPaths}\n            datasets={datasets}\n            currentTime={currentTimeSinceStart}\n            onClickPath={(index: number) => setFocusedPath([\"paths\", String(index)])}\n            saveConfig={saveConfig}\n            showLegend={showLegend}\n            pathsWithMismatchedDataLengths={pathsWithMismatchedDataLengths}\n            legendDisplay={legendDisplay}\n            showPlotValuesInLegend={showPlotValuesInLegend}\n            sidebarDimension={sidebarDimension}\n          />\n        )}\n        <Stack flex=\"auto\" alignItems=\"center\" justifyContent=\"center\" overflow=\"hidden\">\n          <PlotChart\n            isSynced={xAxisVal === \"timestamp\" && isSynced}\n            paths={yAxisPaths}\n            minYValue={parseFloat((minYValue ?? \"\").toString())}\n            maxYValue={parseFloat((maxYValue ?? \"\").toString())}\n            showXAxisLabels={showXAxisLabels}\n            showYAxisLabels={showYAxisLabels}\n            datasets={datasets}\n            datasetBounds={datasetBounds}\n            xAxisVal={xAxisVal}\n            currentTime={currentTimeSinceStart}\n            onClick={onClick}\n            defaultView={defaultView}\n          />\n          <PanelContextMenu getItems={getPanelContextMenuItems} />\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n\nconst defaultConfig: PlotConfig = {\n  paths: [{ value: \"\", enabled: true, timestampMethod: \"receiveTime\" }],\n  minYValue: undefined,\n  maxYValue: undefined,\n  showXAxisLabels: true,\n  showYAxisLabels: true,\n  showLegend: true,\n  legendDisplay: \"floating\",\n  showPlotValuesInLegend: false,\n  isSynced: true,\n  xAxisVal: \"timestamp\",\n  sidebarDimension: defaultSidebarDimension,\n};\n\nexport default Panel(\n  Object.assign(Plot, {\n    panelType: \"Plot\",\n    defaultConfig,\n  }),\n);\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { memoize, range, uniq } from \"lodash\";\nimport tinycolor from \"tinycolor2\";\n\nimport { toolsColorScheme } from \"@foxglove/studio-base/util/toolsColorScheme\";\n\n// Inspired by the \"light\" scheme from https://personal.sron.nl/~pault/#sec:qualitative\n// but using our standard tools colors.\nexport const lineColors = [\n  toolsColorScheme.blue.medium,\n  toolsColorScheme.orange.medium,\n  toolsColorScheme.yellow.medium,\n  toolsColorScheme.green.medium,\n  toolsColorScheme.cyan.medium,\n  toolsColorScheme.purple.medium,\n  toolsColorScheme.paleGreen.medium,\n];\n\nconst colorExpansion = lineColors.map((color) => [\n  color,\n  ...tinycolor(color)\n    .tetrad()\n    .map((acolor) => acolor.toHexString()),\n]);\n\nexport const expandedLineColors = uniq(\n  range(0, colorExpansion[0]!.length)\n    .map((i) => colorExpansion.map((colors) => colors[i]!))\n    .flat(),\n);\n\nexport const lightColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).brighten(15).toString(),\n);\n\nexport const darkColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).darken(30).toString(),\n);\n\nexport function getLineColor(color: string | undefined, index: number): string {\n  return color ?? lineColors[index % lineColors.length]!;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport tinycolor from \"tinycolor2\";\n\nexport const toolsColorScheme = {\n  base: {\n    dark: \"#1F1E27\",\n    medium: \"#8B8B8D\",\n    light: \"#F7F7F3\",\n  },\n  red: {\n    dark: \"#F24366\",\n    medium: \"#ff7c96\",\n    light: \"#FFAABB\",\n  },\n  blue: {\n    dark: \"#1b83ec\",\n    medium: \"#4e98e2\",\n    light: \"#77AADD\",\n  },\n  paleGreen: {\n    dark: \"#B4CC00\",\n    medium: \"#cad660\",\n    light: \"#CDD67E\",\n  },\n  orange: {\n    dark: \"#ea531f\",\n    medium: \"#f5774d\",\n    light: \"#faa487\",\n  },\n  cyan: {\n    dark: \"#22b5ff\",\n    medium: \"#61cbff\",\n    light: \"#99DDFF\",\n  },\n  green: {\n    dark: \"#05d27d\",\n    medium: \"#5cd6a9\",\n    light: \"#8de0c9\",\n  },\n  purple: {\n    dark: \"#6E51EE\",\n    medium: \"#a395e2\",\n    light: \"#c7c0e7\",\n  },\n  yellow: {\n    dark: \"#EDCC28\",\n    medium: \"#f7df71\",\n    light: \"#f1e4aa\",\n  },\n};\n\nexport const grey = tinycolor(`hsv(0, 0%, 75%)`).toHexString();\n"],"names":["filterMatches","filter","value","currentValue","name","useCachedGetMessagePathDataItems","paths","providerTopics","datatypes","globalVariables","memoizedPaths","unmemoizedFilledInPaths","filledInPaths","path","rosPath","fillInGlobalVariablesInPath","memoizedFilledInPaths","unmemoizedRelevantTopics","topicsByName","seenNames","result","topic","relevantTopics","unmemoizedRelevantDatatypes","relevantDatatypes","addRelevantDatatype","datatypeName","seen","type","field","schemaName","cachesByPath","current","filledInPath","message","currentPath","weakMap","messagePathDataItems","getMessagePathDataItems","messagePathPart","start","end","variable","structures","item","queriedData","traverse","pathIndex","structureItem","pathItem","nextPathItem","next","startIdx","endIdx","arrayLength","i","index","arrayElement","newPath","id","constantName","prevPathItem","fieldName","structure","useDecodeMessagePathsForMessagesByTopic","cachedGetMessagePathDataItems","messagesByTopic","obj","messages","messagesForThisPath","PanelContextMenu","props","getItems","rootRef","position","setPosition","handleClose","items","setItems","parent","rightClickState","handleMouseUp","event","handleMouseMove","_event","handleMouseDown","handleContextMenu","setupSendReportNotificationHandler","rpc","details","severity","setupWorker","overwriteFetch","log","addEventListener","emitter","eventName","fn","existing","removeEventListener","ChartJSManager","#chartInstance","#fakeNodeEvents","#fakeDocumentEvents","#lastDatalabelClickContext","initOpts","node","data","options","devicePixelRatio","fontLoaded","font","fakeNode","origZoomStart","chartInstance","args","pluginOptions","ctx","res","fullOptions","#addFunctionsToConfig","target","maybeCast","width","height","isBoundsReset","instance","scales","shouldResize","wholeWidth","wholeHeight","ev","elements","out","element","itemA","itemB","dxA","dyA","dxB","dyB","distSquaredA","distSquaredB","context","xScale","yScale","config","datalabelsOptions","_context","staticColor","loadDefaultFont","fontFace","fixedNumberFormat","fixTicks","ticks","ChartJsMux","#rpc","#managers","manager","#getChart","chart","setupReceiveReportErrorHandler","sendNotification","setupMainThreadRpc","WebWorkerManager","#createWorker","#maxWorkerCount","#workerStates","#allListeners","createWorker","maxWorkerCount","workerState","worker","Rpc","emptyIndex","x","workerStateIndex","_id","makeChartJSWorker","mightActuallyBePartial","webWorkerManager","rpcMouseEvent","boundingRect","supportsOffscreenCanvas","Chart","initialized","canvasRef","containerRef","isMounted","useMountedState","currentScalesRef","zoomEnabled","panEnabled","onStartRender","onFinishRender","sendWrapperRef","rpcSendRef","hasPannedSinceMouseDown","previousUpdateMessage","local","remote","sendWrapper","payload","transferables","onScalesUpdateRef","maybeUpdateScales","newScales","opt","oldScales","oldStr","newStr","getNewUpdateMessage","prev","updateChart","update","canvas","offscreenCanvas","running","updateError","setUpdateError","newUpdate","err","container","hammerManager","threshold","onWheel","onMouseDown","onMouseUp","mousePresentRef","onHover","onMouseMove","onMouseEnter","onMouseLeave","onClick","rect","mouseX","mouseY","datalabel","xVal","yVal","pixels","downsampleTimeseries","dataset","bounds","pixelPerXValue","pixelPerYValue","downsampled","intFirst","intLast","intMin","intMax","xRange","minX","maxX","firstPastBounds","datum","y","downsampleScatter","pixelPerRow","sparse","locator","Downsampler","#datasets","#width","#height","#datasetBounds","#scales","currentScales","dataBounds","undefinedToNanData","useStyles","theme","OverflowMessage","classes","TimeBasedChartTooltipContent","colorsByDatasetIndex","content","labelsByDatasetIndex","multiDataset","cx","sortedItems","datasetIndex","_","tooltip","Stack","idx","color","label","selectGlobalBounds","store","selectSetGlobalBounds","TimeBasedChart","requestID","currentTime","datasetId","defaultView","isSynced","showXAxisLabels","xAxes","xAxisIsPlaybackTime","yAxes","labels","datasets","useTheme","componentId","canvasContainer","hasUserPannedOrZoomed","setHasUserPannedOrZoomed","pauseFrame","messagePipeline","resumeFrame","requestedResumeFrame","globalBounds","setGlobalBounds","syncedGlobalBounds","linesToHide","datasetBounds","xMin","xMax","yMin","yMax","onResetZoom","hasVerticalExclusiveZoom","setHasVerticalExclusiveZoom","hasBothAxesZoom","setHasBothAxesZoom","zoomMode","keyDownHandlers","keyUphandlers","mouseYRef","activeTooltip","setActiveTooltip","updateTooltip","tooltipItems","canvasRect","setHoverValue","clearHoverValue","clearGlobalHoverTime","onMouseOut","canvasContainerRect","plugins","min","max","defaultXTicksSettings","defaultYTicksSettings","minY","maxY","visibleDatasets","filterMap","downsampler","downsampledDatasets","setDownsampledDatasets","applyDownsample","queueDownsample","downsampledData","onScalesUpdate","userInteraction","old","scalesX","newMin","newMax","datasetsLength","tooltipContent","showReset","chartProps","Tooltip","Fade","HoverBar","VerticalBarWrapper","Button","KeyListener","getByPath","itemsByPath","ret","messageAndData","headerStamp","getMessagePathItems","decodeMessagePathsForMessagesByTopic","getBlockItemsByPath","derivative","newDatums","prevItem","secondsDifference","mathFunctions","degrees","radians","applyToDatum","func","numericYValue","makeInvertedBounds","unionBounds","a","b","isReferenceLinePlotPathType","isCustomScale","xAxisVal","getXForPoint","timestamp","innerIdx","xAxisRanges","xItem","xAxisPath","getDatumsForMessagePathItem","yItem","startTime","timestampMethod","elapsedTime","entry","valueNum","hasMismatchedData","getDatasetsFromMessagePlotPath","yAxisRanges","invertedTheme","showLine","plotData","maybeMathFn","funcName","rangeData","rangeIdx","datums","itemHasMismatchedData","borderColor","getDatasets","pathsWithMismatchedDataLengths","yRanges","xRanges","mergeDatasets","EmptyBlocks","makeInitialState","selectBlocks","useFlattenedBlocksByTopic","topics","state","setState","blocks","memoryAvailable","msgs","pct","shouldResetState","oldState","newState","acc","block","blockMessages","ZERO_TIME","EmptyAllFrames","EmptyDatasets","applyDerivativeToDatasets","sortDatasetsByHeaderStamp","usePlotPanelDatasets","params","allPaths","followingView","showSingleCurrentMessage","yAxisPaths","topicToPaths","parseRosPath","subscribeTopics","subscriptions","allFramesFromBlocks","allFrames","resetDatasets","newFramesByTopic","newCursors","newBlockItems","newDatasets","mergedDatasets","restore","previous","ds","latestAllFramesDatasets","useLatest","addMessages","accumulated","msgEvents","lastEventTime","isFollowing","newMessages","msgEvent","dataItem","plotDataItem","plotDataPath","plotDataItems","minStamp","newItems","currentFrameDatasets","stateWithDerivatives","sortedStateWithDerivatives","currentFrameWithDerivatives","sortedCurrentFrameWithDerivatives","allDatasets","getAnnotationFromReferenceLine","getAnnotations","PlotChart","maxYValue","minYValue","showYAxisLabels","annotations","sizeRef","presence","plotPathDisplayName","plotableRosTypes","ROW_HEIGHT","_params","PlotLegendRow","hasMismatchedDataLength","onClickPath","savePaths","showPlotValuesInLegend","openPanelSettings","useWorkspaceActions","panelId","setSelectedPanelIds","correspondingData","hoverComponentId","hoverValue","timeToCompare","pt","Checkbox","newPaths","Typography","minLegendWidth","maxLegendWidth","palette","shadows","shape","spacing","tinycolor","PlotLegend","legendDisplay","saveConfig","showLegend","sidebarDimension","dragStart","toggleLegend","legendIcon","handlePointerMove","delta","newDimension","handlePointerDown","handlePointerUp","IconButton","getCSVRow","receiveTime","receiveTimeFloat","stampTime","getCVSColName","generateCSV","headLine","combinedLines","downloadCSV","csvData","blob","download","makeSeriesNode","t","makeRootSeriesNode","children","buildSettingsTree","maxYError","maxXError","usePlotPanelSettings","focusedPath","updatePanelSettingsTree","actionHandler","action","draft","defaultSidebarDimension","openSiblingPlotPanel","openSiblingPanel","topicName","selectStartTime","selectCurrentTime","selectEndTime","Plot","legacyTitle","followingViewWidth","minXValue","maxXValue","customTitle","endTime","timeSincePreloadedStart","time","currentTimeSinceStart","endTimeSinceStart","fixedView","seekSeconds","seekPlayback","setFocusedPath","stackDirection","getPanelContextMenuItems","PanelToolbar","defaultConfig","Panel","lineColors","colorExpansion","acolor","expandedLineColors","colors","lightColor","darkColor","getLineColor","toolsColorScheme","grey"],"sourceRoot":""}