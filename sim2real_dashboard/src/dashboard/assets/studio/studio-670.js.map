{"version":3,"file":"studio-670.js","mappings":"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","sources":["webpack:///../../node_modules/@foxglove/cdr/dist/CdrReader.js","webpack:///../../node_modules/@foxglove/cdr/dist/CdrSizeCalculator.js","webpack:///../../node_modules/@foxglove/cdr/dist/CdrWriter.js","webpack:///../../node_modules/@foxglove/cdr/dist/encapsulationKind.js","webpack:///../../node_modules/@foxglove/cdr/dist/index.js","webpack:///../../node_modules/@foxglove/cdr/dist/isBigEndian.js","webpack:///../../node_modules/@foxglove/rosmsg2-serialization/dist/MessageReader.js","webpack:///../../node_modules/@foxglove/rosmsg2-serialization/dist/MessageWriter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CdrReader = void 0;\nconst encapsulationKind_1 = require(\"./encapsulationKind\");\nconst isBigEndian_1 = require(\"./isBigEndian\");\nclass CdrReader {\n    constructor(data) {\n        this.textDecoder = new TextDecoder(\"utf8\");\n        this.hostLittleEndian = !(0, isBigEndian_1.isBigEndian)();\n        if (data.byteLength < 4) {\n            throw new Error(`Invalid CDR data size ${data.byteLength}, must contain at least a 4-byte header`);\n        }\n        this.view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        const kind = this.kind;\n        this.littleEndian = kind === encapsulationKind_1.EncapsulationKind.CDR_LE || kind === encapsulationKind_1.EncapsulationKind.PL_CDR_LE;\n        this.offset = 4;\n    }\n    get kind() {\n        return this.view.getUint8(1);\n    }\n    get decodedBytes() {\n        return this.offset;\n    }\n    get byteLength() {\n        return this.view.byteLength;\n    }\n    int8() {\n        const value = this.view.getInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    uint8() {\n        const value = this.view.getUint8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    int16() {\n        this.align(2);\n        const value = this.view.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    uint16() {\n        this.align(2);\n        const value = this.view.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    int32() {\n        this.align(4);\n        const value = this.view.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    uint32() {\n        this.align(4);\n        const value = this.view.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    int64() {\n        this.align(8);\n        const value = this.view.getBigInt64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    uint64() {\n        this.align(8);\n        const value = this.view.getBigUint64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    uint16BE() {\n        this.align(2);\n        const value = this.view.getUint16(this.offset, false);\n        this.offset += 2;\n        return value;\n    }\n    uint32BE() {\n        this.align(4);\n        const value = this.view.getUint32(this.offset, false);\n        this.offset += 4;\n        return value;\n    }\n    uint64BE() {\n        this.align(8);\n        const value = this.view.getBigUint64(this.offset, false);\n        this.offset += 8;\n        return value;\n    }\n    float32() {\n        this.align(4);\n        const value = this.view.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    float64() {\n        this.align(8);\n        const value = this.view.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    string() {\n        const length = this.uint32();\n        if (length <= 1) {\n            this.offset += length;\n            return \"\";\n        }\n        const data = new Uint8Array(this.view.buffer, this.view.byteOffset + this.offset, length - 1);\n        const value = this.textDecoder.decode(data);\n        this.offset += length;\n        return value;\n    }\n    sequenceLength() {\n        return this.uint32();\n    }\n    int8Array(count = this.sequenceLength()) {\n        const array = new Int8Array(this.view.buffer, this.view.byteOffset + this.offset, count);\n        this.offset += count;\n        return array;\n    }\n    uint8Array(count = this.sequenceLength()) {\n        const array = new Uint8Array(this.view.buffer, this.view.byteOffset + this.offset, count);\n        this.offset += count;\n        return array;\n    }\n    int16Array(count = this.sequenceLength()) {\n        return this.typedArray(Int16Array, \"getInt16\", count);\n    }\n    uint16Array(count = this.sequenceLength()) {\n        return this.typedArray(Uint16Array, \"getUint16\", count);\n    }\n    int32Array(count = this.sequenceLength()) {\n        return this.typedArray(Int32Array, \"getInt32\", count);\n    }\n    uint32Array(count = this.sequenceLength()) {\n        return this.typedArray(Uint32Array, \"getUint32\", count);\n    }\n    int64Array(count = this.sequenceLength()) {\n        return this.typedArray(BigInt64Array, \"getBigInt64\", count);\n    }\n    uint64Array(count = this.sequenceLength()) {\n        return this.typedArray(BigUint64Array, \"getBigUint64\", count);\n    }\n    float32Array(count = this.sequenceLength()) {\n        return this.typedArray(Float32Array, \"getFloat32\", count);\n    }\n    float64Array(count = this.sequenceLength()) {\n        return this.typedArray(Float64Array, \"getFloat64\", count);\n    }\n    stringArray(count = this.sequenceLength()) {\n        const output = [];\n        for (let i = 0; i < count; i++) {\n            output.push(this.string());\n        }\n        return output;\n    }\n    /**\n     * Seek the current read pointer a number of bytes relative to the current position. Note that\n     * seeking before the four-byte header is invalid\n     * @param relativeOffset A positive or negative number of bytes to seek\n     */\n    seek(relativeOffset) {\n        const newOffset = this.offset + relativeOffset;\n        if (newOffset < 4 || newOffset >= this.view.byteLength) {\n            throw new Error(`seek(${relativeOffset}) failed, ${newOffset} is outside the data range`);\n        }\n        this.offset = newOffset;\n    }\n    /**\n     * Seek to an absolute byte position in the data. Note that seeking before the four-byte header is\n     * invalid\n     * @param offset An absolute byte offset in the range of [4-byteLength)\n     */\n    seekTo(offset) {\n        if (offset < 4 || offset >= this.view.byteLength) {\n            throw new Error(`seekTo(${offset}) failed, value is outside the data range`);\n        }\n        this.offset = offset;\n    }\n    align(size) {\n        const alignment = (this.offset - 4) % size;\n        if (alignment > 0) {\n            this.offset += size - alignment;\n        }\n    }\n    // Reads a given count of numeric values into a typed array.\n    typedArray(TypedArrayConstructor, getter, count) {\n        if (count === 0) {\n            return new TypedArrayConstructor();\n        }\n        this.align(TypedArrayConstructor.BYTES_PER_ELEMENT);\n        const totalOffset = this.view.byteOffset + this.offset;\n        if (this.littleEndian !== this.hostLittleEndian) {\n            // Slowest path\n            return this.typedArraySlow(TypedArrayConstructor, getter, count);\n        }\n        else if (totalOffset % TypedArrayConstructor.BYTES_PER_ELEMENT === 0) {\n            // Fastest path\n            const array = new TypedArrayConstructor(this.view.buffer, totalOffset, count);\n            this.offset += TypedArrayConstructor.BYTES_PER_ELEMENT * count;\n            return array;\n        }\n        else {\n            // Slower path\n            return this.typedArrayUnaligned(TypedArrayConstructor, getter, count);\n        }\n    }\n    typedArrayUnaligned(TypedArrayConstructor, getter, count) {\n        // Benchmarks indicate for count < ~10 doing each individually is faster than copy\n        if (count < 10) {\n            return this.typedArraySlow(TypedArrayConstructor, getter, count);\n        }\n        // If the length is > 10, then doing a copy of the data to align it is faster\n        // using _set_ is slightly faster than slice on the array buffer according to today's benchmarks\n        const byteLength = TypedArrayConstructor.BYTES_PER_ELEMENT * count;\n        const copy = new Uint8Array(byteLength);\n        copy.set(new Uint8Array(this.view.buffer, this.view.byteOffset + this.offset, byteLength));\n        this.offset += byteLength;\n        return new TypedArrayConstructor(copy.buffer, copy.byteOffset, count);\n    }\n    typedArraySlow(TypedArrayConstructor, getter, count) {\n        const array = new TypedArrayConstructor(count);\n        let offset = this.offset;\n        for (let i = 0; i < count; i++) {\n            array[i] = this.view[getter](offset, this.littleEndian);\n            offset += TypedArrayConstructor.BYTES_PER_ELEMENT;\n        }\n        this.offset = offset;\n        return array;\n    }\n}\nexports.CdrReader = CdrReader;\n//# sourceMappingURL=CdrReader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CdrSizeCalculator = void 0;\nclass CdrSizeCalculator {\n    constructor() {\n        // Two bytes for Representation Id and two bytes for Options\n        this.offset = 4;\n    }\n    get size() {\n        return this.offset;\n    }\n    int8() {\n        return this.incrementAndReturn(1);\n    }\n    uint8() {\n        return this.incrementAndReturn(1);\n    }\n    int16() {\n        return this.incrementAndReturn(2);\n    }\n    uint16() {\n        return this.incrementAndReturn(2);\n    }\n    int32() {\n        return this.incrementAndReturn(4);\n    }\n    uint32() {\n        return this.incrementAndReturn(4);\n    }\n    int64() {\n        return this.incrementAndReturn(8);\n    }\n    uint64() {\n        return this.incrementAndReturn(8);\n    }\n    float32() {\n        return this.incrementAndReturn(4);\n    }\n    float64() {\n        return this.incrementAndReturn(8);\n    }\n    string(length) {\n        this.uint32();\n        this.offset += length + 1; // Add one for the null terminator\n        return this.offset;\n    }\n    sequenceLength() {\n        return this.uint32();\n    }\n    // Increments the offset by `byteCount` and any required padding bytes and\n    // returns the new offset\n    incrementAndReturn(byteCount) {\n        const alignment = (this.offset - 4) % byteCount;\n        if (alignment > 0) {\n            this.offset += byteCount - alignment;\n        }\n        this.offset += byteCount;\n        return this.offset;\n    }\n}\nexports.CdrSizeCalculator = CdrSizeCalculator;\n//# sourceMappingURL=CdrSizeCalculator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CdrWriter = void 0;\nconst encapsulationKind_1 = require(\"./encapsulationKind\");\nconst isBigEndian_1 = require(\"./isBigEndian\");\nclass CdrWriter {\n    constructor(options = {}) {\n        this.textEncoder = new TextEncoder();\n        if (options.buffer != undefined) {\n            this.buffer = options.buffer;\n        }\n        else if (options.size != undefined) {\n            this.buffer = new ArrayBuffer(options.size);\n        }\n        else {\n            this.buffer = new ArrayBuffer(CdrWriter.DEFAULT_CAPACITY);\n        }\n        const kind = options.kind ?? encapsulationKind_1.EncapsulationKind.CDR_LE;\n        this.littleEndian = kind === encapsulationKind_1.EncapsulationKind.CDR_LE || kind === encapsulationKind_1.EncapsulationKind.PL_CDR_LE;\n        this.hostLittleEndian = !(0, isBigEndian_1.isBigEndian)();\n        this.array = new Uint8Array(this.buffer);\n        this.view = new DataView(this.buffer);\n        // Write the Representation Id and Offset fields\n        this.resizeIfNeeded(4);\n        this.view.setUint8(0, 0); // Upper bits of EncapsulationKind, unused\n        this.view.setUint8(1, kind);\n        // The RTPS specification does not define any settings for the 2 byte\n        // options field and further states that a receiver should not interpret it\n        // when it reads the options field\n        this.view.setUint16(2, 0, false);\n        this.offset = 4;\n    }\n    get data() {\n        return new Uint8Array(this.buffer, 0, this.offset);\n    }\n    get size() {\n        return this.offset;\n    }\n    int8(value) {\n        this.resizeIfNeeded(1);\n        this.view.setInt8(this.offset, value);\n        this.offset += 1;\n        return this;\n    }\n    uint8(value) {\n        this.resizeIfNeeded(1);\n        this.view.setUint8(this.offset, value);\n        this.offset += 1;\n        return this;\n    }\n    int16(value) {\n        this.align(2);\n        this.view.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        return this;\n    }\n    uint16(value) {\n        this.align(2);\n        this.view.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        return this;\n    }\n    int32(value) {\n        this.align(4);\n        this.view.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        return this;\n    }\n    uint32(value) {\n        this.align(4);\n        this.view.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        return this;\n    }\n    int64(value) {\n        this.align(8);\n        this.view.setBigInt64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        return this;\n    }\n    uint64(value) {\n        this.align(8);\n        this.view.setBigUint64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        return this;\n    }\n    uint16BE(value) {\n        this.align(2);\n        this.view.setUint16(this.offset, value, false);\n        this.offset += 2;\n        return this;\n    }\n    uint32BE(value) {\n        this.align(4);\n        this.view.setUint32(this.offset, value, false);\n        this.offset += 4;\n        return this;\n    }\n    uint64BE(value) {\n        this.align(8);\n        this.view.setBigUint64(this.offset, value, false);\n        this.offset += 8;\n        return this;\n    }\n    float32(value) {\n        this.align(4);\n        this.view.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        return this;\n    }\n    float64(value) {\n        this.align(8);\n        this.view.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        return this;\n    }\n    string(value) {\n        const strlen = value.length;\n        this.uint32(strlen + 1); // Add one for the null terminator\n        this.resizeIfNeeded(strlen + 1);\n        this.textEncoder.encodeInto(value, new Uint8Array(this.buffer, this.offset, strlen));\n        this.view.setUint8(this.offset + strlen, 0);\n        this.offset += strlen + 1;\n        return this;\n    }\n    sequenceLength(value) {\n        return this.uint32(value);\n    }\n    int8Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        this.resizeIfNeeded(value.length);\n        this.array.set(value, this.offset);\n        this.offset += value.length;\n        return this;\n    }\n    uint8Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        this.resizeIfNeeded(value.length);\n        this.array.set(value, this.offset);\n        this.offset += value.length;\n        return this;\n    }\n    int16Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Int16Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.int16(entry);\n            }\n        }\n        return this;\n    }\n    uint16Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Uint16Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.uint16(entry);\n            }\n        }\n        return this;\n    }\n    int32Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Int32Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.int32(entry);\n            }\n        }\n        return this;\n    }\n    uint32Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Uint32Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.uint32(entry);\n            }\n        }\n        return this;\n    }\n    int64Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof BigInt64Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.int64(BigInt(entry));\n            }\n        }\n        return this;\n    }\n    uint64Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof BigUint64Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.uint64(BigInt(entry));\n            }\n        }\n        return this;\n    }\n    float32Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Float32Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.float32(entry);\n            }\n        }\n        return this;\n    }\n    float64Array(value, writeLength) {\n        if (writeLength === true) {\n            this.sequenceLength(value.length);\n        }\n        if (value instanceof Float64Array &&\n            this.littleEndian === this.hostLittleEndian &&\n            value.length >= CdrWriter.BUFFER_COPY_THRESHOLD) {\n            this.align(value.BYTES_PER_ELEMENT, value.byteLength);\n            this.array.set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength), this.offset);\n            this.offset += value.byteLength;\n        }\n        else {\n            for (const entry of value) {\n                this.float64(entry);\n            }\n        }\n        return this;\n    }\n    /**\n     * Calculate the capacity needed to hold the given number of aligned bytes,\n     * resize if needed, and write padding bytes for alignment\n     * @param size Byte width to align to. If the current offset is 1 and `size`\n     *   is 4, 3 bytes of padding will be written\n     * @param bytesToWrite Optional, total amount of bytes that are intended to be\n     *   written directly following the alignment. This can be used to avoid\n     *   additional buffer resizes in the case of writing large blocks of aligned\n     *   data such as arrays\n     */\n    align(size, bytesToWrite = size) {\n        // The four byte header is not considered for alignment\n        const alignment = (this.offset - 4) % size;\n        const padding = alignment > 0 ? size - alignment : 0;\n        this.resizeIfNeeded(padding + bytesToWrite);\n        // Write padding bytes\n        this.array.fill(0, this.offset, this.offset + padding);\n        this.offset += padding;\n    }\n    resizeIfNeeded(additionalBytes) {\n        const capacity = this.offset + additionalBytes;\n        if (this.buffer.byteLength < capacity) {\n            const doubled = this.buffer.byteLength * 2;\n            const newCapacity = doubled > capacity ? doubled : capacity;\n            this.resize(newCapacity);\n        }\n    }\n    resize(capacity) {\n        if (this.buffer.byteLength >= capacity) {\n            return;\n        }\n        const buffer = new ArrayBuffer(capacity);\n        const array = new Uint8Array(buffer);\n        array.set(this.array);\n        this.buffer = buffer;\n        this.array = array;\n        this.view = new DataView(buffer);\n    }\n}\nexports.CdrWriter = CdrWriter;\nCdrWriter.DEFAULT_CAPACITY = 16;\nCdrWriter.BUFFER_COPY_THRESHOLD = 10;\n//# sourceMappingURL=CdrWriter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EncapsulationKind = void 0;\nvar EncapsulationKind;\n(function (EncapsulationKind) {\n    EncapsulationKind[EncapsulationKind[\"CDR_BE\"] = 0] = \"CDR_BE\";\n    EncapsulationKind[EncapsulationKind[\"CDR_LE\"] = 1] = \"CDR_LE\";\n    EncapsulationKind[EncapsulationKind[\"PL_CDR_BE\"] = 2] = \"PL_CDR_BE\";\n    EncapsulationKind[EncapsulationKind[\"PL_CDR_LE\"] = 3] = \"PL_CDR_LE\";\n})(EncapsulationKind = exports.EncapsulationKind || (exports.EncapsulationKind = {}));\n//# sourceMappingURL=encapsulationKind.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./CdrReader\"), exports);\n__exportStar(require(\"./CdrSizeCalculator\"), exports);\n__exportStar(require(\"./CdrWriter\"), exports);\n__exportStar(require(\"./encapsulationKind\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBigEndian = void 0;\nconst endianTestArray = new Uint8Array(4);\nconst endianTestView = new Uint32Array(endianTestArray.buffer);\nendianTestView[0] = 1;\n/**\n * Test if the current running system is Big Endian architecture or Little Endian.\n * @returns true on Big Endian architecture systems\n */\nfunction isBigEndian() {\n    return endianTestArray[3] === 1;\n}\nexports.isBigEndian = isBigEndian;\n//# sourceMappingURL=isBigEndian.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageReader = void 0;\nconst cdr_1 = require(\"@foxglove/cdr\");\nclass MessageReader {\n    constructor(definitions) {\n        // ros2idl modules could have constant modules before the root struct used to decode message\n        const rootDefinition = definitions.find((def) => !isConstantModule(def));\n        if (rootDefinition == undefined) {\n            throw new Error(\"MessageReader initialized with no root MessageDefinition\");\n        }\n        this.rootDefinition = rootDefinition.definitions;\n        this.definitions = new Map(definitions.map((def) => [def.name ?? \"\", def.definitions]));\n    }\n    // We template on R here for call site type information if the class type information T is not\n    // known or available\n    readMessage(buffer) {\n        const reader = new cdr_1.CdrReader(buffer);\n        return this.readComplexType(this.rootDefinition, reader);\n    }\n    readComplexType(definition, reader) {\n        const msg = {};\n        if (definition.length === 0) {\n            // In case a message definition definition is empty, ROS 2 adds a\n            // `uint8 structure_needs_at_least_one_member` field when converting to IDL,\n            // to satisfy the requirement from IDL of not being empty.\n            // See also https://design.ros2.org/articles/legacy_interface_definition.html\n            reader.uint8();\n            return msg;\n        }\n        for (const field of definition) {\n            if (field.isConstant === true) {\n                continue;\n            }\n            if (field.isComplex === true) {\n                // Complex type\n                const nestedDefinition = this.definitions.get(field.type);\n                if (nestedDefinition == undefined) {\n                    throw new Error(`Unrecognized complex type ${field.type}`);\n                }\n                if (field.isArray === true) {\n                    // For dynamic length arrays we need to read a uint32 prefix\n                    const arrayLength = field.arrayLength ?? reader.sequenceLength();\n                    const array = [];\n                    for (let i = 0; i < arrayLength; i++) {\n                        array.push(this.readComplexType(nestedDefinition, reader));\n                    }\n                    msg[field.name] = array;\n                }\n                else {\n                    msg[field.name] = this.readComplexType(nestedDefinition, reader);\n                }\n            }\n            else {\n                // Primitive type\n                if (field.isArray === true) {\n                    const deser = typedArrayDeserializers.get(field.type);\n                    if (deser == undefined) {\n                        throw new Error(`Unrecognized primitive array type ${field.type}[]`);\n                    }\n                    // For dynamic length arrays we need to read a uint32 prefix\n                    const arrayLength = field.arrayLength ?? reader.sequenceLength();\n                    msg[field.name] = deser(reader, arrayLength);\n                }\n                else {\n                    const deser = deserializers.get(field.type);\n                    if (deser == undefined) {\n                        throw new Error(`Unrecognized primitive type ${field.type}`);\n                    }\n                    msg[field.name] = deser(reader);\n                }\n            }\n        }\n        return msg;\n    }\n}\nexports.MessageReader = MessageReader;\nfunction isConstantModule(def) {\n    return def.definitions.length > 0 && def.definitions.every((field) => field.isConstant);\n}\nconst deserializers = new Map([\n    [\"bool\", (reader) => Boolean(reader.int8())],\n    [\"int8\", (reader) => reader.int8()],\n    [\"uint8\", (reader) => reader.uint8()],\n    [\"int16\", (reader) => reader.int16()],\n    [\"uint16\", (reader) => reader.uint16()],\n    [\"int32\", (reader) => reader.int32()],\n    [\"uint32\", (reader) => reader.uint32()],\n    [\"int64\", (reader) => reader.int64()],\n    [\"uint64\", (reader) => reader.uint64()],\n    [\"float32\", (reader) => reader.float32()],\n    [\"float64\", (reader) => reader.float64()],\n    [\"string\", (reader) => reader.string()],\n    [\"time\", (reader) => ({ sec: reader.int32(), nsec: reader.uint32() })],\n    [\"duration\", (reader) => ({ sec: reader.int32(), nsec: reader.uint32() })],\n]);\nconst typedArrayDeserializers = new Map([\n    [\"bool\", readBoolArray],\n    [\"int8\", (reader, count) => reader.int8Array(count)],\n    [\"uint8\", (reader, count) => reader.uint8Array(count)],\n    [\"int16\", (reader, count) => reader.int16Array(count)],\n    [\"uint16\", (reader, count) => reader.uint16Array(count)],\n    [\"int32\", (reader, count) => reader.int32Array(count)],\n    [\"uint32\", (reader, count) => reader.uint32Array(count)],\n    [\"int64\", (reader, count) => reader.int64Array(count)],\n    [\"uint64\", (reader, count) => reader.uint64Array(count)],\n    [\"float32\", (reader, count) => reader.float32Array(count)],\n    [\"float64\", (reader, count) => reader.float64Array(count)],\n    [\"string\", readStringArray],\n    [\"time\", readTimeArray],\n    [\"duration\", readTimeArray],\n]);\nfunction readBoolArray(reader, count) {\n    const array = new Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = Boolean(reader.int8());\n    }\n    return array;\n}\nfunction readStringArray(reader, count) {\n    const array = new Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = reader.string();\n    }\n    return array;\n}\nfunction readTimeArray(reader, count) {\n    const array = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const sec = reader.int32();\n        const nsec = reader.uint32();\n        array[i] = { sec, nsec };\n    }\n    return array;\n}\n//# sourceMappingURL=MessageReader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageWriter = void 0;\nconst cdr_1 = require(\"@foxglove/cdr\");\nconst PRIMITIVE_SIZES = new Map([\n    [\"bool\", 1],\n    [\"int8\", 1],\n    [\"uint8\", 1],\n    [\"int16\", 2],\n    [\"uint16\", 2],\n    [\"int32\", 4],\n    [\"uint32\", 4],\n    [\"int64\", 8],\n    [\"uint64\", 8],\n    [\"float32\", 4],\n    [\"float64\", 8],\n    // [\"string\", ...], // handled separately\n    [\"time\", 8],\n    [\"duration\", 8],\n]);\nconst PRIMITIVE_WRITERS = new Map([\n    [\"bool\", bool],\n    [\"int8\", int8],\n    [\"uint8\", uint8],\n    [\"int16\", int16],\n    [\"uint16\", uint16],\n    [\"int32\", int32],\n    [\"uint32\", uint32],\n    [\"int64\", int64],\n    [\"uint64\", uint64],\n    [\"float32\", float32],\n    [\"float64\", float64],\n    [\"string\", string],\n    [\"time\", time],\n    [\"duration\", time],\n]);\nconst PRIMITIVE_ARRAY_WRITERS = new Map([\n    [\"bool\", boolArray],\n    [\"int8\", int8Array],\n    [\"uint8\", uint8Array],\n    [\"int16\", int16Array],\n    [\"uint16\", uint16Array],\n    [\"int32\", int32Array],\n    [\"uint32\", uint32Array],\n    [\"int64\", int64Array],\n    [\"uint64\", uint64Array],\n    [\"float32\", float32Array],\n    [\"float64\", float64Array],\n    [\"string\", stringArray],\n    [\"time\", timeArray],\n    [\"duration\", timeArray],\n]);\n/**\n * Takes a parsed message definition and returns a message writer which\n * serializes JavaScript objects to CDR-encoded binary.\n */\nclass MessageWriter {\n    constructor(definitions) {\n        // ros2idl modules could have constant modules before the root struct used to decode message\n        const rootDefinition = definitions.find((def) => !isConstantModule(def));\n        if (rootDefinition == undefined) {\n            throw new Error(\"MessageReader initialized with no root MessageDefinition\");\n        }\n        this.rootDefinition = rootDefinition.definitions;\n        this.definitions = new Map(definitions.map((def) => [def.name ?? \"\", def.definitions]));\n    }\n    /** Calculates the byte size needed to write this message in bytes. */\n    calculateByteSize(message) {\n        return this.byteSize(this.rootDefinition, message, 4);\n    }\n    /**\n     * Serializes a JavaScript object to CDR-encoded binary according to this\n     * writer's message definition. If output is provided, it's byte length must\n     * be equal or greater to the result of `calculateByteSize(message)`. If not\n     * provided, a new Uint8Array will be allocated.\n     */\n    writeMessage(message, output) {\n        const writer = new cdr_1.CdrWriter({\n            buffer: output,\n            size: output ? undefined : this.calculateByteSize(message),\n        });\n        this.write(this.rootDefinition, message, writer);\n        return writer.data;\n    }\n    byteSize(definition, message, offset) {\n        const messageObj = message;\n        let newOffset = offset;\n        if (definition.length === 0) {\n            // In case a message definition definition is empty, ROS 2 adds a\n            // `uint8 structure_needs_at_least_one_member` field when converting to IDL,\n            // to satisfy the requirement from IDL of not being empty.\n            // See also https://design.ros2.org/articles/legacy_interface_definition.html\n            return offset + this.getPrimitiveSize(\"uint8\");\n        }\n        for (const field of definition) {\n            if (field.isConstant === true) {\n                continue;\n            }\n            const nestedMessage = messageObj?.[field.name];\n            if (field.isArray === true) {\n                const arrayLength = field.arrayLength ?? fieldLength(nestedMessage);\n                const dataIsArray = Array.isArray(nestedMessage) || ArrayBuffer.isView(nestedMessage);\n                const dataArray = (dataIsArray ? nestedMessage : []);\n                if (field.arrayLength == undefined) {\n                    // uint32 array length for dynamic arrays\n                    newOffset += padding(newOffset, 4);\n                    newOffset += 4;\n                }\n                if (field.isComplex === true) {\n                    // Complex type array\n                    const nestedDefinition = this.getDefinition(field.type);\n                    for (let i = 0; i < arrayLength; i++) {\n                        const entry = (dataArray[i] ?? {});\n                        newOffset = this.byteSize(nestedDefinition, entry, newOffset);\n                    }\n                }\n                else if (field.type === \"string\") {\n                    // String array\n                    for (let i = 0; i < arrayLength; i++) {\n                        const entry = (dataArray[i] ?? \"\");\n                        newOffset += padding(newOffset, 4);\n                        newOffset += 4 + entry.length + 1; // uint32 length prefix, string, null terminator\n                    }\n                }\n                else {\n                    // Primitive array\n                    const entrySize = this.getPrimitiveSize(field.type);\n                    const alignment = field.type === \"time\" || field.type === \"duration\" ? 4 : entrySize;\n                    newOffset += padding(newOffset, alignment);\n                    newOffset += entrySize * arrayLength;\n                }\n            }\n            else {\n                if (field.isComplex === true) {\n                    // Complex type\n                    const nestedDefinition = this.getDefinition(field.type);\n                    const entry = (nestedMessage ?? {});\n                    newOffset = this.byteSize(nestedDefinition, entry, newOffset);\n                }\n                else if (field.type === \"string\") {\n                    // String\n                    const entry = typeof nestedMessage === \"string\" ? nestedMessage : \"\";\n                    newOffset += padding(newOffset, 4);\n                    newOffset += 4 + entry.length + 1; // uint32 length prefix, string, null terminator\n                }\n                else {\n                    // Primitive\n                    const entrySize = this.getPrimitiveSize(field.type);\n                    const alignment = field.type === \"time\" || field.type === \"duration\" ? 4 : entrySize;\n                    newOffset += padding(newOffset, alignment);\n                    newOffset += entrySize;\n                }\n            }\n        }\n        return newOffset;\n    }\n    write(definition, message, writer) {\n        const messageObj = message;\n        if (definition.length === 0) {\n            // In case a message definition definition is empty, ROS 2 adds a\n            // `uint8 structure_needs_at_least_one_member` field when converting to IDL,\n            // to satisfy the requirement from IDL of not being empty.\n            // See also https://design.ros2.org/articles/legacy_interface_definition.html\n            uint8(0, 0, writer);\n            return;\n        }\n        for (const field of definition) {\n            if (field.isConstant === true) {\n                continue;\n            }\n            const nestedMessage = messageObj?.[field.name];\n            if (field.isArray === true) {\n                const arrayLength = field.arrayLength ?? fieldLength(nestedMessage);\n                const dataIsArray = Array.isArray(nestedMessage) || ArrayBuffer.isView(nestedMessage);\n                const dataArray = (dataIsArray ? nestedMessage : []);\n                if (field.arrayLength == undefined) {\n                    // uint32 array length for dynamic arrays\n                    writer.sequenceLength(arrayLength);\n                }\n                if (field.isComplex === true) {\n                    // Complex type array\n                    const nestedDefinition = this.getDefinition(field.type);\n                    for (let i = 0; i < arrayLength; i++) {\n                        const entry = dataArray[i] ?? {};\n                        this.write(nestedDefinition, entry, writer);\n                    }\n                }\n                else {\n                    // Primitive array\n                    const arrayWriter = this.getPrimitiveArrayWriter(field.type);\n                    arrayWriter(nestedMessage, field.defaultValue, writer);\n                }\n            }\n            else {\n                if (field.isComplex === true) {\n                    // Complex type\n                    const nestedDefinition = this.getDefinition(field.type);\n                    const entry = nestedMessage ?? {};\n                    this.write(nestedDefinition, entry, writer);\n                }\n                else {\n                    // Primitive\n                    const primitiveWriter = this.getPrimitiveWriter(field.type);\n                    primitiveWriter(nestedMessage, field.defaultValue, writer);\n                }\n            }\n        }\n    }\n    getDefinition(datatype) {\n        const nestedDefinition = this.definitions.get(datatype);\n        if (nestedDefinition == undefined) {\n            throw new Error(`Unrecognized complex type ${datatype}`);\n        }\n        return nestedDefinition;\n    }\n    getPrimitiveSize(primitiveType) {\n        const size = PRIMITIVE_SIZES.get(primitiveType);\n        if (size == undefined) {\n            throw new Error(`Unrecognized primitive type ${primitiveType}`);\n        }\n        return size;\n    }\n    getPrimitiveWriter(primitiveType) {\n        const writer = PRIMITIVE_WRITERS.get(primitiveType);\n        if (writer == undefined) {\n            throw new Error(`Unrecognized primitive type ${primitiveType}`);\n        }\n        return writer;\n    }\n    getPrimitiveArrayWriter(primitiveType) {\n        const writer = PRIMITIVE_ARRAY_WRITERS.get(primitiveType);\n        if (writer == undefined) {\n            throw new Error(`Unrecognized primitive type ${primitiveType}[]`);\n        }\n        return writer;\n    }\n}\nexports.MessageWriter = MessageWriter;\nfunction isConstantModule(def) {\n    return def.definitions.length > 0 && def.definitions.every((field) => field.isConstant);\n}\nfunction fieldLength(value) {\n    const length = value?.length;\n    return typeof length === \"number\" ? length : 0;\n}\nfunction bool(value, defaultValue, writer) {\n    const boolValue = typeof value === \"boolean\" ? value : (defaultValue ?? false);\n    writer.int8(boolValue ? 1 : 0);\n}\nfunction int8(value, defaultValue, writer) {\n    writer.int8(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction uint8(value, defaultValue, writer) {\n    writer.uint8(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction int16(value, defaultValue, writer) {\n    writer.int16(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction uint16(value, defaultValue, writer) {\n    writer.uint16(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction int32(value, defaultValue, writer) {\n    writer.int32(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction uint32(value, defaultValue, writer) {\n    writer.uint32(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction int64(value, defaultValue, writer) {\n    if (typeof value === \"bigint\") {\n        writer.int64(value);\n    }\n    else if (typeof value === \"number\") {\n        writer.int64(BigInt(value));\n    }\n    else {\n        writer.int64((defaultValue ?? 0n));\n    }\n}\nfunction uint64(value, defaultValue, writer) {\n    if (typeof value === \"bigint\") {\n        writer.uint64(value);\n    }\n    else if (typeof value === \"number\") {\n        writer.uint64(BigInt(value));\n    }\n    else {\n        writer.uint64((defaultValue ?? 0n));\n    }\n}\nfunction float32(value, defaultValue, writer) {\n    writer.float32(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction float64(value, defaultValue, writer) {\n    writer.float64(typeof value === \"number\" ? value : (defaultValue ?? 0));\n}\nfunction string(value, defaultValue, writer) {\n    writer.string(typeof value === \"string\" ? value : (defaultValue ?? \"\"));\n}\nfunction time(value, _defaultValue, writer) {\n    if (value == undefined) {\n        writer.int32(0);\n        writer.uint32(0);\n        return;\n    }\n    const timeObj = value;\n    writer.int32(timeObj.sec ?? 0);\n    writer.uint32(timeObj.nsec ?? timeObj.nanosec ?? 0);\n}\nfunction boolArray(value, defaultValue, writer) {\n    if (Array.isArray(value)) {\n        const array = new Int8Array(value);\n        writer.int8Array(array);\n    }\n    else {\n        writer.int8Array((defaultValue ?? []));\n    }\n}\nfunction int8Array(value, defaultValue, writer) {\n    if (value instanceof Int8Array) {\n        writer.int8Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Int8Array(value);\n        writer.int8Array(array);\n    }\n    else {\n        writer.int8Array((defaultValue ?? []));\n    }\n}\nfunction uint8Array(value, defaultValue, writer) {\n    if (value instanceof Uint8Array) {\n        writer.uint8Array(value);\n    }\n    else if (value instanceof Uint8ClampedArray) {\n        writer.uint8Array(new Uint8Array(value));\n    }\n    else if (Array.isArray(value)) {\n        const array = new Uint8Array(value);\n        writer.uint8Array(array);\n    }\n    else {\n        writer.uint8Array((defaultValue ?? []));\n    }\n}\nfunction int16Array(value, defaultValue, writer) {\n    if (value instanceof Int16Array) {\n        writer.int16Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Int16Array(value);\n        writer.int16Array(array);\n    }\n    else {\n        writer.int16Array((defaultValue ?? []));\n    }\n}\nfunction uint16Array(value, defaultValue, writer) {\n    if (value instanceof Uint16Array) {\n        writer.uint16Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Uint16Array(value);\n        writer.uint16Array(array);\n    }\n    else {\n        writer.uint16Array((defaultValue ?? []));\n    }\n}\nfunction int32Array(value, defaultValue, writer) {\n    if (value instanceof Int32Array) {\n        writer.int32Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Int32Array(value);\n        writer.int32Array(array);\n    }\n    else {\n        writer.int32Array((defaultValue ?? []));\n    }\n}\nfunction uint32Array(value, defaultValue, writer) {\n    if (value instanceof Uint32Array) {\n        writer.uint32Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Uint32Array(value);\n        writer.uint32Array(array);\n    }\n    else {\n        writer.uint32Array((defaultValue ?? []));\n    }\n}\nfunction int64Array(value, defaultValue, writer) {\n    if (value instanceof BigInt64Array) {\n        writer.int64Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new BigInt64Array(value);\n        writer.int64Array(array);\n    }\n    else {\n        writer.int64Array((defaultValue ?? []));\n    }\n}\nfunction uint64Array(value, defaultValue, writer) {\n    if (value instanceof BigUint64Array) {\n        writer.uint64Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new BigUint64Array(value);\n        writer.uint64Array(array);\n    }\n    else {\n        writer.uint64Array((defaultValue ?? []));\n    }\n}\nfunction float32Array(value, defaultValue, writer) {\n    if (value instanceof Float32Array) {\n        writer.float32Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Float32Array(value);\n        writer.float32Array(array);\n    }\n    else {\n        writer.float32Array((defaultValue ?? []));\n    }\n}\nfunction float64Array(value, defaultValue, writer) {\n    if (value instanceof Float64Array) {\n        writer.float64Array(value);\n    }\n    else if (Array.isArray(value)) {\n        const array = new Float64Array(value);\n        writer.float64Array(array);\n    }\n    else {\n        writer.float64Array((defaultValue ?? []));\n    }\n}\nfunction stringArray(value, defaultValue, writer) {\n    if (Array.isArray(value)) {\n        for (const item of value) {\n            writer.string(typeof item === \"string\" ? item : \"\");\n        }\n    }\n    else {\n        const array = (defaultValue ?? []);\n        for (const item of array) {\n            writer.string(item);\n        }\n    }\n}\nfunction timeArray(value, _defaultValue, writer) {\n    if (Array.isArray(value)) {\n        for (const item of value) {\n            time(item, undefined, writer);\n        }\n    }\n}\nfunction padding(offset, byteWidth) {\n    // The four byte header is not considered for alignment\n    const alignment = (offset - 4) % byteWidth;\n    return alignment > 0 ? byteWidth - alignment : 0;\n}\n//# sourceMappingURL=MessageWriter.js.map"],"names":["exports","encapsulationKind_1","isBigEndian_1","CdrReader","data","kind","value","length","count","array","output","i","relativeOffset","newOffset","offset","size","alignment","TypedArrayConstructor","getter","totalOffset","byteLength","copy","CdrSizeCalculator","byteCount","CdrWriter","options","strlen","writeLength","entry","bytesToWrite","padding","additionalBytes","capacity","doubled","newCapacity","buffer","EncapsulationKind","__createBinding","o","m","k","k2","__exportStar","p","endianTestArray","endianTestView","isBigEndian","cdr_1","MessageReader","definitions","rootDefinition","def","isConstantModule","reader","definition","msg","field","nestedDefinition","arrayLength","deser","typedArrayDeserializers","deserializers","readBoolArray","readStringArray","readTimeArray","sec","nsec","PRIMITIVE_SIZES","PRIMITIVE_WRITERS","bool","int8","uint8","int16","uint16","int32","uint32","int64","uint64","float32","float64","string","time","PRIMITIVE_ARRAY_WRITERS","boolArray","int8Array","uint8Array","int16Array","uint16Array","int32Array","uint32Array","int64Array","uint64Array","float32Array","float64Array","stringArray","timeArray","MessageWriter","message","writer","messageObj","nestedMessage","fieldLength","dataArray","entrySize","datatype","primitiveType","defaultValue","boolValue","_defaultValue","timeObj","item","byteWidth"],"sourceRoot":""}