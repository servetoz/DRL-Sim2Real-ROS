{"version":3,"file":"studio-1739.js","mappings":"yPAmBA,MAAMA,KAAY,MAAU,EAAqB,CAACC,EAAOC,EAASC,KAAa,CAC7E,SAAU,CACR,WAAY,SAEZ,UAAW,CACT,gBAAiB,a,GAGrB,MAAO,CACL,eAAgB,WAChB,QAAS,QACT,KAAM,EAEN,MAAO,CACL,SAAU,SACV,UAAW,OACX,IAAK,EACL,OAAQF,EAAM,OAAO,OAAS,C,EAGhC,GAAI,CACF,UAAW,CACT,gBAAiBA,EAAM,QAAQ,WAAW,K,GAI9C,GAAI,CACF,gBAAiBA,EAAM,QAAQ,WAAW,MAC1C,aAAcA,EAAM,QAAQ,CAAC,EAC7B,cAAeA,EAAM,QAAQ,GAAG,EAChC,WAAY,SACZ,MAAO,M,EAGT,GAAI,CACF,aAAcA,EAAM,QAAQ,GAAI,EAChC,cAAeA,EAAM,QAAQ,GAAG,EAChC,WAAY,SAEZ,CAAC,YAAYE,EAAQ,UAAU,EAAG,CAChC,WAAY,S,KAIlB,EAEF,SAASC,EAAS,CAAE,MAAAC,CAAM,EAAmB,CAC3C,KAAM,CAAE,QAAAF,CAAQ,EAAIH,EAAU,EAE9B,SACE,2BACE,wBACGK,EAAM,QACP,OAAC,IAAU,CACT,UAAWF,EAAQ,SACnB,KAAK,MACL,KAAK,QACL,SAAS,QACT,QAAS,IAAME,EAAM,IAAI,GAE1BA,EAAM,oBACL,QAAC,IAAU,CAAC,QAAQ,YAAY,SAAS,SAAQ,kBACzCA,EAAM,eAAe,GAE9B,OAEH,sBACGA,EAAM,YAAc,KACnB,YAEA,8BACGA,EAAM,cACP,OAAC,IAAU,CACT,UAAWF,EAAQ,SACnB,KAAK,MACL,KAAK,QACL,SAAS,QACT,QAAS,IAAME,EAAM,YAAc,EAAE,EACrC,GAEL,MAEH,0BAAgBA,EAAM,KAAI,kBAAkB,QAAO,uBAGnD,0BAAgBA,EAAM,KAAI,kBAAkB,YAAW,mBAElD,GAGX,CAEA,MAAMC,EAAsBC,GAAgCA,EAAI,aAC1DC,EAAmBD,GAAgCA,EAAI,YAAY,YAAY,UAC/EE,EAAiBF,GAAgCA,EAAI,YAAY,YAAY,QAE7EG,EAAeC,EAAM,KAAKP,CAAQ,EAExC,SAASQ,GAAU,CACjB,KAAM,CAAE,QAAAT,CAAQ,EAAIH,EAAU,EAExBa,KAAS,MAAmBP,CAAkB,EAC9CQ,KAAY,MAAmBN,CAAe,EAC9CO,KAAU,MAAmBN,CAAa,EAEhD,MAAI,CAACK,GAAa,CAACC,KAEf,iCACE,OAAC,IAAY,OACb,OAAC,IAAU,iCAAiC,OAMhD,iCACE,OAAC,IAAY,OACb,OAAC,IAAO,OACR,QAAC,IAAK,CAAC,WAAU,GAAC,UAAU,OAAM,aAChC,iBAAO,UAAWZ,EAAQ,MAAK,aAC7B,4BACE,2BACE,wCACA,sCACA,2CACA,mCAAkB,GACf,MAEP,yBACGU,EAAO,IAAKR,MACX,OAACK,EAAY,CAAkB,MAAOL,CAAK,EAAxBA,EAAM,IAAI,CAC9B,CAAC,EACI,OAEV,OAAC,IAAuB,CAAC,SAAU,CAAC,EAAI,GAClC,GAGd,CAEAO,EAAW,UAAY,aACvBA,EAAW,cAAgB,CAAC,EAE5B,WAAe,KAAMA,CAAU,C","sources":["webpack:///../../packages/studio-base/src/panels/DataSourceInfo/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { Divider, Typography } from \"@mui/material\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport CopyButton from \"@foxglove/studio-base/components/CopyButton\";\nimport { DirectTopicStatsUpdater } from \"@foxglove/studio-base/components/DirectTopicStatsUpdater\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport {\n  MessagePipelineContext,\n  useMessagePipeline,\n} from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { Topic } from \"@foxglove/studio-base/src/players/types\";\n\nconst useStyles = makeStyles<void, \"copyIcon\">()((theme, _params, classes) => ({\n  copyIcon: {\n    visibility: \"hidden\",\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    display: \"block\",\n    flex: 1,\n\n    thead: {\n      position: \"sticky\",\n      textAlign: \"left\",\n      top: 0,\n      zIndex: theme.zIndex.appBar - 1,\n    },\n\n    tr: {\n      \"&:hover\": {\n        backgroundColor: theme.palette.background.paper,\n      },\n    },\n\n    th: {\n      backgroundColor: theme.palette.background.paper,\n      paddingBlock: theme.spacing(1),\n      paddingInline: theme.spacing(1.5),\n      whiteSpace: \"nowrap\",\n      width: \"100%\",\n    },\n\n    td: {\n      paddingBlock: theme.spacing(0.25),\n      paddingInline: theme.spacing(1.5),\n      whiteSpace: \"nowrap\",\n\n      [`&:hover .${classes.copyIcon}`]: {\n        visibility: \"visible\",\n      },\n    },\n  },\n}));\n\nfunction TopicRow({ topic }: { topic: Topic }): JSX.Element {\n  const { classes } = useStyles();\n\n  return (\n    <tr>\n      <td>\n        {topic.name}\n        <CopyButton\n          className={classes.copyIcon}\n          edge=\"end\"\n          size=\"small\"\n          iconSize=\"small\"\n          getText={() => topic.name}\n        />\n        {topic.aliasedFromName && (\n          <Typography variant=\"subtitle2\" fontSize=\"0.5rem\">\n            from {topic.aliasedFromName}\n          </Typography>\n        )}\n      </td>\n      <td>\n        {topic.schemaName == undefined ? (\n          \"â€”\"\n        ) : (\n          <>\n            {topic.schemaName}\n            <CopyButton\n              className={classes.copyIcon}\n              edge=\"end\"\n              size=\"small\"\n              iconSize=\"small\"\n              getText={() => topic.schemaName ?? \"\"}\n            />\n          </>\n        )}\n      </td>\n      <td data-topic={topic.name} data-topic-stat=\"count\">\n        &mdash;\n      </td>\n      <td data-topic={topic.name} data-topic-stat=\"frequency\">\n        &mdash;\n      </td>\n    </tr>\n  );\n}\n\nconst selectSortedTopics = (ctx: MessagePipelineContext) => ctx.sortedTopics;\nconst selectStartTime = (ctx: MessagePipelineContext) => ctx.playerState.activeData?.startTime;\nconst selectEndTime = (ctx: MessagePipelineContext) => ctx.playerState.activeData?.endTime;\n\nconst MemoTopicRow = React.memo(TopicRow);\n\nfunction SourceInfo(): JSX.Element {\n  const { classes } = useStyles();\n\n  const topics = useMessagePipeline(selectSortedTopics);\n  const startTime = useMessagePipeline(selectStartTime);\n  const endTime = useMessagePipeline(selectEndTime);\n\n  if (!startTime || !endTime) {\n    return (\n      <>\n        <PanelToolbar />\n        <EmptyState>Waiting for data...</EmptyState>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <PanelToolbar />\n      <Divider />\n      <Stack fullHeight overflowY=\"auto\">\n        <table className={classes.table}>\n          <thead>\n            <tr>\n              <th>Topic Name</th>\n              <th>Datatype</th>\n              <th>Message count</th>\n              <th>Frequency</th>\n            </tr>\n          </thead>\n          <tbody>\n            {topics.map((topic) => (\n              <MemoTopicRow key={topic.name} topic={topic} />\n            ))}\n          </tbody>\n        </table>\n        <DirectTopicStatsUpdater interval={6} />\n      </Stack>\n    </>\n  );\n}\n\nSourceInfo.panelType = \"SourceInfo\";\nSourceInfo.defaultConfig = {};\n\nexport default Panel(SourceInfo);\n"],"names":["useStyles","theme","_params","classes","TopicRow","topic","selectSortedTopics","ctx","selectStartTime","selectEndTime","MemoTopicRow","React","SourceInfo","topics","startTime","endTime"],"sourceRoot":""}