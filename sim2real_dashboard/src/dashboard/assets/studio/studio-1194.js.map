{"version":3,"file":"studio-1194.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/panels/diagnostics/DiagnosticStatus.tsx","webpack:///../../packages/studio-base/src/panels/diagnostics/useAvailableDiagnostics.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/DiagnosticStatusPanel.tsx","webpack:///../../packages/studio-base/src/panels/diagnostics/settings.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/useDiagnostics.ts","webpack:///../../packages/studio-base/src/util/fuzzyFilter.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/util.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport PowerInputIcon from \"@mui/icons-material/PowerInput\";\nimport ShowChartIcon from \"@mui/icons-material/ShowChart\";\nimport {\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  IconButton,\n  Typography,\n  tableRowClasses,\n  iconButtonClasses,\n} from \"@mui/material\";\nimport { clamp } from \"lodash\";\nimport { ReactElement, useCallback, useEffect, useRef, useState } from \"react\";\nimport { createSelector } from \"reselect\";\nimport sanitizeHtml from \"sanitize-html\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { openSiblingPlotPanel } from \"@foxglove/studio-base/panels/Plot\";\nimport { openSiblingStateTransitionsPanel } from \"@foxglove/studio-base/panels/StateTransitions\";\nimport { OpenSiblingPanel } from \"@foxglove/studio-base/types/panels\";\n\nimport { DiagnosticInfo, KeyValue, DiagnosticStatusMessage, LEVELS } from \"./util\";\n\nconst MIN_SPLIT_FRACTION = 0.1;\n\ntype Props = {\n  info: DiagnosticInfo;\n  splitFraction: number | undefined;\n  onChangeSplitFraction: (arg0: number) => void;\n  topicToRender: string;\n  numericPrecision: number | undefined;\n  openSiblingPanel: OpenSiblingPanel;\n};\n\ntype FormattedKeyValue = {\n  key: string;\n  keyHtml: { __html: string } | undefined;\n  value: string;\n  valueHtml: { __html: string } | undefined;\n};\n\nconst allowedTags = [\n  \"b\",\n  \"br\",\n  \"center\",\n  \"code\",\n  \"em\",\n  \"font\",\n  \"i\",\n  \"strong\",\n  \"table\",\n  \"td\",\n  \"th\",\n  \"tr\",\n  \"tt\",\n  \"u\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"H1\",\n  \"H2\",\n  \"H3\",\n  \"H4\",\n  \"H5\",\n  \"H6\",\n];\n\nconst useStyles = makeStyles()((theme) => ({\n  resizeHandle: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    width: 12,\n    marginLeft: -6,\n    cursor: \"col-resize\",\n\n    \"&:hover, &:active, &:focus\": {\n      outline: \"none\",\n\n      \"&::after\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 6,\n        marginLeft: -2,\n        width: 4,\n        backgroundColor: theme.palette.action.focus,\n      },\n    },\n  },\n  table: {\n    \"@media (pointer: fine)\": {\n      [`.${tableRowClasses.root} .${iconButtonClasses.root}`]: { visibility: \"hidden\" },\n      [`.${tableRowClasses.root}:hover .${iconButtonClasses.root}`]: { visibility: \"visible\" },\n    },\n  },\n  tableHeaderRow: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  htmlTableCell: {\n    \"h1, h2, h3, h4, h5, h6\": {\n      fontFamily: theme.typography.subtitle2.fontFamily,\n      fontSize: theme.typography.subtitle2.fontSize,\n      lineHeight: theme.typography.subtitle2.lineHeight,\n      letterSpacing: theme.typography.subtitle2.letterSpacing,\n      fontWeight: 800,\n      margin: 0,\n    },\n  },\n  iconButton: {\n    \"&:hover, &:active, &:focus\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nfunction sanitize(value: string): { __html: string } {\n  return {\n    __html: sanitizeHtml(value, {\n      allowedTags,\n      allowedAttributes: {\n        font: [\"color\", \"size\"],\n        td: [\"colspan\"],\n        th: [\"colspan\"],\n      },\n    }),\n  };\n}\n\n// preliminary check to avoid expensive operations when there is no html\nconst HAS_ANY_HTML = new RegExp(`<(${allowedTags.join(\"|\")})`);\n\nconst getFormattedKeyValues = createSelector(\n  (message: DiagnosticStatusMessage) => message,\n  (message: DiagnosticStatusMessage): FormattedKeyValue[] => {\n    return message.values.map(({ key, value }: KeyValue) => {\n      return {\n        key,\n        keyHtml: HAS_ANY_HTML.test(key) ? sanitize(key) : undefined,\n        value,\n        valueHtml: HAS_ANY_HTML.test(value) ? sanitize(value) : undefined,\n      };\n    });\n  },\n);\n\n// component to display a single diagnostic status\nexport default function DiagnosticStatus(props: Props): JSX.Element {\n  const {\n    onChangeSplitFraction,\n    info,\n    topicToRender,\n    numericPrecision,\n    openSiblingPanel,\n    splitFraction = 0.5,\n  } = props;\n  const { classes } = useStyles();\n  const tableRef = useRef<HTMLTableElement>(ReactNull);\n\n  const resizeMouseDown = useCallback((event: React.MouseEvent<Element>) => {\n    setResizing(true);\n    event.preventDefault();\n  }, []);\n  const resizeMouseUp = useCallback(() => setResizing(false), []);\n  const resizeMouseMove = useCallback(\n    (event: MouseEvent) => {\n      if (!tableRef.current) {\n        return;\n      }\n\n      const { left, right } = tableRef.current.getBoundingClientRect();\n      const newSplitFraction = clamp(\n        (event.clientX - left) / (right - left),\n        MIN_SPLIT_FRACTION,\n        1 - MIN_SPLIT_FRACTION,\n      );\n      onChangeSplitFraction(newSplitFraction);\n    },\n    [onChangeSplitFraction],\n  );\n\n  const [resizing, setResizing] = useState(false);\n  useEffect(() => {\n    if (resizing) {\n      window.addEventListener(\"mousemove\", resizeMouseMove);\n      window.addEventListener(\"mouseup\", resizeMouseUp);\n      return () => {\n        window.removeEventListener(\"mousemove\", resizeMouseMove);\n        window.removeEventListener(\"mouseup\", resizeMouseUp);\n      };\n    } else {\n      return undefined;\n    }\n  }, [resizeMouseMove, resizeMouseUp, resizing]);\n\n  const renderKeyValueCell = useCallback(\n    (\n      html: { __html: string } | undefined,\n      str: string,\n      openPlotPanelIconElem?: React.ReactNode,\n    ): ReactElement => {\n      if (html) {\n        return <TableCell className={classes.htmlTableCell} dangerouslySetInnerHTML={html} />;\n      }\n\n      // Apply numeric precision to the value if requested and it can be parsed\n      // as a float\n      let strToRender = str;\n      if (numericPrecision != undefined && isFloatOrInteger(str)) {\n        strToRender = parseFloat(str).toFixed(numericPrecision);\n      }\n\n      return (\n        <>\n          <TableCell padding=\"checkbox\">\n            <Stack\n              direction=\"row\"\n              gap={1}\n              alignItems=\"center\"\n              flex=\"auto\"\n              justifyContent=\"space-between\"\n            >\n              {strToRender ? strToRender : \"\\xa0\"}\n              {openPlotPanelIconElem}\n            </Stack>\n          </TableCell>\n        </>\n      );\n    },\n    [classes.htmlTableCell, numericPrecision],\n  );\n\n  const renderKeyValueSections = useCallback((): React.ReactNode => {\n    const formattedKeyVals: FormattedKeyValue[] = getFormattedKeyValues(info.status);\n\n    return formattedKeyVals.map(({ key, value, keyHtml, valueHtml }, idx) => {\n      // We need both `hardware_id` and `name`; one of them is not enough. That's also how we identify\n      // what to show in this very panel; see `selectedHardwareId` AND `selectedName` in the config.\n      const valuePath = `${topicToRender}.status[:]{hardware_id==\"${info.status.hardware_id}\"}{name==\"${info.status.name}\"}.values[:]{key==\"${key}\"}.value`;\n\n      let openPlotPanelIconElem = undefined;\n      if (value.length > 0) {\n        openPlotPanelIconElem = !isNaN(Number(value)) ? (\n          <IconButton\n            className={classes.iconButton}\n            title=\"Open in Plot panel\"\n            color=\"inherit\"\n            size=\"small\"\n            data-testid=\"open-plot-icon\"\n            onClick={() => openSiblingPlotPanel(openSiblingPanel, valuePath)}\n          >\n            <ShowChartIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : (\n          <IconButton\n            className={classes.iconButton}\n            title=\"Open in State Transitions panel\"\n            color=\"inherit\"\n            size=\"small\"\n            onClick={() => openSiblingStateTransitionsPanel(openSiblingPanel, valuePath)}\n          >\n            <PowerInputIcon fontSize=\"inherit\" />\n          </IconButton>\n        );\n      }\n      return (\n        <TableRow key={idx} hover>\n          {renderKeyValueCell(keyHtml, key)}\n          {renderKeyValueCell(valueHtml, value, openPlotPanelIconElem)}\n        </TableRow>\n      );\n    });\n  }, [classes.iconButton, info.status, openSiblingPanel, renderKeyValueCell, topicToRender]);\n\n  const STATUS_COLORS: Record<number, string> = {\n    [LEVELS.OK]: \"success.main\",\n    [LEVELS.ERROR]: \"error.main\",\n    [LEVELS.WARN]: \"warning.main\",\n    [LEVELS.STALE]: \"info.main\",\n  };\n\n  return (\n    <div>\n      <div\n        className={classes.resizeHandle}\n        style={{\n          left: `${100 * splitFraction}%`,\n        }}\n        onMouseDown={resizeMouseDown}\n        data-testid-resizehandle\n      />\n      <Table className={classes.table} size=\"small\" ref={tableRef}>\n        <TableBody>\n          {/* Use a dummy row to fix the column widths */}\n          <TableRow style={{ height: 0 }}>\n            <TableCell\n              padding=\"none\"\n              style={{ width: `${100 * splitFraction}%`, borderRight: \"none\" }}\n            />\n            <TableCell padding=\"none\" style={{ borderLeft: \"none\" }} />\n          </TableRow>\n          <TableRow className={classes.tableHeaderRow}>\n            <TableCell variant=\"head\" data-testid=\"DiagnosticStatus-display-name\" colSpan={2}>\n              <Tooltip\n                arrow\n                title={\n                  <>\n                    <Typography variant=\"body2\">\n                      Hardware ID: <code>{info.status.hardware_id}</code>\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      Name: <code>{info.status.name}</code>\n                    </Typography>\n                  </>\n                }\n              >\n                <Typography\n                  color={STATUS_COLORS[info.status.level]}\n                  variant=\"subtitle1\"\n                  fontWeight={800}\n                >\n                  {info.displayName}\n                </Typography>\n              </Tooltip>\n            </TableCell>\n          </TableRow>\n          <TableRow hover>\n            <TableCell colSpan={2} padding=\"checkbox\">\n              <Stack\n                direction=\"row\"\n                flex=\"auto\"\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n                gap={1}\n              >\n                <Typography\n                  flex=\"auto\"\n                  color={STATUS_COLORS[info.status.level]}\n                  variant=\"inherit\"\n                  fontWeight={800}\n                >\n                  {info.status.message}\n                </Typography>\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" gap={1}>\n                  <IconButton\n                    className={classes.iconButton}\n                    title=\"Open in State Transitions panel\"\n                    size=\"small\"\n                    onClick={() =>\n                      openSiblingStateTransitionsPanel(\n                        openSiblingPanel,\n                        `${topicToRender}.status[:]{hardware_id==\"${info.status.hardware_id}\"}{name==\"${info.status.name}\"}.message`,\n                      )\n                    }\n                  >\n                    <PowerInputIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Stack>\n              </Stack>\n            </TableCell>\n          </TableRow>\n          {renderKeyValueSections()}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\n// Returns true if the input string can be parsed as a float or an integer using\n// parseFloat(). Hex and octal numbers will return false.\nfunction isFloatOrInteger(n: string): boolean {\n  if (n[0] === \"0\" && n.length > 1) {\n    if (n[1] === \"x\" || n[1] === \"X\" || n[1] === \"o\" || n[1] === \"O\") {\n      return false;\n    }\n  }\n  return !isNaN(parseFloat(n)) && isFinite(Number(n));\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { useMemo } from \"react\";\n\nimport { useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\nimport { mightActuallyBePartial } from \"@foxglove/studio-base/util/mightActuallyBePartial\";\n\nimport { DiagnosticStatusArrayMsg } from \"./util\";\n\ntype DiagnosticNameSet = Set<string>;\ntype UseAvailableDiagnosticResult = Map<string, DiagnosticNameSet>;\n\nfunction addMessages(\n  previousAvailableDiagnostics: UseAvailableDiagnosticResult,\n  messages: readonly MessageEvent[],\n): UseAvailableDiagnosticResult {\n  // If we detect new hardware ids or names we need to create a new instance of available diagnostics\n  // so downstream consumers know it changed by observing the object reference changing\n  let modified = false;\n\n  for (const message of messages as MessageEvent<DiagnosticStatusArrayMsg>[]) {\n    const { status: statusArray }: DiagnosticStatusArrayMsg = message.message;\n    if (statusArray.length === 0) {\n      continue;\n    }\n\n    for (const status of statusArray) {\n      const hardwareId = mightActuallyBePartial(status).hardware_id ?? \"\";\n      const name = status.name;\n\n      const nameSet = previousAvailableDiagnostics.get(hardwareId);\n      if (!nameSet) {\n        modified = true;\n        previousAvailableDiagnostics.set(hardwareId, new Set<string>([name]));\n      } else if (!nameSet.has(name) && name) {\n        modified = true;\n        nameSet.add(name);\n      }\n    }\n  }\n\n  return modified ? new Map(previousAvailableDiagnostics) : previousAvailableDiagnostics;\n}\n\nconst EmptyMap = () => new Map();\n\nexport default function useAvailableDiagnostics(topic?: string): UseAvailableDiagnosticResult {\n  const topics = useMemo(() => {\n    if (topic) {\n      return [topic];\n    }\n    return [];\n  }, [topic]);\n\n  return useMessageReducer<UseAvailableDiagnosticResult>({\n    topics,\n    restore: EmptyMap,\n    addMessages,\n  });\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { produce } from \"immer\";\nimport { set, sortBy, uniq } from \"lodash\";\nimport { useCallback, useMemo, useEffect } from \"react\";\n\nimport { SettingsTreeAction } from \"@foxglove/studio\";\nimport { useDataSourceInfo } from \"@foxglove/studio-base/PanelAPI\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport { usePanelContext } from \"@foxglove/studio-base/components/PanelContext\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport DiagnosticStatus from \"./DiagnosticStatus\";\nimport { buildStatusPanelSettingsTree } from \"./settings\";\nimport useAvailableDiagnostics from \"./useAvailableDiagnostics\";\nimport useDiagnostics from \"./useDiagnostics\";\nimport { DiagnosticStatusConfig as Config, getDisplayName } from \"./util\";\n\ntype Props = {\n  config: Config;\n  saveConfig: SaveConfig<Config>;\n};\n\nconst ALLOWED_DATATYPES: string[] = [\n  \"diagnostic_msgs/DiagnosticArray\",\n  \"diagnostic_msgs/msg/DiagnosticArray\",\n  \"ros.diagnostic_msgs.DiagnosticArray\",\n];\n\n// component to display a single diagnostic status from list\nfunction DiagnosticStatusPanel(props: Props) {\n  const { saveConfig, config } = props;\n  const { topics } = useDataSourceInfo();\n  const { openSiblingPanel } = usePanelContext();\n  const { selectedHardwareId, selectedName, splitFraction, topicToRender, numericPrecision } =\n    config;\n\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n\n  // Filter down all topics to those that conform to our supported datatypes\n  const availableTopics = useMemo(() => {\n    const filtered = topics\n      .filter(\n        (topic) => topic.schemaName != undefined && ALLOWED_DATATYPES.includes(topic.schemaName),\n      )\n      .map((topic) => topic.name);\n\n    // Keeps only the first occurrence of each topic.\n    return uniq([...filtered]);\n  }, [topics]);\n\n  // If the topicToRender is not in the availableTopics, then we should not try to use it\n  const diagnosticTopic = useMemo(() => {\n    return availableTopics.includes(topicToRender) ? topicToRender : undefined;\n  }, [availableTopics, topicToRender]);\n\n  const diagnostics = useDiagnostics(diagnosticTopic);\n  const availableDiagnostics = useAvailableDiagnostics(diagnosticTopic);\n\n  // generate Autocomplete entries from the available diagnostics\n  const autocompleteOptions = useMemo(() => {\n    const items = [];\n\n    for (const [hardwareId, nameSet] of availableDiagnostics) {\n      if (hardwareId) {\n        items.push({ label: hardwareId, hardwareId, name: undefined });\n      }\n\n      for (const name of nameSet) {\n        if (name) {\n          const label = getDisplayName(hardwareId, name);\n          items.push({ label, hardwareId, name });\n        }\n      }\n    }\n\n    return items;\n  }, [availableDiagnostics]);\n\n  const selectedDisplayName = useMemo(() => {\n    return selectedHardwareId != undefined\n      ? getDisplayName(selectedHardwareId, selectedName ?? \"\")\n      : undefined;\n  }, [selectedHardwareId, selectedName]);\n\n  const selectedAutocompleteOption = useMemo(() => {\n    return (\n      autocompleteOptions.find((item) => {\n        return item.label === selectedDisplayName;\n      }) ?? ReactNull\n    );\n  }, [autocompleteOptions, selectedDisplayName]);\n\n  const filteredDiagnostics = useMemo(() => {\n    const diagnosticsByName = diagnostics.get(selectedHardwareId ?? \"\");\n    const items = [];\n\n    if (diagnosticsByName != undefined) {\n      for (const diagnostic of diagnosticsByName.values()) {\n        if (selectedName == undefined || selectedName === diagnostic.status.name) {\n          items.push(diagnostic);\n        }\n      }\n    }\n\n    return items;\n  }, [diagnostics, selectedHardwareId, selectedName]);\n\n  // If there are available options but none match the user input we show a No matches\n  // but if we don't have any options at all then we show waiting for diagnostics...\n  const noOptionsText =\n    autocompleteOptions.length > 0 ? \"No matches\" : \"Waiting for diagnostics...\";\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action !== \"update\") {\n        return;\n      }\n\n      const { path, value } = action.payload;\n      saveConfig(produce((draft) => set(draft, path.slice(1), value)));\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      nodes: buildStatusPanelSettingsTree(topicToRender, numericPrecision, availableTopics),\n    });\n  }, [actionHandler, availableTopics, topicToRender, numericPrecision, updatePanelSettingsTree]);\n\n  return (\n    <Stack flex=\"auto\" overflow=\"hidden\">\n      <PanelToolbar>\n        <Autocomplete\n          disablePortal\n          blurOnSelect={true}\n          disabled={autocompleteOptions.length === 0}\n          options={autocompleteOptions}\n          value={selectedAutocompleteOption ?? ReactNull}\n          noOptionsText={noOptionsText}\n          onChange={(_ev, value) => {\n            if (!value) {\n              saveConfig({\n                selectedHardwareId: undefined,\n                selectedName: undefined,\n              });\n              return;\n            }\n\n            saveConfig({\n              selectedHardwareId: value.hardwareId,\n              selectedName: value.name,\n            });\n          }}\n          fullWidth\n          size=\"small\"\n          renderInput={(params) => (\n            <TextField\n              variant=\"standard\"\n              {...params}\n              InputProps={{ ...params.InputProps, disableUnderline: true }}\n              placeholder={selectedDisplayName ?? \"Filter\"}\n            />\n          )}\n        />\n      </PanelToolbar>\n      {filteredDiagnostics.length > 0 ? (\n        <Stack flex=\"auto\" overflowY=\"auto\">\n          {sortBy(filteredDiagnostics, ({ status }) => status.name.toLowerCase()).map((item) => (\n            <DiagnosticStatus\n              key={item.id}\n              info={item}\n              splitFraction={splitFraction}\n              onChangeSplitFraction={(newSplitFraction) =>\n                props.saveConfig({ splitFraction: newSplitFraction })\n              }\n              topicToRender={topicToRender}\n              numericPrecision={numericPrecision}\n              openSiblingPanel={openSiblingPanel}\n            />\n          ))}\n        </Stack>\n      ) : selectedDisplayName ? (\n        <EmptyState>\n          Waiting for diagnostics from <code>{selectedDisplayName}</code>\n        </EmptyState>\n      ) : (\n        <EmptyState>No diagnostic node selected</EmptyState>\n      )}\n    </Stack>\n  );\n}\n\nconst defaultConfig: Config = { topicToRender: \"/diagnostics\" };\n\nexport default Panel(\n  Object.assign(DiagnosticStatusPanel, {\n    panelType: \"DiagnosticStatusPanel\",\n    defaultConfig,\n  }),\n);\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { SettingsTreeNodes } from \"@foxglove/studio\";\n\nimport { DiagnosticSummaryConfig } from \"./util\";\n\nexport function buildSummarySettingsTree(\n  config: DiagnosticSummaryConfig,\n  topicToRender: string,\n  availableTopics: readonly string[],\n): SettingsTreeNodes {\n  const topicOptions = availableTopics.map((topic) => ({ label: topic, value: topic }));\n  const topicIsAvailable = availableTopics.includes(topicToRender);\n  if (!topicIsAvailable) {\n    topicOptions.unshift({ value: topicToRender, label: topicToRender });\n  }\n  const topicError = topicIsAvailable ? undefined : `Topic ${topicToRender} is not available`;\n\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        topicToRender: {\n          label: \"Topic\",\n          input: \"select\",\n          value: topicToRender,\n          error: topicError,\n          options: topicOptions,\n        },\n        sortByLevel: { label: \"Sort by level\", input: \"boolean\", value: config.sortByLevel },\n      },\n    },\n  };\n}\n\nexport function buildStatusPanelSettingsTree(\n  topicToRender: string,\n  numericPrecision: number | undefined,\n  availableTopics: readonly string[],\n): SettingsTreeNodes {\n  const topicOptions = availableTopics.map((topic) => ({ label: topic, value: topic }));\n  const topicIsAvailable = availableTopics.includes(topicToRender);\n  if (!topicIsAvailable) {\n    topicOptions.unshift({ value: topicToRender, label: topicToRender });\n  }\n  const topicError = topicIsAvailable ? undefined : `Topic ${topicToRender} is not available`;\n\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        topicToRender: {\n          label: \"Topic\",\n          input: \"select\",\n          value: topicToRender,\n          error: topicError,\n          options: topicOptions,\n        },\n        numericPrecision: {\n          label: \"Numeric precision\",\n          input: \"number\",\n          min: 0,\n          max: 17,\n          precision: 0,\n          step: 1,\n          placeholder: \"auto\",\n          value: numericPrecision,\n        },\n      },\n    },\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useMemo } from \"react\";\n\nimport { useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\n\nimport { DiagnosticStatusArrayMsg, DiagnosticsById, computeDiagnosticInfo } from \"./util\";\n\ntype UseDiagnosticsResult = Map<string, DiagnosticsById>;\n\n// Exported for tests\nexport function addMessages(\n  prevResult: UseDiagnosticsResult,\n  msgEvents: readonly MessageEvent[],\n): UseDiagnosticsResult {\n  // Mutates the previous value since there might be many diagnostic messages\n  let modified = false;\n  for (const msgEvent of msgEvents as MessageEvent<DiagnosticStatusArrayMsg>[]) {\n    const { header, status: statusArray }: DiagnosticStatusArrayMsg = msgEvent.message;\n\n    for (const status of statusArray) {\n      const info = computeDiagnosticInfo(status, header.stamp);\n      const hardwareId = status.hardware_id;\n      const hardwareDiagnosticsByName = prevResult.get(hardwareId);\n      if (hardwareDiagnosticsByName == undefined) {\n        modified = true;\n        prevResult.set(hardwareId, new Map([[status.name, info]]));\n      } else {\n        modified = true;\n        hardwareDiagnosticsByName.set(status.name, info);\n      }\n    }\n  }\n  // We shallow-copy the buffer when it changes to help users know when to rerender.\n  return modified ? new Map(prevResult) : prevResult;\n}\n\nconst EmptyMap = () => new Map();\n\nexport default function useDiagnostics(topic?: string): UseDiagnosticsResult {\n  const topics = useMemo(() => {\n    if (topic) {\n      return [topic];\n    }\n    return [];\n  }, [topic]);\n\n  return useMessageReducer<UseDiagnosticsResult>({\n    topics,\n    restore: EmptyMap,\n    addMessages,\n  });\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\n// Fuzzy matching: allow filter \"fzmg\" to match \"fuzzy/matching\".\n// Score by how early in the string matches appear.\nexport default function fuzzyFilter<T>({\n  options,\n  filter,\n  getText,\n  sort = true,\n}: {\n  options: T[];\n  filter: string | undefined;\n  getText: (option: T) => string;\n  sort?: boolean;\n}): T[] {\n  if (filter == undefined || filter === \"\") {\n    return options;\n  }\n  const needle = filter.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n  if (needle.length === 0) {\n    return options;\n  }\n\n  type Result = { option: T; score: number };\n  const results: Result[] = [];\n\n  for (const option of options) {\n    const haystack = getText(option).toLowerCase();\n    let charPos = -1;\n    let score = 0;\n    for (const char of needle) {\n      charPos = haystack.indexOf(char, charPos + 1);\n      if (charPos === -1) {\n        break;\n      }\n      score += charPos;\n    }\n    if (charPos !== -1) {\n      results.push({\n        option,\n        score: score * haystack.length,\n      });\n    }\n  }\n\n  if (sort) {\n    results.sort((a, b) => a.score - b.score);\n  }\n  return results.map((result: Result): T => result.option);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { sortBy, truncate } from \"lodash\";\n\nimport { Time } from \"@foxglove/rostime\";\nimport { Header } from \"@foxglove/studio-base/types/Messages\";\nimport fuzzyFilter from \"@foxglove/studio-base/util/fuzzyFilter\";\n\n// Trim the message if it's too long. We sometimes get crazy massive messages here that can\n// otherwise crash our entire UI. I looked at a bunch of messages manually and they are typically\n// way smaller than 5KB, so this is a very generous maximum. But feel free to increase it more if\n// necessary. Exported for tests.\nexport const MAX_STRING_LENGTH = 5000; // 5KB\n\n// ts-prune-ignore-next\nexport const LEVELS: { OK: 0; WARN: 1; ERROR: 2; STALE: 3 } = {\n  OK: 0,\n  WARN: 1,\n  ERROR: 2,\n  STALE: 3,\n};\n\nexport const LEVEL_NAMES: { [key: number]: string } = {\n  0: \"ok\",\n  1: \"warn\",\n  2: \"error\",\n  3: \"stale\",\n};\n\nexport const KNOWN_LEVELS = [0, 1, 2, 3];\n\ninterface ToString {\n  toString(): string;\n}\n\nexport type DiagnosticStatusConfig = {\n  selectedHardwareId?: string;\n  selectedName?: string;\n  splitFraction?: number;\n  topicToRender: string;\n  numericPrecision?: number;\n};\n\nexport type DiagnosticSummaryConfig = {\n  minLevel: number;\n  pinnedIds: DiagnosticId[];\n  topicToRender: string;\n  hardwareIdFilter: string;\n  sortByLevel?: boolean;\n};\n\nexport type DiagnosticId = string & ToString;\n\nexport type KeyValue = { key: string; value: string };\n\n// diagnostic_msgs/DiagnosticStatus\nexport type DiagnosticStatusMessage = {\n  name: string;\n  hardware_id: string;\n  level: number;\n  message: string;\n  values: KeyValue[];\n};\n\nexport type DiagnosticInfo = {\n  status: DiagnosticStatusMessage;\n  stamp: Time;\n  id: DiagnosticId;\n  displayName: string;\n};\n\nexport type DiagnosticStatusArrayMsg = {\n  header: Header;\n  status: DiagnosticStatusMessage[];\n};\n\nexport type DiagnosticsById = Map<DiagnosticId, DiagnosticInfo>;\n\n// Remove leading slash from hardware_id if present.\nexport function trimHardwareId(hardwareId: string): string {\n  return hardwareId.startsWith(\"/\") ? hardwareId.slice(1) : hardwareId;\n}\n\nexport function getDiagnosticId(hardwareId: string, name?: string): DiagnosticId {\n  const trimmedHardwareId = trimHardwareId(hardwareId);\n  return name != undefined ? `|${trimmedHardwareId}|${name}|` : `|${trimmedHardwareId}|`;\n}\n\nexport function getDisplayName(hardwareId: string, name: string): string {\n  return name.length > 0\n    ? hardwareId.length > 0\n      ? `${hardwareId}: ${name}`\n      : `${name}`\n    : hardwareId.length > 0\n    ? `${hardwareId}`\n    : `(empty)`;\n}\n\n// ensures the diagnostic status message's name consists of both the hardware id and the name\nexport function computeDiagnosticInfo(\n  status: DiagnosticStatusMessage,\n  stamp: Time,\n): DiagnosticInfo {\n  const displayName = getDisplayName(status.hardware_id, status.name);\n  let validatedStatus = status;\n  if (status.values.some(({ value }) => value.length > MAX_STRING_LENGTH)) {\n    validatedStatus = {\n      ...status,\n      values: status.values.map((kv) =>\n        kv.value.length > MAX_STRING_LENGTH\n          ? { key: kv.key, value: truncate(kv.value, { length: MAX_STRING_LENGTH }) }\n          : kv,\n      ),\n    };\n  }\n  return {\n    status: validatedStatus,\n    stamp,\n    id: getDiagnosticId(status.hardware_id, status.name),\n    displayName,\n  };\n}\n\nexport function getDiagnosticsByLevel(\n  diagnosticsByHardwareId: Map<string, DiagnosticsById>,\n): Map<number, DiagnosticInfo[]> {\n  const ret = new Map<number, DiagnosticInfo[]>();\n  for (const diagnosticsByName of diagnosticsByHardwareId.values()) {\n    for (const diagnostic of diagnosticsByName.values()) {\n      const statuses = ret.get(diagnostic.status.level);\n      if (statuses) {\n        statuses.push(diagnostic);\n      } else {\n        ret.set(diagnostic.status.level, [diagnostic]);\n      }\n    }\n  }\n  return ret;\n}\n\nexport const filterAndSortDiagnostics = (\n  nodes: DiagnosticInfo[],\n  hardwareIdFilter: string,\n  pinnedIds: DiagnosticId[],\n): DiagnosticInfo[] => {\n  const unpinnedNodes = nodes.filter(({ id }) => !pinnedIds.includes(id));\n  if (hardwareIdFilter.length === 0) {\n    return sortBy(unpinnedNodes, (info) => info.displayName.replace(/^\\//, \"\"));\n  }\n  // fuzzyFilter sorts by match accuracy.\n  return fuzzyFilter({\n    options: unpinnedNodes,\n    filter: hardwareIdFilter,\n    getText: ({ displayName }) => displayName,\n  });\n};\n"],"names":["MIN_SPLIT_FRACTION","allowedTags","useStyles","theme","tableRowClasses","iconButtonClasses","sanitize","value","HAS_ANY_HTML","getFormattedKeyValues","message","key","DiagnosticStatus","props","onChangeSplitFraction","info","topicToRender","numericPrecision","openSiblingPanel","splitFraction","classes","tableRef","resizeMouseDown","event","setResizing","resizeMouseUp","resizeMouseMove","left","right","newSplitFraction","resizing","renderKeyValueCell","html","str","openPlotPanelIconElem","TableCell","strToRender","isFloatOrInteger","Stack","renderKeyValueSections","keyHtml","valueHtml","idx","valuePath","IconButton","PowerInput","ShowChart","TableRow","STATUS_COLORS","Table","TableBody","Tooltip","Typography","addMessages","previousAvailableDiagnostics","messages","modified","statusArray","status","hardwareId","mightActuallyBePartial","name","nameSet","EmptyMap","useAvailableDiagnostics","topic","topics","ALLOWED_DATATYPES","DiagnosticStatusPanel","saveConfig","config","selectedHardwareId","selectedName","updatePanelSettingsTree","availableTopics","filtered","diagnosticTopic","diagnostics","useDiagnostics","availableDiagnostics","autocompleteOptions","items","label","selectedDisplayName","selectedAutocompleteOption","item","filteredDiagnostics","diagnosticsByName","diagnostic","noOptionsText","actionHandler","action","path","draft","PanelToolbar","Autocomplete","_ev","params","TextField","EmptyState","defaultConfig","Panel","buildSummarySettingsTree","topicOptions","topicIsAvailable","topicError","buildStatusPanelSettingsTree","prevResult","msgEvents","msgEvent","header","hardwareDiagnosticsByName","fuzzyFilter","options","filter","getText","sort","needle","results","option","haystack","charPos","score","char","a","b","result","MAX_STRING_LENGTH","LEVELS","LEVEL_NAMES","KNOWN_LEVELS","trimHardwareId","getDiagnosticId","trimmedHardwareId","getDisplayName","computeDiagnosticInfo","stamp","displayName","validatedStatus","kv","getDiagnosticsByLevel","diagnosticsByHardwareId","ret","statuses","filterAndSortDiagnostics","nodes","hardwareIdFilter","pinnedIds","unpinnedNodes","id"],"sourceRoot":""}