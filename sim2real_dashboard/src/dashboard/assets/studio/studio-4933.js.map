{"version":3,"file":"studio-4933.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/MessagePathSyntax/filterMatches.ts","webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useCachedGetMessagePathDataItems.ts","webpack:///../../packages/studio-base/src/panels/Table/sanitizeAccessorPath.ts","webpack:///../../packages/studio-base/src/panels/Table/TableCell.tsx","webpack:///../../packages/studio-base/src/panels/Table/Table.tsx","webpack:///../../packages/studio-base/src/panels/Table/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessagePathFilter } from \"./constants\";\n\nexport function filterMatches(filter: MessagePathFilter, value: unknown): boolean {\n  if (typeof filter.value === \"object\") {\n    throw new Error(\"filterMatches only works on paths where global variables have been filled in\");\n  }\n  if (filter.value == undefined) {\n    return false;\n  }\n\n  let currentValue = value;\n  for (const name of filter.path) {\n    if (typeof currentValue !== \"object\" || currentValue == undefined) {\n      return false;\n    }\n    currentValue = (currentValue as Record<string, unknown>)[name];\n    if (currentValue == undefined) {\n      return false;\n    }\n  }\n\n  // Test equality using `==` so we can be forgiving for comparing booleans with integers,\n  // comparing numbers with strings, bigints with numbers, and so on.\n  // eslint-disable-next-line @foxglove/strict-equality\n  return currentValue != undefined && currentValue == filter.value;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { isEqual } from \"lodash\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\nimport { useShallowMemo, useChangeDetector, useDeepMemo } from \"@foxglove/hooks\";\nimport { Immutable } from \"@foxglove/studio\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport useGlobalVariables, {\n  GlobalVariables,\n} from \"@foxglove/studio-base/hooks/useGlobalVariables\";\nimport { MessageEvent, Topic } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\nimport {\n  enumValuesByDatatypeAndField,\n  extractTypeFromStudioEnumAnnotation,\n  getTopicsByTopicName,\n} from \"@foxglove/studio-base/util/selectors\";\n\nimport { MessagePathStructureItem, MessagePathStructureItemMessage, RosPath } from \"./constants\";\nimport { filterMatches } from \"./filterMatches\";\nimport { TypicalFilterNames } from \"./isTypicalFilterName\";\nimport { messagePathStructures } from \"./messagePathsForDatatype\";\nimport parseRosPath, { quoteTopicNameIfNeeded } from \"./parseRosPath\";\n\ntype ValueInMapRecord<T> = T extends Map<unknown, infer I> ? I : never;\n\nexport type MessagePathDataItem = {\n  value: unknown; // The actual value.\n  path: string; // The path to get to this value. Tries to use \"nice ids\" like `[:]{some_id==123}` wherever possible.\n  constantName?: string; // The name of the constant that the value matches up with, if any.\n};\n\n// Given a set of message paths, this returns a function that you can call to resolve a single path\n// and message to an array of `MessagePathDataItem` objects. The array+objects will be the same by\n// reference, as long as topics/datatypes/global variables haven't changed in the meantime.\nexport function useCachedGetMessagePathDataItems(\n  paths: readonly string[],\n): (path: string, message: MessageEvent) => MessagePathDataItem[] | undefined {\n  const { topics: providerTopics, datatypes } = PanelAPI.useDataSourceInfo();\n  const { globalVariables } = useGlobalVariables();\n  const memoizedPaths = useShallowMemo(paths);\n\n  // We first fill in global variables in the paths, so we can later see which paths have really\n  // changed when the global variables have changed.\n  const unmemoizedFilledInPaths: {\n    [key: string]: RosPath;\n  } = useMemo(() => {\n    const filledInPaths: Record<string, RosPath> = {};\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        filledInPaths[path] = fillInGlobalVariablesInPath(rosPath, globalVariables);\n      }\n    }\n    return filledInPaths;\n  }, [globalVariables, memoizedPaths]);\n  const memoizedFilledInPaths = useDeepMemo<{\n    [key: string]: RosPath;\n  }>(unmemoizedFilledInPaths);\n\n  // Filter down topics and datatypes to only the ones we need to process the requested paths, so\n  // our result can be dependent on the relevant topics only. Without this, adding topics/datatypes\n  // dynamically would result in panels clearing out when their message reducers change as a result\n  // of the change in topics/datatypes identity from the player.\n  const unmemoizedRelevantTopics = useMemo(() => {\n    const topicsByName = getTopicsByTopicName(providerTopics);\n    const seenNames = new Set<string>();\n    const result: Topic[] = [];\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        if (seenNames.has(rosPath.topicName)) {\n          continue;\n        }\n        seenNames.add(rosPath.topicName);\n        const topic = topicsByName[rosPath.topicName];\n        if (topic) {\n          result.push(topic);\n        }\n      }\n    }\n    return result;\n  }, [providerTopics, memoizedPaths]);\n  const relevantTopics = useDeepMemo(unmemoizedRelevantTopics);\n\n  const unmemoizedRelevantDatatypes = useMemo(() => {\n    const relevantDatatypes = new Map<string, Immutable<ValueInMapRecord<RosDatatypes>>>();\n    function addRelevantDatatype(datatypeName: string, seen: string[]) {\n      if (seen.includes(datatypeName)) {\n        return;\n      }\n\n      const type = datatypes.get(datatypeName);\n      if (type) {\n        relevantDatatypes.set(datatypeName, type);\n        for (const field of type.definitions) {\n          if (\n            field.isComplex === true ||\n            extractTypeFromStudioEnumAnnotation(field.name) != undefined\n          ) {\n            addRelevantDatatype(field.type, [...seen, datatypeName]);\n          }\n        }\n      }\n    }\n    for (const { schemaName } of relevantTopics.values()) {\n      if (schemaName != undefined) {\n        addRelevantDatatype(schemaName, []);\n      }\n    }\n    return relevantDatatypes;\n  }, [datatypes, relevantTopics]);\n  const relevantDatatypes = useDeepMemo(unmemoizedRelevantDatatypes);\n\n  // Cache MessagePathDataItem arrays by Message. We need to clear out this cache whenever\n  // the topics or datatypes change, since that's what getMessagePathDataItems\n  // depends on, outside of the message+path.\n  const cachesByPath = useRef<{\n    [key: string]: {\n      filledInPath: RosPath;\n      weakMap: WeakMap<MessageEvent, MessagePathDataItem[] | undefined>;\n    };\n  }>({});\n  if (useChangeDetector([relevantTopics, relevantDatatypes], { initiallyTrue: true })) {\n    cachesByPath.current = {};\n  }\n  // When the filled in paths changed, then that means that either the path string changed, or a\n  // relevant global variable changed. Delete the caches for where the `filledInPath` doesn't match\n  // any more.\n  if (useChangeDetector([memoizedFilledInPaths], { initiallyTrue: false })) {\n    for (const [path, current] of Object.entries(cachesByPath.current)) {\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath || !isEqual(current.filledInPath, filledInPath)) {\n        delete cachesByPath.current[path];\n      }\n    }\n  }\n\n  return useCallback(\n    (path: string, message: MessageEvent): MessagePathDataItem[] | undefined => {\n      if (!memoizedPaths.includes(path)) {\n        throw new Error(`path (${path}) was not in the list of cached paths`);\n      }\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath) {\n        return;\n      }\n      const currentPath = (cachesByPath.current[path] = cachesByPath.current[path] ?? {\n        filledInPath,\n        weakMap: new WeakMap(),\n      });\n      const { weakMap } = currentPath;\n      if (!weakMap.has(message)) {\n        const messagePathDataItems = getMessagePathDataItems(\n          message,\n          filledInPath,\n          relevantTopics,\n          relevantDatatypes,\n        );\n        weakMap.set(message, messagePathDataItems);\n        return messagePathDataItems;\n      }\n      const messagePathDataItems = weakMap.get(message);\n      return messagePathDataItems;\n    },\n    [relevantDatatypes, memoizedFilledInPaths, memoizedPaths, relevantTopics],\n  );\n}\n\nexport function fillInGlobalVariablesInPath(\n  rosPath: RosPath,\n  globalVariables: GlobalVariables,\n): RosPath {\n  return {\n    ...rosPath,\n    messagePath: rosPath.messagePath.map((messagePathPart) => {\n      if (messagePathPart.type === \"slice\") {\n        const start =\n          typeof messagePathPart.start === \"object\"\n            ? Number(globalVariables[messagePathPart.start.variableName])\n            : messagePathPart.start;\n        const end =\n          typeof messagePathPart.end === \"object\"\n            ? Number(globalVariables[messagePathPart.end.variableName])\n            : messagePathPart.end;\n\n        return {\n          ...messagePathPart,\n          start: isNaN(start) ? 0 : start,\n          end: isNaN(end) ? Infinity : end,\n        };\n      } else if (messagePathPart.type === \"filter\" && typeof messagePathPart.value === \"object\") {\n        let value;\n        const variable = globalVariables[messagePathPart.value.variableName];\n        if (typeof variable === \"number\" || typeof variable === \"string\") {\n          value = variable;\n        }\n        return { ...messagePathPart, value };\n      }\n\n      return messagePathPart;\n    }),\n  };\n}\n\n// Get a new item that has `queriedData` set to the values and paths as queried by `rosPath`.\n// Exported just for tests.\nexport function getMessagePathDataItems(\n  message: MessageEvent,\n  filledInPath: RosPath,\n  providerTopics: readonly Topic[],\n  datatypes: Immutable<RosDatatypes>,\n): MessagePathDataItem[] | undefined {\n  const structures = messagePathStructures(datatypes);\n  const topic = getTopicsByTopicName(providerTopics)[filledInPath.topicName];\n\n  // We don't care about messages that don't match the topic we're looking for.\n  if (!topic || message.topic !== filledInPath.topicName) {\n    return;\n  }\n\n  // Apply top-level filters first. If a message matches all top-level filters, then this function\n  // will *always* return a history item, so this is our only chance to return nothing.\n  for (const item of filledInPath.messagePath) {\n    if (item.type === \"filter\") {\n      if (!filterMatches(item, message.message)) {\n        return [];\n      }\n    } else {\n      break;\n    }\n  }\n\n  const queriedData: MessagePathDataItem[] = [];\n  // Traverse the message (via `value`) and the `messagePath` at the same time. Also keep track\n  // of a `path` string that we should show in the tooltip of the point.\n  function traverse(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value: any,\n    pathIndex: number,\n    path: string,\n    structureItem: MessagePathStructureItem | undefined,\n  ) {\n    if (value == undefined || structureItem == undefined) {\n      return;\n    }\n    const pathItem = filledInPath.messagePath[pathIndex];\n    const nextPathItem = filledInPath.messagePath[pathIndex + 1];\n    if (!pathItem) {\n      // If we're at the end of the `messagePath`, we're done! Just store the point.\n      let constantName: string | undefined;\n      const prevPathItem = filledInPath.messagePath[pathIndex - 1];\n      if (prevPathItem && prevPathItem.type === \"name\") {\n        const fieldName = prevPathItem.name;\n        const enumMap = enumValuesByDatatypeAndField(datatypes)[structureItem.datatype];\n        constantName = enumMap?.[fieldName]?.[value];\n      }\n      queriedData.push({ value, path, constantName });\n    } else if (pathItem.type === \"name\" && structureItem.structureType === \"message\") {\n      // If the `pathItem` is a name, we're traversing down using that name.\n      const next = structureItem.nextByName[pathItem.name];\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, next);\n    } else if (pathItem.type === \"slice\" && structureItem.structureType === \"array\") {\n      const { start, end } = pathItem;\n      if (typeof start === \"object\" || typeof end === \"object\") {\n        throw new Error(\n          \"getMessagePathDataItems only works on paths where global variables have been filled in\",\n        );\n      }\n      const startIdx: number = start;\n      const endIdx: number = end;\n      if (typeof startIdx !== \"number\" || typeof endIdx !== \"number\") {\n        return;\n      }\n\n      // If the `pathItem` is a slice, iterate over all the relevant elements in the array.\n      const arrayLength = value.length as number;\n      for (let i = startIdx; i <= Math.min(endIdx, arrayLength - 1); i++) {\n        const index = i >= 0 ? i : arrayLength + i;\n        const arrayElement = value[index];\n        if (arrayElement == undefined) {\n          continue;\n        }\n        // Ideally show something like `/topic.object[:]{some_id=123}` for the path, but fall\n        // back to `/topic.object[10]` if necessary. In any case, make sure that the user can\n        // actually identify where the value came from.\n        let newPath;\n        if (nextPathItem && nextPathItem.type === \"filter\") {\n          // If we have a filter set after this, it will update the path appropriately.\n          newPath = `${path}[:]`;\n        } else if (typeof arrayElement === \"object\") {\n          // See if `arrayElement` has a property that we typically filter on. If so, show that.\n          const name = TypicalFilterNames.find((id) => id in arrayElement);\n          if (name != undefined) {\n            newPath = `${path}[:]{${name}==${arrayElement[name]}}`;\n          } else {\n            // Use `i` here instead of `index`, since it's only different when `i` is negative,\n            // and in that case it's probably more useful to show to the user how many elements\n            // from the end of the array this data is, since they clearly are thinking in that way\n            // (otherwise they wouldn't have chosen a negative slice).\n            newPath = `${path}[${i}]`;\n          }\n        } else {\n          // Use `i` here instead of `index`, since it's only different when `i` is negative,\n          // and in that case it's probably more useful to show to the user how many elements\n          // from the end of the array this data is, since they clearly are thinking in that way\n          // (otherwise they wouldn't have chosen a negative slice).\n          newPath = `${path}[${i}]`;\n        }\n        traverse(arrayElement, pathIndex + 1, newPath, structureItem.next);\n      }\n    } else if (pathItem.type === \"filter\") {\n      if (filterMatches(pathItem, value)) {\n        traverse(value, pathIndex + 1, `${path}{${pathItem.repr}}`, structureItem);\n      }\n    } else {\n      console.warn(\n        `Unknown pathItem.type ${pathItem.type} for structureType: ${structureItem.structureType}`,\n      );\n    }\n  }\n  const structure: MessagePathStructureItemMessage | undefined =\n    // If the topic has no schema, we can at least allow accessing the root message\n    topic.schemaName == undefined\n      ? { structureType: \"message\", datatype: \"\", nextByName: {} }\n      : structures[topic.schemaName];\n  if (structure) {\n    traverse(message.message, 0, quoteTopicNameIfNeeded(filledInPath.topicName), structure);\n  }\n  return queriedData;\n}\n\nexport type MessageAndData = {\n  messageEvent: MessageEvent;\n  queriedData: MessagePathDataItem[];\n};\n\nexport type MessageDataItemsByPath = {\n  readonly [key: string]: readonly MessageAndData[];\n};\n\nexport function useDecodeMessagePathsForMessagesByTopic(\n  paths: readonly string[],\n): (messagesByTopic: { [topicName: string]: readonly MessageEvent[] }) => MessageDataItemsByPath {\n  const memoizedPaths = useShallowMemo(paths);\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(memoizedPaths);\n  // Note: Let callers define their own memoization scheme for messagesByTopic. For regular playback\n  // useMemo might be appropriate, but weakMemo will likely better for blocks.\n  return useCallback(\n    (messagesByTopic) => {\n      const obj: { [path: string]: MessageAndData[] } = {};\n      for (const path of memoizedPaths) {\n        // Create an array for invalid paths, and valid paths with entries in messagesByTopic\n        const rosPath = parseRosPath(path);\n        if (!rosPath) {\n          obj[path] = [];\n          continue;\n        }\n        const messages = messagesByTopic[rosPath.topicName];\n        if (!messages) {\n          // For the playback pipeline messagesByTopic will always include an entry for every topic.\n          // For the blocks, missing entries are semantically interesting, and should result in\n          // missing (not empty) entries in the output so that information is communicated\n          // downstream.\n          continue;\n        }\n\n        const messagesForThisPath: MessageAndData[] = [];\n        obj[path] = messagesForThisPath;\n\n        for (const message of messages) {\n          // Add the item (if it exists) to the array.\n          const queriedData = cachedGetMessagePathDataItems(path, message);\n          if (queriedData) {\n            messagesForThisPath.push({ messageEvent: message, queriedData });\n          }\n        }\n      }\n      return obj;\n    },\n    [memoizedPaths, cachedGetMessagePathDataItems],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nexport function sanitizeAccessorPath(accessorPath: string): string {\n  return accessorPath.replace(/\\./g, \"-\");\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport MinusIcon from \"@mui/icons-material/IndeterminateCheckBoxOutlined\";\nimport { IconButton } from \"@mui/material\";\nimport { Row } from \"@tanstack/react-table\";\nimport { PropsWithChildren } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { CellValue } from \"@foxglove/studio-base/panels/Table/types\";\n\nimport { sanitizeAccessorPath } from \"./sanitizeAccessorPath\";\n\nconst useStyles = makeStyles()((theme) => ({\n  objectCell: {\n    fontStyle: \"italic\",\n    cursor: \"pointer\",\n  },\n  iconButton: {\n    marginTop: theme.spacing(-0.5),\n    marginLeft: theme.spacing(-0.5),\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\ntype TableCellProps = {\n  row: Row<CellValue>;\n  accessorPath: string;\n};\n\nexport default function TableCell({\n  row,\n  accessorPath,\n  children,\n}: PropsWithChildren<TableCellProps>): JSX.Element {\n  const { classes } = useStyles();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const toggleIsExpanded = React.useCallback(() => setIsExpanded((expanded) => !expanded), []);\n\n  if (row.getIsExpanded() || isExpanded) {\n    return (\n      <div>\n        {isExpanded && (\n          <IconButton size=\"small\" onClick={toggleIsExpanded} className={classes.iconButton}>\n            <MinusIcon fontSize=\"small\" />\n          </IconButton>\n        )}\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <span\n      className={classes.objectCell}\n      data-testid={`expand-cell-${sanitizeAccessorPath(accessorPath)}-${row.index}`}\n      onClick={toggleIsExpanded}\n    >\n      Object\n    </span>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport PlusIcon from \"@mui/icons-material/AddBoxOutlined\";\nimport MinusIcon from \"@mui/icons-material/IndeterminateCheckBoxOutlined\";\nimport KeyboardArrowLeftIcon from \"@mui/icons-material/KeyboardArrowLeft\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\nimport { Container, IconButton, MenuItem, Select, Typography } from \"@mui/material\";\nimport {\n  ExpandedState,\n  createColumnHelper,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\n\nimport TableCell from \"./TableCell\";\nimport { sanitizeAccessorPath } from \"./sanitizeAccessorPath\";\nimport { CellValue } from \"./types\";\n\nconst useStyles = makeStyles<void, \"tableData\" | \"tableHeader\">()((theme, _params, classes) => ({\n  table: {\n    border: \"none\",\n    width: \"100%\",\n    borderCollapse: \"collapse\",\n    borderSpacing: 0,\n  },\n  tableRow: {\n    svg: { opacity: 0.6 },\n\n    \"&:nth-of-type(even)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"&:hover\": {\n      backgroundColor: theme.palette.action.focus,\n\n      [`.${classes.tableData}`]: {\n        backgroundColor: theme.palette.action.hover,\n        cursor: \"pointer\",\n      },\n      svg: { opacity: 0.8 },\n    },\n\n    [`.${classes.tableHeader}:first-of-type`]: {\n      paddingTop: theme.spacing(0.5),\n      paddingBottom: theme.spacing(0.5),\n    },\n  },\n  tableData: {\n    padding: `${theme.spacing(0.5)} !important`,\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\",\n    verticalAlign: \"top\",\n    border: `1px solid ${theme.palette.divider}`,\n    lineHeight: \"1.3em\",\n  },\n  tableHeader: {\n    color: theme.palette.text.primary,\n    verticalAlign: \"top\",\n    border: `1px solid ${theme.palette.divider}`,\n    lineHeight: \"1.3em\",\n    borderLeftColor: \"transparent\",\n    borderRightColor: \"transparent\",\n    padding: theme.spacing(0.5),\n    fontWeight: \"bold !important\",\n    cursor: \"pointer\",\n    width: \"auto\",\n    textAlign: \"left\",\n\n    \"&#expander\": { width: 28 },\n  },\n  sortAsc: {\n    borderBottomColor: theme.palette.primary.main,\n  },\n  sortDesc: {\n    borderTopColor: theme.palette.primary.main,\n  },\n  iconButton: {\n    margin: theme.spacing(-0.5),\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nconst columnHelper = createColumnHelper<CellValue>();\n\nfunction getColumnsFromObject(val: CellValue, accessorPath: string, iconButtonClasses: string) {\n  const obj = val.toJSON?.() ?? val;\n  const columns = Object.keys(obj).map((accessor) => {\n    const id = accessorPath.length !== 0 ? `${accessorPath}.${accessor}` : accessor;\n    return columnHelper.accessor(accessor, {\n      header: accessor,\n      id,\n      cell: (info) => {\n        const value = info.getValue();\n        const row = info.row;\n        if (Array.isArray(value) && typeof value[0] !== \"object\") {\n          return JSON.stringify(value);\n        }\n\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof value === \"object\" && value != null) {\n          return (\n            <TableCell row={row} accessorPath={id}>\n              <Table value={value} accessorPath={accessorPath} />\n            </TableCell>\n          );\n        }\n\n        // In case the value is null.\n        return `${value}`;\n      },\n    });\n  });\n\n  if (accessorPath.length === 0) {\n    const expandColumn = columnHelper.display({\n      id: \"expander\",\n      header: \"\",\n      cell: ({ row }) => {\n        return (\n          <IconButton\n            className={iconButtonClasses}\n            size=\"small\"\n            data-testid={`expand-row-${row.index}`}\n            onClick={() => row.toggleExpanded()}\n          >\n            {row.getIsExpanded() ? <MinusIcon fontSize=\"small\" /> : <PlusIcon fontSize=\"small\" />}\n          </IconButton>\n        );\n      },\n    });\n    columns.unshift(expandColumn);\n  }\n\n  return columns;\n}\n\nexport default function Table({\n  value,\n  accessorPath,\n}: {\n  value: unknown;\n  accessorPath: string;\n}): JSX.Element {\n  const isNested = accessorPath.length > 0;\n  const { classes, cx } = useStyles();\n\n  const columns = React.useMemo(() => {\n    if (\n      // eslint-disable-next-line no-restricted-syntax\n      value == null ||\n      typeof value !== \"object\" ||\n      // eslint-disable-next-line no-restricted-syntax\n      (Array.isArray(value) && typeof value[0] !== \"object\" && value[0] != null)\n    ) {\n      return [];\n    }\n\n    const maybeMessage = Array.isArray(value) ? value[0] ?? {} : value;\n\n    // Strong assumption about structure of data.\n    return getColumnsFromObject(maybeMessage as CellValue, accessorPath, classes.iconButton);\n  }, [accessorPath, classes.iconButton, value]);\n\n  const data = React.useMemo(() => (Array.isArray(value) ? value : [value]), [value]);\n\n  const [expanded, setExpanded] = React.useState<ExpandedState>({});\n\n  const table = useReactTable({\n    autoResetExpanded: false,\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getPaginationRowModel: isNested ? getPaginationRowModel() : undefined,\n    getSortedRowModel: getSortedRowModel(),\n    initialState: { pagination: { pageSize: 30 } },\n    onExpandedChange: setExpanded,\n    state: {\n      expanded,\n    },\n  });\n\n  if (\n    typeof value !== \"object\" ||\n    // eslint-disable-next-line no-restricted-syntax\n    value == null ||\n    (!isNested && Array.isArray(value) && typeof value[0] !== \"object\")\n  ) {\n    return (\n      <EmptyState>\n        Cannot render primitive values in a table. Try using the Raw Messages panel instead.\n      </EmptyState>\n    );\n  }\n\n  const {\n    pagination: { pageIndex, pageSize },\n  } = table.getState();\n\n  return (\n    <>\n      <table className={classes.table}>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup, i) => {\n            return (\n              <tr className={classes.tableRow} key={i}>\n                {headerGroup.headers.map((header) => {\n                  const column = header.column;\n                  return (\n                    <th\n                      className={cx(classes.tableHeader, {\n                        [classes.sortAsc]: column.getIsSorted() === \"asc\",\n                        [classes.sortDesc]: column.getIsSorted() === \"desc\",\n                      })}\n                      id={column.id}\n                      onClick={header.column.getToggleSortingHandler()}\n                      key={column.id}\n                      data-testid={`column-header-${sanitizeAccessorPath(column.id)}`}\n                    >\n                      {flexRender(header.column.columnDef.header, header)}\n                    </th>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </thead>\n        <tbody>\n          {table\n            .getRowModel()\n            .rows.slice(pageIndex * pageSize, (pageIndex + 1) * pageSize)\n            .map((row) => {\n              return (\n                <tr className={classes.tableRow} key={row.index}>\n                  {row.getVisibleCells().map((cell, i) => {\n                    return (\n                      <td className={classes.tableData} key={i}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n      {!isNested && (\n        <Container maxWidth=\"xs\" disableGutters>\n          <Stack\n            direction=\"row\"\n            flexWrap=\"wrap\"\n            gap={1}\n            paddingX={0.5}\n            paddingTop={0.5}\n            alignItems=\"center\"\n          >\n            <IconButton\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <KeyboardDoubleArrowLeftIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n              <KeyboardArrowLeftIcon fontSize=\"small\" />\n            </IconButton>\n            <Typography flex=\"auto\" variant=\"inherit\" align=\"center\" noWrap>\n              Page{\" \"}\n              <strong>\n                {table.getState().pagination.pageIndex + 1} of {table.getPageOptions().length}\n              </strong>\n            </Typography>\n            <IconButton onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n              <KeyboardArrowRightIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <KeyboardDoubleArrowRightIcon fontSize=\"small\" />\n            </IconButton>\n            <Select\n              value={pageSize}\n              size=\"small\"\n              onChange={(e) => table.setPageSize(Number(e.target.value))}\n              MenuProps={{ MenuListProps: { dense: true } }}\n            >\n              {[10, 20, 30, 40, 50].map((size) => (\n                <MenuItem key={size} value={size}>{`Show ${size}`}</MenuItem>\n              ))}\n            </Select>\n          </Stack>\n        </Container>\n      )}\n    </>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { useMessagesByTopic } from \"@foxglove/studio-base/PanelAPI\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport MessagePathInput from \"@foxglove/studio-base/components/MessagePathSyntax/MessagePathInput\";\nimport { RosPath } from \"@foxglove/studio-base/components/MessagePathSyntax/constants\";\nimport parseRosPath from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport { useCachedGetMessagePathDataItems } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport Table from \"./Table\";\n\ntype Config = { topicPath: string };\ntype Props = { config: Config; saveConfig: SaveConfig<Config> };\n\nconst useStyles = makeStyles()({\n  inputWrapper: {\n    width: \"100%\",\n    lineHeight: \"20px\",\n  },\n  monospace: {\n    fontFamily: fonts.MONOSPACE,\n  },\n});\n\nfunction TablePanel({ config, saveConfig }: Props) {\n  const { topicPath } = config;\n  const { classes } = useStyles();\n  const onTopicPathChange = React.useCallback(\n    (newTopicPath: string) => saveConfig({ topicPath: newTopicPath }),\n    [saveConfig],\n  );\n\n  const topicRosPath: RosPath | undefined = React.useMemo(\n    () => parseRosPath(topicPath),\n    [topicPath],\n  );\n  const topicName = topicRosPath?.topicName ?? \"\";\n  const msgs = useMessagesByTopic({ topics: [topicName], historySize: 1 })[topicName];\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems([topicPath]);\n  const msg = msgs?.[0];\n  const cachedMessages = msg ? cachedGetMessagePathDataItems(topicPath, msg) ?? [] : [];\n  const firstCachedMessage = cachedMessages[0];\n\n  return (\n    <Stack flex=\"auto\" overflow=\"hidden\" position=\"relative\">\n      <PanelToolbar>\n        <div className={classes.inputWrapper}>\n          <MessagePathInput\n            index={0}\n            path={topicPath}\n            onChange={onTopicPathChange}\n            inputStyle={{ height: 20 }}\n          />\n        </div>\n      </PanelToolbar>\n      {topicPath.length === 0 && <EmptyState>No topic selected</EmptyState>}\n      {topicPath.length !== 0 && cachedMessages.length === 0 && (\n        <EmptyState>Waiting for next message</EmptyState>\n      )}\n      {topicPath.length !== 0 && firstCachedMessage && (\n        <Stack overflow=\"auto\" className={classes.monospace}>\n          <Table value={firstCachedMessage.value} accessorPath=\"\" />\n        </Stack>\n      )}\n    </Stack>\n  );\n}\n\nTablePanel.panelType = \"Table\";\nTablePanel.defaultConfig = {\n  topicPath: \"\",\n};\n\nexport default Panel(TablePanel);\n"],"names":["filterMatches","filter","value","currentValue","name","useCachedGetMessagePathDataItems","paths","providerTopics","datatypes","globalVariables","memoizedPaths","unmemoizedFilledInPaths","filledInPaths","path","rosPath","fillInGlobalVariablesInPath","memoizedFilledInPaths","unmemoizedRelevantTopics","topicsByName","seenNames","result","topic","relevantTopics","unmemoizedRelevantDatatypes","relevantDatatypes","addRelevantDatatype","datatypeName","seen","type","field","schemaName","cachesByPath","current","filledInPath","message","currentPath","weakMap","messagePathDataItems","getMessagePathDataItems","messagePathPart","start","end","variable","structures","item","queriedData","traverse","pathIndex","structureItem","pathItem","nextPathItem","next","startIdx","endIdx","arrayLength","i","index","arrayElement","newPath","id","constantName","prevPathItem","fieldName","structure","useDecodeMessagePathsForMessagesByTopic","cachedGetMessagePathDataItems","messagesByTopic","obj","messages","messagesForThisPath","sanitizeAccessorPath","accessorPath","useStyles","theme","TableCell","row","children","classes","isExpanded","setIsExpanded","React","toggleIsExpanded","expanded","IconButton","_params","columnHelper","getColumnsFromObject","val","iconButtonClasses","columns","accessor","info","Table","expandColumn","isNested","cx","maybeMessage","data","setExpanded","table","EmptyState","pageIndex","pageSize","headerGroup","header","column","cell","Container","Stack","KeyboardDoubleArrowLeft","KeyboardArrowLeft","Typography","KeyboardArrowRight","KeyboardDoubleArrowRight","Select","e","size","MenuItem","TablePanel","config","saveConfig","topicPath","onTopicPathChange","newTopicPath","topicName","parseRosPath","msgs","msg","cachedMessages","firstCachedMessage","PanelToolbar","MessagePathInput","Panel"],"sourceRoot":""}