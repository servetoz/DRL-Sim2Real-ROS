{"version":3,"file":"studio-1234.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useMessagesByPath.ts","webpack:///../../packages/studio-base/src/panels/StateTransitions/positiveModulo.ts","webpack:///../../packages/studio-base/src/panels/StateTransitions/messagesToDatasets.ts","webpack:///../../packages/studio-base/src/panels/StateTransitions/shared.ts","webpack:///../../packages/studio-base/src/panels/StateTransitions/settings.ts","webpack:///../../packages/studio-base/src/panels/StateTransitions/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useMemo } from \"react\";\n\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport { getTopicsFromPaths } from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport {\n  MessageDataItemsByPath,\n  useDecodeMessagePathsForMessagesByTopic,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\n\n// Given a set of message paths, subscribe to the appropriate topics and return\n// messages with their queried data decoded for each path.\nexport default function useMessagesByPath(\n  paths: string[],\n  historySize: number = Infinity,\n): MessageDataItemsByPath {\n  const memoizedPaths: string[] = useShallowMemo(paths);\n  const subscribeTopics = useMemo(() => getTopicsFromPaths(memoizedPaths), [memoizedPaths]);\n\n  const messagesByTopic = PanelAPI.useMessagesByTopic({\n    topics: subscribeTopics,\n    historySize,\n  });\n\n  const decodeMessagePathsForMessagesByTopic =\n    useDecodeMessagePathsForMessagesByTopic(memoizedPaths);\n  return useMemo(\n    () => decodeMessagePathsForMessagesByTopic(messagesByTopic),\n    [decodeMessagePathsForMessagesByTopic, messagesByTopic],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\n// Equivalent to `number % modulus`, but always returns a positive number (given that modulus is\n// a positive number). This is the same as the `%` in e.g. Python.\n// See https://stackoverflow.com/a/4467559 and https://en.wikipedia.org/wiki/Modulo_operation\nexport default function positiveModulo(number: number, modulus: number): number {\n  return ((number % modulus) + modulus) % modulus;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport stringHash from \"string-hash\";\n\nimport { Time, toSec, subtract as subtractTimes } from \"@foxglove/rostime\";\nimport { MessageAndData } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport {\n  ChartDataset,\n  ChartDatasets,\n  ChartDatum,\n} from \"@foxglove/studio-base/components/TimeBasedChart/types\";\nimport { darkColor, expandedLineColors } from \"@foxglove/studio-base/util/plotColors\";\nimport { getTimestampForMessageEvent } from \"@foxglove/studio-base/util/time\";\nimport { grey } from \"@foxglove/studio-base/util/toolsColorScheme\";\n\nimport positiveModulo from \"./positiveModulo\";\nimport { StateTransitionPath } from \"./types\";\n\nconst baseColors = [grey, ...expandedLineColors];\n\ntype Args = {\n  path: StateTransitionPath;\n  startTime: Time;\n  y: number;\n  pathIndex: number;\n  blocks: readonly (readonly MessageAndData[] | undefined)[];\n};\n\nexport default function messagesToDatasets(args: Args): ChartDatasets {\n  const { path, pathIndex, startTime, y, blocks } = args;\n\n  const datasets = [];\n\n  let previousTimestamp: Time | undefined;\n  let currentData: ChartDatum[] = [];\n\n  const datasetIndexMap = new Map<unknown, number>();\n  let lastDatasetIndex: undefined | number = undefined;\n\n  for (const messages of blocks) {\n    if (!messages) {\n      currentData.push({ x: NaN, y: NaN });\n      lastDatasetIndex = undefined;\n      previousTimestamp = undefined;\n      continue;\n    }\n\n    for (const itemByPath of messages) {\n      const timestamp = getTimestampForMessageEvent(itemByPath.messageEvent, path.timestampMethod);\n      if (!timestamp) {\n        continue;\n      }\n\n      const queriedData = itemByPath.queriedData[0];\n      if (itemByPath.queriedData.length !== 1 || !queriedData) {\n        continue;\n      }\n\n      const { constantName, value } = queriedData;\n\n      const datasetIndex = datasetIndexMap.get(value);\n\n      // Skip duplicates.\n      if (\n        previousTimestamp &&\n        toSec(subtractTimes(previousTimestamp, timestamp)) === 0 &&\n        datasetIndex === lastDatasetIndex\n      ) {\n        continue;\n      }\n      previousTimestamp = timestamp;\n\n      // Skip anything that cannot be cast to a number or is a string.\n      if (Number.isNaN(value) && typeof value !== \"string\") {\n        continue;\n      }\n\n      if (\n        typeof value !== \"number\" &&\n        typeof value !== \"bigint\" &&\n        typeof value !== \"boolean\" &&\n        typeof value !== \"string\"\n      ) {\n        continue;\n      }\n\n      const valueForColor =\n        typeof value === \"string\" ? stringHash(value) : Math.round(Number(value));\n      const color =\n        baseColors[positiveModulo(valueForColor, Object.values(baseColors).length)] ?? \"grey\";\n\n      const x = toSec(subtractTimes(timestamp, startTime));\n\n      // If the value maps to a different dataset than the last value, close the previous segment\n      // and insert a gap.\n      const newSegment = datasetIndex !== lastDatasetIndex;\n      if (newSegment) {\n        currentData.push({ x, y });\n        currentData.push({ x: NaN, y: NaN });\n      }\n      const label =\n        constantName != undefined ? `${constantName} (${String(value)})` : String(value);\n      if (datasetIndex == undefined) {\n        datasetIndexMap.set(value, datasets.length);\n        const elementWithLabel = {\n          x,\n          y,\n          label,\n          labelColor: color,\n          value,\n          constantName,\n        };\n\n        // new data starts with our current point, the current point\n        currentData = [elementWithLabel];\n        const dataset: ChartDataset = {\n          borderWidth: 10,\n          borderColor: color,\n          data: currentData,\n          label: pathIndex.toString(),\n          pointBackgroundColor: darkColor(color),\n          pointBorderColor: \"transparent\",\n          pointHoverRadius: 3,\n          pointRadius: 1.25,\n          pointStyle: \"circle\",\n          showLine: true,\n          datalabels: {\n            color,\n          },\n        };\n\n        lastDatasetIndex = datasets.length;\n        datasets.push(dataset);\n      } else {\n        currentData = datasets[datasetIndex]?.data ?? [];\n        if (newSegment) {\n          currentData.push({\n            x,\n            y,\n            label,\n            labelColor: color,\n            value,\n            constantName,\n          });\n        } else {\n          currentData.push({ x, y, value, constantName });\n        }\n        lastDatasetIndex = datasetIndex;\n      }\n    }\n  }\n\n  return datasets;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { StateTransitionPath } from \"./types\";\n\nfunction presence<T>(value: undefined | T): undefined | T {\n  if (value === \"\") {\n    return undefined;\n  }\n\n  return value == undefined ? undefined : value;\n}\n\nexport function stateTransitionPathDisplayName(\n  path: Readonly<StateTransitionPath>,\n  index: number,\n): string {\n  return presence(path.label) ?? presence(path.value) ?? `Series ${index + 1}`;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { produce } from \"immer\";\nimport { isEqual, set } from \"lodash\";\nimport memoizeWeak from \"memoize-weak\";\nimport { useCallback, useEffect } from \"react\";\n\nimport { SettingsTreeAction, SettingsTreeNode, SettingsTreeNodes } from \"@foxglove/studio\";\nimport { plotableRosTypes } from \"@foxglove/studio-base/panels/Plot\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { stateTransitionPathDisplayName } from \"./shared\";\nimport { StateTransitionConfig, StateTransitionPath } from \"./types\";\n\n// Note - we use memoizeWeak here instead of react memoization to allow us to memoize\n// at the level of individual nodes in our tree. This keeps our DOM updates small since\n// the NodeEditor component is wrapped in a React.memo.\n\nconst makeSeriesNode = memoizeWeak((path: StateTransitionPath, index: number): SettingsTreeNode => {\n  return {\n    actions: [\n      {\n        type: \"action\",\n        id: \"delete-series\",\n        label: \"Delete series\",\n        display: \"inline\",\n        icon: \"Clear\",\n      },\n    ],\n    label: stateTransitionPathDisplayName(path, index),\n    fields: {\n      value: {\n        label: \"Message path\",\n        input: \"messagepath\",\n        value: path.value,\n        validTypes: plotableRosTypes,\n      },\n      label: {\n        input: \"string\",\n        label: \"Label\",\n        value: path.label,\n      },\n      timestampMethod: {\n        input: \"select\",\n        label: \"Timestamp\",\n        value: path.timestampMethod,\n        options: [\n          { label: \"Receive Time\", value: \"receiveTime\" },\n          { label: \"Header Stamp\", value: \"headerStamp\" },\n        ],\n      },\n    },\n  };\n});\n\nconst makeRootSeriesNode = memoizeWeak((paths: StateTransitionPath[]): SettingsTreeNode => {\n  const children = Object.fromEntries(\n    paths.map((path, index) => [`${index}`, makeSeriesNode(path, index)]),\n  );\n  return {\n    label: \"Series\",\n    children,\n    actions: [\n      {\n        type: \"action\",\n        id: \"add-series\",\n        label: \"Add series\",\n        display: \"inline\",\n        icon: \"Addchart\",\n      },\n    ],\n  };\n});\n\nfunction buildSettingsTree(config: StateTransitionConfig): SettingsTreeNodes {\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        isSynced: { label: \"Sync with other plots\", input: \"boolean\", value: config.isSynced },\n      },\n    },\n    paths: makeRootSeriesNode(config.paths),\n  };\n}\n\nexport function useStateTransitionsPanelSettings(\n  config: StateTransitionConfig,\n  saveConfig: SaveConfig<StateTransitionConfig>,\n  focusedPath?: readonly string[],\n): void {\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action === \"update\") {\n        const { input, path, value } = action.payload;\n        if (input === \"boolean\" && isEqual(path, [\"general\", \"isSynced\"])) {\n          saveConfig({ isSynced: value });\n        } else {\n          saveConfig(\n            produce((draft) => {\n              set(draft, path, value);\n            }),\n          );\n        }\n      }\n\n      if (action.action === \"perform-node-action\") {\n        if (action.payload.id === \"add-series\") {\n          saveConfig(\n            produce((draft) => {\n              draft.paths.push({\n                timestampMethod: \"receiveTime\",\n                value: \"\",\n                enabled: true,\n              });\n            }),\n          );\n        } else if (action.payload.id === \"delete-series\") {\n          const index = action.payload.path[1];\n          saveConfig(\n            produce((draft) => {\n              draft.paths.splice(Number(index), 1);\n            }),\n          );\n        }\n      }\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      focusedPath,\n      nodes: buildSettingsTree(config),\n    });\n  }, [actionHandler, config, focusedPath, updatePanelSettingsTree]);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Edit16Filled } from \"@fluentui/react-icons\";\nimport { Button, Typography } from \"@mui/material\";\nimport { ChartOptions, ScaleOptions } from \"chart.js\";\nimport { isEmpty, pickBy, uniq } from \"lodash\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport tinycolor from \"tinycolor2\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport { add as addTimes, fromSec, subtract as subtractTimes, toSec } from \"@foxglove/rostime\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport { useBlocksByTopic } from \"@foxglove/studio-base/PanelAPI\";\nimport { getTopicsFromPaths } from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport {\n  MessageDataItemsByPath,\n  useDecodeMessagePathsForMessagesByTopic,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport useMessagesByPath from \"@foxglove/studio-base/components/MessagePathSyntax/useMessagesByPath\";\nimport {\n  MessagePipelineContext,\n  useMessagePipeline,\n  useMessagePipelineGetter,\n} from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport { usePanelContext } from \"@foxglove/studio-base/components/PanelContext\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport TimeBasedChart from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { ChartData, ChartDatasets } from \"@foxglove/studio-base/components/TimeBasedChart/types\";\nimport { useSelectedPanels } from \"@foxglove/studio-base/context/CurrentLayoutContext\";\nimport { useWorkspaceActions } from \"@foxglove/studio-base/context/Workspace/useWorkspaceActions\";\nimport { OnClickArg as OnChartClickArgs } from \"@foxglove/studio-base/src/components/Chart\";\nimport { OpenSiblingPanel, PanelConfig, SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport messagesToDatasets from \"./messagesToDatasets\";\nimport { useStateTransitionsPanelSettings } from \"./settings\";\nimport { stateTransitionPathDisplayName } from \"./shared\";\nimport { StateTransitionConfig } from \"./types\";\n\nexport const transitionableRosTypes = [\n  \"bool\",\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n  \"string\",\n  \"json\",\n];\n\nconst fontFamily = fonts.MONOSPACE;\nconst fontSize = 10;\nconst fontWeight = \"bold\";\nconst EMPTY_ITEMS_BY_PATH: MessageDataItemsByPath = {};\n\nconst useStyles = makeStyles()((theme) => ({\n  chartWrapper: {\n    position: \"relative\",\n    marginTop: theme.spacing(0.5),\n  },\n  chartOverlay: {\n    top: 0,\n    left: 0,\n    right: 0,\n    pointerEvents: \"none\",\n  },\n  row: {\n    paddingInline: theme.spacing(0.5),\n    pointerEvents: \"none\",\n  },\n  button: {\n    minWidth: \"auto\",\n    textAlign: \"left\",\n    pointerEvents: \"auto\",\n    fontWeight: \"normal\",\n    padding: theme.spacing(0, 1),\n    maxWidth: \"100%\",\n\n    \"&:hover\": {\n      backgroundColor: tinycolor(theme.palette.background.paper).setAlpha(0.67).toString(),\n      backgroundImage: `linear-gradient(to right, ${theme.palette.action.focus}, ${theme.palette.action.focus})`,\n    },\n    \".MuiButton-endIcon\": {\n      opacity: 0.8,\n      fontSize: 14,\n      marginLeft: theme.spacing(0.5),\n\n      svg: {\n        fontSize: \"1em\",\n        height: \"1em\",\n        width: \"1em\",\n      },\n    },\n    \":not(:hover) .MuiButton-endIcon\": {\n      display: \"none\",\n    },\n  },\n}));\n\nconst plugins: ChartOptions[\"plugins\"] = {\n  datalabels: {\n    display: \"auto\",\n    anchor: \"center\",\n    align: -45,\n    offset: 0,\n    clip: true,\n    font: {\n      family: fontFamily,\n      size: fontSize,\n      weight: fontWeight,\n    },\n  },\n  zoom: {\n    zoom: {\n      enabled: true,\n      mode: \"x\",\n      sensitivity: 3,\n      speed: 0.1,\n    },\n    pan: {\n      mode: \"x\",\n      enabled: true,\n      speed: 20,\n      threshold: 10,\n    },\n  },\n};\n\nexport function openSiblingStateTransitionsPanel(\n  openSiblingPanel: OpenSiblingPanel,\n  topicName: string,\n): void {\n  openSiblingPanel({\n    panelType: \"StateTransitions\",\n    updateIfExists: true,\n    siblingConfigCreator: (config: PanelConfig) => {\n      return {\n        ...config,\n        paths: uniq(\n          (config as StateTransitionConfig).paths.concat([\n            { value: topicName, timestampMethod: \"receiveTime\" },\n          ]),\n        ),\n      };\n    },\n  });\n}\n\nfunction selectCurrentTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.currentTime;\n}\n\ntype Props = {\n  config: StateTransitionConfig;\n  saveConfig: SaveConfig<StateTransitionConfig>;\n};\n\nconst StateTransitions = React.memo(function StateTransitions(props: Props) {\n  const { config, saveConfig } = props;\n  const { paths } = config;\n  const { classes } = useStyles();\n\n  const pathStrings = useMemo(() => paths.map(({ value }) => value), [paths]);\n  const subscribeTopics = useMemo(() => getTopicsFromPaths(pathStrings), [pathStrings]);\n\n  const { openPanelSettings } = useWorkspaceActions();\n  const { id: panelId } = usePanelContext();\n  const { setSelectedPanelIds } = useSelectedPanels();\n  const [focusedPath, setFocusedPath] = useState<undefined | string[]>(undefined);\n\n  const { startTime } = PanelAPI.useDataSourceInfo();\n  const currentTime = useMessagePipeline(selectCurrentTime);\n  const currentTimeSinceStart = useMemo(\n    () => (!currentTime || !startTime ? undefined : toSec(subtractTimes(currentTime, startTime))),\n    [currentTime, startTime],\n  );\n  const itemsByPath = useMessagesByPath(pathStrings);\n\n  const decodeMessagePathsForMessagesByTopic = useDecodeMessagePathsForMessagesByTopic(pathStrings);\n\n  const blocks = useBlocksByTopic(subscribeTopics);\n  const decodedBlocks = useMemo(\n    () => blocks.map(decodeMessagePathsForMessagesByTopic),\n    [blocks, decodeMessagePathsForMessagesByTopic],\n  );\n\n  const { height, heightPerTopic } = useMemo(() => {\n    const onlyTopicsHeight = paths.length * 64;\n    const xAxisHeight = 30;\n    return {\n      height: Math.max(80, onlyTopicsHeight + xAxisHeight),\n      heightPerTopic: onlyTopicsHeight / paths.length,\n    };\n  }, [paths.length]);\n\n  // If our blocks data covers all paths in the chart then ignore the data in itemsByPath\n  // since it's not needed to render the chart and would just cause unnecessary re-renders\n  // if included in the dataset.\n  const newItemsByPath = useMemo(() => {\n    const newItemsNotInBlocks = pickBy(\n      itemsByPath,\n      (_items, path) => !decodedBlocks.some((block) => block[path]),\n    );\n    return isEmpty(newItemsNotInBlocks) ? EMPTY_ITEMS_BY_PATH : newItemsNotInBlocks;\n  }, [decodedBlocks, itemsByPath]);\n\n  const { datasets, minY } = useMemo(() => {\n    // ignore all data when we don't have a start time\n    if (!startTime) {\n      return {\n        datasets: [],\n        minY: undefined,\n      };\n    }\n\n    let outMinY: number | undefined;\n    let outDatasets: ChartDatasets = [];\n\n    paths.forEach((path, pathIndex) => {\n      // y axis values are set based on the path we are rendering\n      // negative makes each path render below the previous\n      const y = (pathIndex + 1) * 6 * -1;\n      outMinY = Math.min(outMinY ?? y, y - 3);\n\n      const blocksForPath = decodedBlocks.map((decodedBlock) => decodedBlock[path.value]);\n\n      const newBlockDataSets = messagesToDatasets({\n        path,\n        startTime,\n        y,\n        pathIndex,\n        blocks: blocksForPath,\n      });\n\n      outDatasets = outDatasets.concat(newBlockDataSets);\n\n      // We have already filtered out paths we can find in blocks so anything left here\n      // should be included in the dataset.\n      const items = newItemsByPath[path.value];\n      if (items) {\n        const newPathDataSets = messagesToDatasets({\n          path,\n          startTime,\n          y,\n          pathIndex,\n          blocks: [items],\n        });\n        outDatasets = outDatasets.concat(newPathDataSets);\n      }\n    });\n\n    return {\n      datasets: outDatasets,\n      minY: outMinY,\n    };\n  }, [startTime, paths, decodedBlocks, newItemsByPath]);\n\n  const yScale = useMemo<ScaleOptions<\"linear\">>(() => {\n    return {\n      ticks: {\n        // Hide all y-axis ticks since each bar on the y-axis is just a separate path.\n        display: false,\n      },\n      grid: {\n        display: false,\n      },\n      type: \"linear\",\n      min: minY,\n      max: -3,\n    };\n  }, [minY]);\n\n  const xScale = useMemo<ScaleOptions<\"linear\">>(() => {\n    return {\n      type: \"linear\",\n      border: {\n        display: false,\n      },\n    };\n  }, []);\n\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const { width, ref: sizeRef } = useResizeDetector<HTMLDivElement>({\n    handleHeight: false,\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  // Disable the wheel event for the chart wrapper div (which is where we use sizeRef)\n  //\n  // The chart component uses wheel events for zoom and pan. After adding more series, the logic\n  // expands the chart element beyond the visible area of the panel. When this happens, scrolling on\n  // the chart also scrolls the chart wrapper div and results in zooming that chart AND scrolling\n  // the panel. This behavior is undesirable.\n  //\n  // This effect registers a wheel event handler for the wrapper div to prevent scrolling. To scroll\n  // the panel the user will use the scrollbar.\n  useEffect(() => {\n    const el = sizeRef.current;\n    const handler = (ev: WheelEvent) => {\n      ev.preventDefault();\n    };\n\n    el?.addEventListener(\"wheel\", handler);\n    return () => {\n      el?.removeEventListener(\"wheel\", handler);\n    };\n  }, [sizeRef]);\n\n  const messagePipeline = useMessagePipelineGetter();\n  const onClick = useCallback(\n    ({ x: seekSeconds }: OnChartClickArgs) => {\n      const {\n        seekPlayback,\n        playerState: { activeData: { startTime: start } = {} },\n      } = messagePipeline();\n      if (!seekPlayback || seekSeconds == undefined || start == undefined) {\n        return;\n      }\n      const seekTime = addTimes(start, fromSec(seekSeconds));\n      seekPlayback(seekTime);\n    },\n    [messagePipeline],\n  );\n\n  const data: ChartData = useShallowMemo({ datasets });\n\n  useStateTransitionsPanelSettings(config, saveConfig, focusedPath);\n\n  return (\n    <Stack flexGrow={1} overflow=\"hidden\" style={{ zIndex: 0 }}>\n      <PanelToolbar />\n      <Stack fullWidth flex=\"auto\" overflowX=\"hidden\" overflowY=\"auto\">\n        <div className={classes.chartWrapper} style={{ height }} ref={sizeRef}>\n          <TimeBasedChart\n            zoom\n            isSynced={config.isSynced}\n            showXAxisLabels\n            width={width ?? 0}\n            height={height}\n            data={data}\n            type=\"scatter\"\n            xAxes={xScale}\n            xAxisIsPlaybackTime\n            yAxes={yScale}\n            plugins={plugins}\n            onClick={onClick}\n            currentTime={currentTimeSinceStart}\n          />\n\n          <Stack className={classes.chartOverlay} position=\"absolute\" paddingTop={0.5}>\n            {paths.map((path, index) => (\n              <div className={classes.row} key={index} style={{ height: heightPerTopic }}>\n                <Button\n                  size=\"small\"\n                  color=\"inherit\"\n                  data-testid=\"edit-topic-button\"\n                  className={classes.button}\n                  endIcon={<Edit16Filled />}\n                  onClick={() => {\n                    setSelectedPanelIds([panelId]);\n                    openPanelSettings();\n                    setFocusedPath([\"paths\", String(index)]);\n                  }}\n                >\n                  <Typography variant=\"inherit\" noWrap>\n                    {stateTransitionPathDisplayName(path, index)}\n                  </Typography>\n                </Button>\n              </div>\n            ))}\n          </Stack>\n        </div>\n      </Stack>\n    </Stack>\n  );\n});\n\nconst defaultConfig: StateTransitionConfig = {\n  paths: [{ value: \"\", timestampMethod: \"receiveTime\" }],\n  isSynced: true,\n};\nexport default Panel(\n  Object.assign(StateTransitions, {\n    panelType: \"StateTransitions\",\n    defaultConfig,\n  }),\n);\n"],"names":["useMessagesByPath","paths","historySize","memoizedPaths","subscribeTopics","messagesByTopic","PanelAPI","decodeMessagePathsForMessagesByTopic","positiveModulo","number","modulus","baseColors","messagesToDatasets","args","path","pathIndex","startTime","y","blocks","datasets","previousTimestamp","currentData","datasetIndexMap","lastDatasetIndex","messages","itemByPath","timestamp","queriedData","constantName","value","datasetIndex","valueForColor","color","newSegment","label","dataset","presence","stateTransitionPathDisplayName","index","makeSeriesNode","makeRootSeriesNode","buildSettingsTree","config","useStateTransitionsPanelSettings","saveConfig","focusedPath","updatePanelSettingsTree","actionHandler","action","input","draft","transitionableRosTypes","fontFamily","fontSize","fontWeight","EMPTY_ITEMS_BY_PATH","useStyles","theme","tinycolor","plugins","openSiblingStateTransitionsPanel","openSiblingPanel","topicName","selectCurrentTime","ctx","StateTransitions","React","props","classes","pathStrings","openPanelSettings","useWorkspaceActions","panelId","setSelectedPanelIds","setFocusedPath","currentTime","currentTimeSinceStart","itemsByPath","decodedBlocks","height","heightPerTopic","onlyTopicsHeight","newItemsByPath","newItemsNotInBlocks","_items","block","minY","outMinY","outDatasets","blocksForPath","decodedBlock","newBlockDataSets","items","newPathDataSets","yScale","xScale","width","sizeRef","el","handler","ev","messagePipeline","onClick","seekSeconds","seekPlayback","start","seekTime","data","Stack","PanelToolbar","TimeBasedChart","Button","Typography","defaultConfig","Panel"],"sourceRoot":""}